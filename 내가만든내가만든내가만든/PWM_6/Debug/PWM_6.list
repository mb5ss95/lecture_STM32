
PWM_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c50  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002de4  08002de4  00012de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dfc  08002dfc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002dfc  08002dfc  00012dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e04  08002e04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e04  08002e04  00012e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e08  08002e08  00012e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  08002e18  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08002e18  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000938b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000158e  00000000  00000000  000293c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000af0  00000000  00000000  0002a958  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  0002b448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015206  00000000  00000000  0002be80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007617  00000000  00000000  00041086  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000876be  00000000  00000000  0004869d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cfd5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e0c  00000000  00000000  000cfdd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002dcc 	.word	0x08002dcc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002dcc 	.word	0x08002dcc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t r=0, g=0, b=0;
 80004da:	2300      	movs	r3, #0
 80004dc:	71fb      	strb	r3, [r7, #7]
 80004de:	2300      	movs	r3, #0
 80004e0:	71bb      	strb	r3, [r7, #6]
 80004e2:	2300      	movs	r3, #0
 80004e4:	717b      	strb	r3, [r7, #5]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 fb67 	bl	8000bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f863 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f9b1 	bl	8000854 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f2:	f000 f985 	bl	8000800 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004f6:	f000 f8c9 	bl	800068c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004fa:	2100      	movs	r1, #0
 80004fc:	482c      	ldr	r0, [pc, #176]	; (80005b0 <main+0xdc>)
 80004fe:	f001 fb33 	bl	8001b68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000502:	2104      	movs	r1, #4
 8000504:	482a      	ldr	r0, [pc, #168]	; (80005b0 <main+0xdc>)
 8000506:	f001 fb2f 	bl	8001b68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800050a:	2108      	movs	r1, #8
 800050c:	4828      	ldr	r0, [pc, #160]	; (80005b0 <main+0xdc>)
 800050e:	f001 fb2b 	bl	8001b68 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, b);
 8000512:	4b27      	ldr	r3, [pc, #156]	; (80005b0 <main+0xdc>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	797a      	ldrb	r2, [r7, #5]
 8000518:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, g);
 800051a:	4b25      	ldr	r3, [pc, #148]	; (80005b0 <main+0xdc>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	79ba      	ldrb	r2, [r7, #6]
 8000520:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, r);
 8000522:	4b23      	ldr	r3, [pc, #140]	; (80005b0 <main+0xdc>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	79fa      	ldrb	r2, [r7, #7]
 8000528:	63da      	str	r2, [r3, #60]	; 0x3c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(r = 0; r<255; r++)
 800052a:	2300      	movs	r3, #0
 800052c:	71fb      	strb	r3, [r7, #7]
 800052e:	e009      	b.n	8000544 <main+0x70>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, r);
 8000530:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <main+0xdc>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	79fa      	ldrb	r2, [r7, #7]
 8000536:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(50);
 8000538:	2032      	movs	r0, #50	; 0x32
 800053a:	f000 fbaf 	bl	8000c9c <HAL_Delay>
	  for(r = 0; r<255; r++)
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	3301      	adds	r3, #1
 8000542:	71fb      	strb	r3, [r7, #7]
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	2bff      	cmp	r3, #255	; 0xff
 8000548:	d1f2      	bne.n	8000530 <main+0x5c>
	  }
	  r=0;
 800054a:	2300      	movs	r3, #0
 800054c:	71fb      	strb	r3, [r7, #7]
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, r);
 800054e:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <main+0xdc>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	79fa      	ldrb	r2, [r7, #7]
 8000554:	63da      	str	r2, [r3, #60]	; 0x3c
	  for(g = 0; g<255; g++)
 8000556:	2300      	movs	r3, #0
 8000558:	71bb      	strb	r3, [r7, #6]
 800055a:	e009      	b.n	8000570 <main+0x9c>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, g);
 800055c:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <main+0xdc>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	79ba      	ldrb	r2, [r7, #6]
 8000562:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_Delay(50);
 8000564:	2032      	movs	r0, #50	; 0x32
 8000566:	f000 fb99 	bl	8000c9c <HAL_Delay>
	  for(g = 0; g<255; g++)
 800056a:	79bb      	ldrb	r3, [r7, #6]
 800056c:	3301      	adds	r3, #1
 800056e:	71bb      	strb	r3, [r7, #6]
 8000570:	79bb      	ldrb	r3, [r7, #6]
 8000572:	2bff      	cmp	r3, #255	; 0xff
 8000574:	d1f2      	bne.n	800055c <main+0x88>
	  }
	  g=0;
 8000576:	2300      	movs	r3, #0
 8000578:	71bb      	strb	r3, [r7, #6]
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, g);
 800057a:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <main+0xdc>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	79ba      	ldrb	r2, [r7, #6]
 8000580:	639a      	str	r2, [r3, #56]	; 0x38
	  for(b = 0; b<255; b++)
 8000582:	2300      	movs	r3, #0
 8000584:	717b      	strb	r3, [r7, #5]
 8000586:	e009      	b.n	800059c <main+0xc8>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, b);
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <main+0xdc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	797a      	ldrb	r2, [r7, #5]
 800058e:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(50);
 8000590:	2032      	movs	r0, #50	; 0x32
 8000592:	f000 fb83 	bl	8000c9c <HAL_Delay>
	  for(b = 0; b<255; b++)
 8000596:	797b      	ldrb	r3, [r7, #5]
 8000598:	3301      	adds	r3, #1
 800059a:	717b      	strb	r3, [r7, #5]
 800059c:	797b      	ldrb	r3, [r7, #5]
 800059e:	2bff      	cmp	r3, #255	; 0xff
 80005a0:	d1f2      	bne.n	8000588 <main+0xb4>
	  }
	  b=0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	717b      	strb	r3, [r7, #5]
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, b);
 80005a6:	4b02      	ldr	r3, [pc, #8]	; (80005b0 <main+0xdc>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	797a      	ldrb	r2, [r7, #5]
 80005ac:	635a      	str	r2, [r3, #52]	; 0x34
	  for(r = 0; r<255; r++)
 80005ae:	e7bc      	b.n	800052a <main+0x56>
 80005b0:	20000068 	.word	0x20000068

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	; 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 fbfa 	bl	8002dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b29      	ldr	r3, [pc, #164]	; (8000684 <SystemClock_Config+0xd0>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	4a28      	ldr	r2, [pc, #160]	; (8000684 <SystemClock_Config+0xd0>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	; 0x40
 80005e8:	4b26      	ldr	r3, [pc, #152]	; (8000684 <SystemClock_Config+0xd0>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b23      	ldr	r3, [pc, #140]	; (8000688 <SystemClock_Config+0xd4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <SystemClock_Config+0xd4>)
 8000602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <SystemClock_Config+0xd4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2310      	movs	r3, #16
 800061e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	2302      	movs	r3, #2
 8000622:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000624:	2300      	movs	r3, #0
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000628:	2310      	movs	r3, #16
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800062c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000630:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000632:	2304      	movs	r3, #4
 8000634:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000636:	2307      	movs	r3, #7
 8000638:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fdd0 	bl	80011e4 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800064a:	f000 f973 	bl	8000934 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2302      	movs	r3, #2
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2102      	movs	r1, #2
 800066a:	4618      	mov	r0, r3
 800066c:	f001 f82a 	bl	80016c4 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000676:	f000 f95d 	bl	8000934 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3750      	adds	r7, #80	; 0x50
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b096      	sub	sp, #88	; 0x58
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000692:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
 80006ba:	615a      	str	r2, [r3, #20]
 80006bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2220      	movs	r2, #32
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 fb79 	bl	8002dbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006ca:	4b4b      	ldr	r3, [pc, #300]	; (80007f8 <MX_TIM1_Init+0x16c>)
 80006cc:	4a4b      	ldr	r2, [pc, #300]	; (80007fc <MX_TIM1_Init+0x170>)
 80006ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 840;
 80006d0:	4b49      	ldr	r3, [pc, #292]	; (80007f8 <MX_TIM1_Init+0x16c>)
 80006d2:	f44f 7252 	mov.w	r2, #840	; 0x348
 80006d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d8:	4b47      	ldr	r3, [pc, #284]	; (80007f8 <MX_TIM1_Init+0x16c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80006de:	4b46      	ldr	r3, [pc, #280]	; (80007f8 <MX_TIM1_Init+0x16c>)
 80006e0:	22ff      	movs	r2, #255	; 0xff
 80006e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e4:	4b44      	ldr	r3, [pc, #272]	; (80007f8 <MX_TIM1_Init+0x16c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ea:	4b43      	ldr	r3, [pc, #268]	; (80007f8 <MX_TIM1_Init+0x16c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f0:	4b41      	ldr	r3, [pc, #260]	; (80007f8 <MX_TIM1_Init+0x16c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006f6:	4840      	ldr	r0, [pc, #256]	; (80007f8 <MX_TIM1_Init+0x16c>)
 80006f8:	f001 f9d6 	bl	8001aa8 <HAL_TIM_Base_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000702:	f000 f917 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800070c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000710:	4619      	mov	r1, r3
 8000712:	4839      	ldr	r0, [pc, #228]	; (80007f8 <MX_TIM1_Init+0x16c>)
 8000714:	f001 fb20 	bl	8001d58 <HAL_TIM_ConfigClockSource>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800071e:	f000 f909 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000722:	4835      	ldr	r0, [pc, #212]	; (80007f8 <MX_TIM1_Init+0x16c>)
 8000724:	f001 f9eb 	bl	8001afe <HAL_TIM_PWM_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800072e:	f000 f901 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000732:	2300      	movs	r3, #0
 8000734:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800073a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800073e:	4619      	mov	r1, r3
 8000740:	482d      	ldr	r0, [pc, #180]	; (80007f8 <MX_TIM1_Init+0x16c>)
 8000742:	f001 fe8d 	bl	8002460 <HAL_TIMEx_MasterConfigSynchronization>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800074c:	f000 f8f2 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000750:	2360      	movs	r3, #96	; 0x60
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000758:	2300      	movs	r3, #0
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800075c:	2300      	movs	r3, #0
 800075e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000764:	2300      	movs	r3, #0
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800076c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000770:	2200      	movs	r2, #0
 8000772:	4619      	mov	r1, r3
 8000774:	4820      	ldr	r0, [pc, #128]	; (80007f8 <MX_TIM1_Init+0x16c>)
 8000776:	f001 fa29 	bl	8001bcc <HAL_TIM_PWM_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000780:	f000 f8d8 	bl	8000934 <Error_Handler>
  }
  sConfigOC.Pulse = 60;
 8000784:	233c      	movs	r3, #60	; 0x3c
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078c:	2204      	movs	r2, #4
 800078e:	4619      	mov	r1, r3
 8000790:	4819      	ldr	r0, [pc, #100]	; (80007f8 <MX_TIM1_Init+0x16c>)
 8000792:	f001 fa1b 	bl	8001bcc <HAL_TIM_PWM_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800079c:	f000 f8ca 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a4:	2208      	movs	r2, #8
 80007a6:	4619      	mov	r1, r3
 80007a8:	4813      	ldr	r0, [pc, #76]	; (80007f8 <MX_TIM1_Init+0x16c>)
 80007aa:	f001 fa0f 	bl	8001bcc <HAL_TIM_PWM_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80007b4:	f000 f8be 	bl	8000934 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	4807      	ldr	r0, [pc, #28]	; (80007f8 <MX_TIM1_Init+0x16c>)
 80007dc:	f001 feae 	bl	800253c <HAL_TIMEx_ConfigBreakDeadTime>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 80007e6:	f000 f8a5 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007ea:	4803      	ldr	r0, [pc, #12]	; (80007f8 <MX_TIM1_Init+0x16c>)
 80007ec:	f000 f8f4 	bl	80009d8 <HAL_TIM_MspPostInit>

}
 80007f0:	bf00      	nop
 80007f2:	3758      	adds	r7, #88	; 0x58
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000068 	.word	0x20000068
 80007fc:	40010000 	.word	0x40010000

08000800 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_USART2_UART_Init+0x4c>)
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <MX_USART2_UART_Init+0x50>)
 8000808:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_USART2_UART_Init+0x4c>)
 800080c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000810:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_USART2_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_USART2_UART_Init+0x4c>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_USART2_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_USART2_UART_Init+0x4c>)
 8000838:	f001 fed2 	bl	80025e0 <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000842:	f000 f877 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000e8 	.word	0x200000e8
 8000850:	40004400 	.word	0x40004400

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a2c      	ldr	r2, [pc, #176]	; (8000924 <MX_GPIO_Init+0xd0>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <MX_GPIO_Init+0xd0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b26      	ldr	r3, [pc, #152]	; (8000924 <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a25      	ldr	r2, [pc, #148]	; (8000924 <MX_GPIO_Init+0xd0>)
 8000890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b23      	ldr	r3, [pc, #140]	; (8000924 <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_GPIO_Init+0xd0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a1e      	ldr	r2, [pc, #120]	; (8000924 <MX_GPIO_Init+0xd0>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_GPIO_Init+0xd0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a17      	ldr	r2, [pc, #92]	; (8000924 <MX_GPIO_Init+0xd0>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_GPIO_Init+0xd0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2120      	movs	r1, #32
 80008de:	4812      	ldr	r0, [pc, #72]	; (8000928 <MX_GPIO_Init+0xd4>)
 80008e0:	f000 fc66 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_GPIO_Init+0xd8>)
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_GPIO_Init+0xdc>)
 80008fa:	f000 fad7 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008fe:	2320      	movs	r3, #32
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_GPIO_Init+0xd4>)
 8000916:	f000 fac9 	bl	8000eac <HAL_GPIO_Init>

}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	; 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40020000 	.word	0x40020000
 800092c:	10210000 	.word	0x10210000
 8000930:	40020800 	.word	0x40020800

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
	...

08000944 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <HAL_MspInit+0x4c>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000982:	2007      	movs	r0, #7
 8000984:	f000 fa5e 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <HAL_TIM_Base_MspInit+0x3c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d10d      	bne.n	80009c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <HAL_TIM_Base_MspInit+0x40>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	4a09      	ldr	r2, [pc, #36]	; (80009d4 <HAL_TIM_Base_MspInit+0x40>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6453      	str	r3, [r2, #68]	; 0x44
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <HAL_TIM_Base_MspInit+0x40>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40010000 	.word	0x40010000
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <HAL_TIM_MspPostInit+0x68>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d11e      	bne.n	8000a38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HAL_TIM_MspPostInit+0x6c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <HAL_TIM_MspPostInit+0x6c>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <HAL_TIM_MspPostInit+0x6c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000a16:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	4619      	mov	r1, r3
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <HAL_TIM_MspPostInit+0x70>)
 8000a34:	f000 fa3a 	bl	8000eac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a38:	bf00      	nop
 8000a3a:	3720      	adds	r7, #32
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40010000 	.word	0x40010000
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000

08000a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a19      	ldr	r2, [pc, #100]	; (8000ad0 <HAL_UART_MspInit+0x84>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d12b      	bne.n	8000ac6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <HAL_UART_MspInit+0x8c>)
 8000ac2:	f000 f9f3 	bl	8000eac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	; 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40004400 	.word	0x40004400
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020000 	.word	0x40020000

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <MemManage_Handler+0x4>

08000af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b30:	f000 f894 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <SystemInit+0x28>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b42:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <SystemInit+0x28>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <SystemInit+0x28>)
 8000b4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b52:	609a      	str	r2, [r3, #8]
#endif
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b6a:	e003      	b.n	8000b74 <LoopCopyDataInit>

08000b6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b72:	3104      	adds	r1, #4

08000b74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b74:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b7c:	d3f6      	bcc.n	8000b6c <CopyDataInit>
  ldr  r2, =_sbss
 8000b7e:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b80:	e002      	b.n	8000b88 <LoopFillZerobss>

08000b82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b84:	f842 3b04 	str.w	r3, [r2], #4

08000b88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b8c:	d3f9      	bcc.n	8000b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b8e:	f7ff ffd3 	bl	8000b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b92:	f002 f8ef 	bl	8002d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b96:	f7ff fc9d 	bl	80004d4 <main>
  bx  lr    
 8000b9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b9c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000ba0:	08002e0c 	.word	0x08002e0c
  ldr  r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ba8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000bac:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000bb0:	2000012c 	.word	0x2000012c

08000bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	; (8000bf8 <HAL_Init+0x40>)
 8000bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_Init+0x40>)
 8000bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <HAL_Init+0x40>)
 8000bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 f92f 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f000 f808 	bl	8000bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bec:	f7ff feaa 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023c00 	.word	0x40023c00

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_InitTick+0x54>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_InitTick+0x58>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f939 	bl	8000e92 <HAL_SYSTICK_Config>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00e      	b.n	8000c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d80a      	bhi.n	8000c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f000 f90f 	bl	8000e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3c:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <HAL_InitTick+0x5c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000004 	.word	0x20000004

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x24>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_IncTick+0x24>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000128 	.word	0x20000128

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_GetTick+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000128 	.word	0x20000128

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff ffee 	bl	8000c84 <HAL_GetTick>
 8000ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb4:	d005      	beq.n	8000cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_Delay+0x40>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cc2:	bf00      	nop
 8000cc4:	f7ff ffde 	bl	8000c84 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d8f7      	bhi.n	8000cc4 <HAL_Delay+0x28>
  {
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000008 	.word	0x20000008

08000ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	60d3      	str	r3, [r2, #12]
}
 8000d18:	bf00      	nop
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <__NVIC_GetPriorityGrouping+0x18>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	f003 0307 	and.w	r3, r3, #7
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	db0a      	blt.n	8000d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	490c      	ldr	r1, [pc, #48]	; (8000d90 <__NVIC_SetPriority+0x4c>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	0112      	lsls	r2, r2, #4
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	440b      	add	r3, r1
 8000d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d6c:	e00a      	b.n	8000d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4908      	ldr	r1, [pc, #32]	; (8000d94 <__NVIC_SetPriority+0x50>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	3b04      	subs	r3, #4
 8000d7c:	0112      	lsls	r2, r2, #4
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	440b      	add	r3, r1
 8000d82:	761a      	strb	r2, [r3, #24]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000e100 	.word	0xe000e100
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	; 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f1c3 0307 	rsb	r3, r3, #7
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	bf28      	it	cs
 8000db6:	2304      	movcs	r3, #4
 8000db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d902      	bls.n	8000dc8 <NVIC_EncodePriority+0x30>
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3b03      	subs	r3, #3
 8000dc6:	e000      	b.n	8000dca <NVIC_EncodePriority+0x32>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	401a      	ands	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	43d9      	mvns	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	4313      	orrs	r3, r2
         );
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3724      	adds	r7, #36	; 0x24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e10:	d301      	bcc.n	8000e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00f      	b.n	8000e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <SysTick_Config+0x40>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1e:	210f      	movs	r1, #15
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f7ff ff8e 	bl	8000d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <SysTick_Config+0x40>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <SysTick_Config+0x40>)
 8000e30:	2207      	movs	r2, #7
 8000e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ff47 	bl	8000ce0 <__NVIC_SetPriorityGrouping>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6c:	f7ff ff5c 	bl	8000d28 <__NVIC_GetPriorityGrouping>
 8000e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	6978      	ldr	r0, [r7, #20]
 8000e78:	f7ff ff8e 	bl	8000d98 <NVIC_EncodePriority>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff5d 	bl	8000d44 <__NVIC_SetPriority>
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ffb0 	bl	8000e00 <SysTick_Config>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
 8000ec6:	e159      	b.n	800117c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec8:	2201      	movs	r2, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	f040 8148 	bne.w	8001176 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d00b      	beq.n	8000f06 <HAL_GPIO_Init+0x5a>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d007      	beq.n	8000f06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000efa:	2b11      	cmp	r3, #17
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b12      	cmp	r3, #18
 8000f04:	d130      	bne.n	8000f68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	091b      	lsrs	r3, r3, #4
 8000f52:	f003 0201 	and.w	r2, r3, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0xfc>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b12      	cmp	r3, #18
 8000fa6:	d123      	bne.n	8000ff0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	08da      	lsrs	r2, r3, #3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3208      	adds	r2, #8
 8000fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	f003 0307 	and.w	r3, r3, #7
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	691a      	ldr	r2, [r3, #16]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	08da      	lsrs	r2, r3, #3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3208      	adds	r2, #8
 8000fea:	69b9      	ldr	r1, [r7, #24]
 8000fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0203 	and.w	r2, r3, #3
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 80a2 	beq.w	8001176 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b56      	ldr	r3, [pc, #344]	; (8001190 <HAL_GPIO_Init+0x2e4>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	4a55      	ldr	r2, [pc, #340]	; (8001190 <HAL_GPIO_Init+0x2e4>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001040:	6453      	str	r3, [r2, #68]	; 0x44
 8001042:	4b53      	ldr	r3, [pc, #332]	; (8001190 <HAL_GPIO_Init+0x2e4>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800104e:	4a51      	ldr	r2, [pc, #324]	; (8001194 <HAL_GPIO_Init+0x2e8>)
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	220f      	movs	r2, #15
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a48      	ldr	r2, [pc, #288]	; (8001198 <HAL_GPIO_Init+0x2ec>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d019      	beq.n	80010ae <HAL_GPIO_Init+0x202>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a47      	ldr	r2, [pc, #284]	; (800119c <HAL_GPIO_Init+0x2f0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d013      	beq.n	80010aa <HAL_GPIO_Init+0x1fe>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a46      	ldr	r2, [pc, #280]	; (80011a0 <HAL_GPIO_Init+0x2f4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d00d      	beq.n	80010a6 <HAL_GPIO_Init+0x1fa>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a45      	ldr	r2, [pc, #276]	; (80011a4 <HAL_GPIO_Init+0x2f8>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d007      	beq.n	80010a2 <HAL_GPIO_Init+0x1f6>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a44      	ldr	r2, [pc, #272]	; (80011a8 <HAL_GPIO_Init+0x2fc>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_GPIO_Init+0x1f2>
 800109a:	2304      	movs	r3, #4
 800109c:	e008      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 800109e:	2307      	movs	r3, #7
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e004      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 80010ae:	2300      	movs	r3, #0
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	f002 0203 	and.w	r2, r2, #3
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	4093      	lsls	r3, r2
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c0:	4934      	ldr	r1, [pc, #208]	; (8001194 <HAL_GPIO_Init+0x2e8>)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ce:	4b37      	ldr	r3, [pc, #220]	; (80011ac <HAL_GPIO_Init+0x300>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f2:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <HAL_GPIO_Init+0x300>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010f8:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <HAL_GPIO_Init+0x300>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800111c:	4a23      	ldr	r2, [pc, #140]	; (80011ac <HAL_GPIO_Init+0x300>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001122:	4b22      	ldr	r3, [pc, #136]	; (80011ac <HAL_GPIO_Init+0x300>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001146:	4a19      	ldr	r2, [pc, #100]	; (80011ac <HAL_GPIO_Init+0x300>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800114c:	4b17      	ldr	r3, [pc, #92]	; (80011ac <HAL_GPIO_Init+0x300>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_GPIO_Init+0x300>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3301      	adds	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	2b0f      	cmp	r3, #15
 8001180:	f67f aea2 	bls.w	8000ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001184:	bf00      	nop
 8001186:	3724      	adds	r7, #36	; 0x24
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	40023800 	.word	0x40023800
 8001194:	40013800 	.word	0x40013800
 8001198:	40020000 	.word	0x40020000
 800119c:	40020400 	.word	0x40020400
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020c00 	.word	0x40020c00
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40013c00 	.word	0x40013c00

080011b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
 80011bc:	4613      	mov	r3, r2
 80011be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c0:	787b      	ldrb	r3, [r7, #1]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c6:	887a      	ldrh	r2, [r7, #2]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011cc:	e003      	b.n	80011d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	041a      	lsls	r2, r3, #16
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	619a      	str	r2, [r3, #24]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e25b      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d075      	beq.n	80012ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001202:	4ba3      	ldr	r3, [pc, #652]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b04      	cmp	r3, #4
 800120c:	d00c      	beq.n	8001228 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120e:	4ba0      	ldr	r3, [pc, #640]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001216:	2b08      	cmp	r3, #8
 8001218:	d112      	bne.n	8001240 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121a:	4b9d      	ldr	r3, [pc, #628]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001226:	d10b      	bne.n	8001240 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001228:	4b99      	ldr	r3, [pc, #612]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d05b      	beq.n	80012ec <HAL_RCC_OscConfig+0x108>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d157      	bne.n	80012ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e236      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001248:	d106      	bne.n	8001258 <HAL_RCC_OscConfig+0x74>
 800124a:	4b91      	ldr	r3, [pc, #580]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a90      	ldr	r2, [pc, #576]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	e01d      	b.n	8001294 <HAL_RCC_OscConfig+0xb0>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0x98>
 8001262:	4b8b      	ldr	r3, [pc, #556]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a8a      	ldr	r2, [pc, #552]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b88      	ldr	r3, [pc, #544]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a87      	ldr	r2, [pc, #540]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e00b      	b.n	8001294 <HAL_RCC_OscConfig+0xb0>
 800127c:	4b84      	ldr	r3, [pc, #528]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a83      	ldr	r2, [pc, #524]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b81      	ldr	r3, [pc, #516]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a80      	ldr	r2, [pc, #512]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 800128e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d013      	beq.n	80012c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fcf2 	bl	8000c84 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a4:	f7ff fcee 	bl	8000c84 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b64      	cmp	r3, #100	; 0x64
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e1fb      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b6:	4b76      	ldr	r3, [pc, #472]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0xc0>
 80012c2:	e014      	b.n	80012ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fcde 	bl	8000c84 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fcda 	bl	8000c84 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	; 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e1e7      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012de:	4b6c      	ldr	r3, [pc, #432]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0xe8>
 80012ea:	e000      	b.n	80012ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d063      	beq.n	80013c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012fa:	4b65      	ldr	r3, [pc, #404]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00b      	beq.n	800131e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001306:	4b62      	ldr	r3, [pc, #392]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800130e:	2b08      	cmp	r3, #8
 8001310:	d11c      	bne.n	800134c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001312:	4b5f      	ldr	r3, [pc, #380]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d116      	bne.n	800134c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131e:	4b5c      	ldr	r3, [pc, #368]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d005      	beq.n	8001336 <HAL_RCC_OscConfig+0x152>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d001      	beq.n	8001336 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e1bb      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001336:	4b56      	ldr	r3, [pc, #344]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	4952      	ldr	r1, [pc, #328]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134a:	e03a      	b.n	80013c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d020      	beq.n	8001396 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001354:	4b4f      	ldr	r3, [pc, #316]	; (8001494 <HAL_RCC_OscConfig+0x2b0>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135a:	f7ff fc93 	bl	8000c84 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001362:	f7ff fc8f 	bl	8000c84 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e19c      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001374:	4b46      	ldr	r3, [pc, #280]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001380:	4b43      	ldr	r3, [pc, #268]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	4940      	ldr	r1, [pc, #256]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]
 8001394:	e015      	b.n	80013c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001396:	4b3f      	ldr	r3, [pc, #252]	; (8001494 <HAL_RCC_OscConfig+0x2b0>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff fc72 	bl	8000c84 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a4:	f7ff fc6e 	bl	8000c84 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e17b      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b6:	4b36      	ldr	r3, [pc, #216]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d030      	beq.n	8001430 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d016      	beq.n	8001404 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <HAL_RCC_OscConfig+0x2b4>)
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013dc:	f7ff fc52 	bl	8000c84 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e4:	f7ff fc4e 	bl	8000c84 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e15b      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f6:	4b26      	ldr	r3, [pc, #152]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x200>
 8001402:	e015      	b.n	8001430 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001404:	4b24      	ldr	r3, [pc, #144]	; (8001498 <HAL_RCC_OscConfig+0x2b4>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140a:	f7ff fc3b 	bl	8000c84 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001412:	f7ff fc37 	bl	8000c84 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e144      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f0      	bne.n	8001412 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80a0 	beq.w	800157e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10f      	bne.n	800146e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800146a:	2301      	movs	r3, #1
 800146c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_RCC_OscConfig+0x2b8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d121      	bne.n	80014be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_RCC_OscConfig+0x2b8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a07      	ldr	r2, [pc, #28]	; (800149c <HAL_RCC_OscConfig+0x2b8>)
 8001480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001486:	f7ff fbfd 	bl	8000c84 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148c:	e011      	b.n	80014b2 <HAL_RCC_OscConfig+0x2ce>
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	42470000 	.word	0x42470000
 8001498:	42470e80 	.word	0x42470e80
 800149c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a0:	f7ff fbf0 	bl	8000c84 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e0fd      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b2:	4b81      	ldr	r3, [pc, #516]	; (80016b8 <HAL_RCC_OscConfig+0x4d4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d106      	bne.n	80014d4 <HAL_RCC_OscConfig+0x2f0>
 80014c6:	4b7d      	ldr	r3, [pc, #500]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80014c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ca:	4a7c      	ldr	r2, [pc, #496]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6713      	str	r3, [r2, #112]	; 0x70
 80014d2:	e01c      	b.n	800150e <HAL_RCC_OscConfig+0x32a>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b05      	cmp	r3, #5
 80014da:	d10c      	bne.n	80014f6 <HAL_RCC_OscConfig+0x312>
 80014dc:	4b77      	ldr	r3, [pc, #476]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	4a76      	ldr	r2, [pc, #472]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	6713      	str	r3, [r2, #112]	; 0x70
 80014e8:	4b74      	ldr	r3, [pc, #464]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	4a73      	ldr	r2, [pc, #460]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6713      	str	r3, [r2, #112]	; 0x70
 80014f4:	e00b      	b.n	800150e <HAL_RCC_OscConfig+0x32a>
 80014f6:	4b71      	ldr	r3, [pc, #452]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80014f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fa:	4a70      	ldr	r2, [pc, #448]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	6713      	str	r3, [r2, #112]	; 0x70
 8001502:	4b6e      	ldr	r3, [pc, #440]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 8001504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001506:	4a6d      	ldr	r2, [pc, #436]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 8001508:	f023 0304 	bic.w	r3, r3, #4
 800150c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d015      	beq.n	8001542 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001516:	f7ff fbb5 	bl	8000c84 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151c:	e00a      	b.n	8001534 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800151e:	f7ff fbb1 	bl	8000c84 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	f241 3288 	movw	r2, #5000	; 0x1388
 800152c:	4293      	cmp	r3, r2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e0bc      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001534:	4b61      	ldr	r3, [pc, #388]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 8001536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0ee      	beq.n	800151e <HAL_RCC_OscConfig+0x33a>
 8001540:	e014      	b.n	800156c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001542:	f7ff fb9f 	bl	8000c84 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001548:	e00a      	b.n	8001560 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154a:	f7ff fb9b 	bl	8000c84 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f241 3288 	movw	r2, #5000	; 0x1388
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e0a6      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001560:	4b56      	ldr	r3, [pc, #344]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1ee      	bne.n	800154a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800156c:	7dfb      	ldrb	r3, [r7, #23]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d105      	bne.n	800157e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001572:	4b52      	ldr	r3, [pc, #328]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a51      	ldr	r2, [pc, #324]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 8001578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 8092 	beq.w	80016ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001588:	4b4c      	ldr	r3, [pc, #304]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 030c 	and.w	r3, r3, #12
 8001590:	2b08      	cmp	r3, #8
 8001592:	d05c      	beq.n	800164e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d141      	bne.n	8001620 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159c:	4b48      	ldr	r3, [pc, #288]	; (80016c0 <HAL_RCC_OscConfig+0x4dc>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a2:	f7ff fb6f 	bl	8000c84 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015aa:	f7ff fb6b 	bl	8000c84 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e078      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015bc:	4b3f      	ldr	r3, [pc, #252]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f0      	bne.n	80015aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69da      	ldr	r2, [r3, #28]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	019b      	lsls	r3, r3, #6
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	085b      	lsrs	r3, r3, #1
 80015e0:	3b01      	subs	r3, #1
 80015e2:	041b      	lsls	r3, r3, #16
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	061b      	lsls	r3, r3, #24
 80015ec:	4933      	ldr	r1, [pc, #204]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f2:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <HAL_RCC_OscConfig+0x4dc>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fb44 	bl	8000c84 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001600:	f7ff fb40 	bl	8000c84 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e04d      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001612:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <HAL_RCC_OscConfig+0x41c>
 800161e:	e045      	b.n	80016ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001620:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <HAL_RCC_OscConfig+0x4dc>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff fb2d 	bl	8000c84 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162e:	f7ff fb29 	bl	8000c84 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e036      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f0      	bne.n	800162e <HAL_RCC_OscConfig+0x44a>
 800164c:	e02e      	b.n	80016ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e029      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	429a      	cmp	r2, r3
 800166c:	d11c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001678:	429a      	cmp	r2, r3
 800167a:	d115      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001682:	4013      	ands	r3, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001688:	4293      	cmp	r3, r2
 800168a:	d10d      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d106      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40007000 	.word	0x40007000
 80016bc:	40023800 	.word	0x40023800
 80016c0:	42470060 	.word	0x42470060

080016c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0cc      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d8:	4b68      	ldr	r3, [pc, #416]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d90c      	bls.n	8001700 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b65      	ldr	r3, [pc, #404]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ee:	4b63      	ldr	r3, [pc, #396]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0b8      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d020      	beq.n	800174e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001718:	4b59      	ldr	r3, [pc, #356]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4a58      	ldr	r2, [pc, #352]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001722:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001730:	4b53      	ldr	r3, [pc, #332]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	4a52      	ldr	r2, [pc, #328]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800173a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800173c:	4b50      	ldr	r3, [pc, #320]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	494d      	ldr	r1, [pc, #308]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	4313      	orrs	r3, r2
 800174c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d044      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	4b47      	ldr	r3, [pc, #284]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d119      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e07f      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d003      	beq.n	8001782 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177e:	2b03      	cmp	r3, #3
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001782:	4b3f      	ldr	r3, [pc, #252]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e06f      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001792:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e067      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a2:	4b37      	ldr	r3, [pc, #220]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f023 0203 	bic.w	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4934      	ldr	r1, [pc, #208]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b4:	f7ff fa66 	bl	8000c84 <HAL_GetTick>
 80017b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017bc:	f7ff fa62 	bl	8000c84 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e04f      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d2:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 020c 	and.w	r2, r3, #12
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d1eb      	bne.n	80017bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d20c      	bcs.n	800180c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e032      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4916      	ldr	r1, [pc, #88]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	4313      	orrs	r3, r2
 8001828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	490e      	ldr	r1, [pc, #56]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800184a:	f000 f821 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 800184e:	4601      	mov	r1, r0
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	5cd3      	ldrb	r3, [r2, r3]
 800185e:	fa21 f303 	lsr.w	r3, r1, r3
 8001862:	4a09      	ldr	r2, [pc, #36]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_RCC_ClockConfig+0x1c8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff f9c6 	bl	8000bfc <HAL_InitTick>

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00
 8001880:	40023800 	.word	0x40023800
 8001884:	08002de4 	.word	0x08002de4
 8001888:	20000000 	.word	0x20000000
 800188c:	20000004 	.word	0x20000004

08001890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	2300      	movs	r3, #0
 80018a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a6:	4b63      	ldr	r3, [pc, #396]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d007      	beq.n	80018c2 <HAL_RCC_GetSysClockFreq+0x32>
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d008      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x38>
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f040 80b4 	bne.w	8001a24 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018bc:	4b5e      	ldr	r3, [pc, #376]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018be:	60bb      	str	r3, [r7, #8]
       break;
 80018c0:	e0b3      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018c2:	4b5e      	ldr	r3, [pc, #376]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80018c4:	60bb      	str	r3, [r7, #8]
      break;
 80018c6:	e0b0      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018c8:	4b5a      	ldr	r3, [pc, #360]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d2:	4b58      	ldr	r3, [pc, #352]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d04a      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018de:	4b55      	ldr	r3, [pc, #340]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	099b      	lsrs	r3, r3, #6
 80018e4:	f04f 0400 	mov.w	r4, #0
 80018e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	ea03 0501 	and.w	r5, r3, r1
 80018f4:	ea04 0602 	and.w	r6, r4, r2
 80018f8:	4629      	mov	r1, r5
 80018fa:	4632      	mov	r2, r6
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	f04f 0400 	mov.w	r4, #0
 8001904:	0154      	lsls	r4, r2, #5
 8001906:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800190a:	014b      	lsls	r3, r1, #5
 800190c:	4619      	mov	r1, r3
 800190e:	4622      	mov	r2, r4
 8001910:	1b49      	subs	r1, r1, r5
 8001912:	eb62 0206 	sbc.w	r2, r2, r6
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	f04f 0400 	mov.w	r4, #0
 800191e:	0194      	lsls	r4, r2, #6
 8001920:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001924:	018b      	lsls	r3, r1, #6
 8001926:	1a5b      	subs	r3, r3, r1
 8001928:	eb64 0402 	sbc.w	r4, r4, r2
 800192c:	f04f 0100 	mov.w	r1, #0
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	00e2      	lsls	r2, r4, #3
 8001936:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800193a:	00d9      	lsls	r1, r3, #3
 800193c:	460b      	mov	r3, r1
 800193e:	4614      	mov	r4, r2
 8001940:	195b      	adds	r3, r3, r5
 8001942:	eb44 0406 	adc.w	r4, r4, r6
 8001946:	f04f 0100 	mov.w	r1, #0
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	0262      	lsls	r2, r4, #9
 8001950:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001954:	0259      	lsls	r1, r3, #9
 8001956:	460b      	mov	r3, r1
 8001958:	4614      	mov	r4, r2
 800195a:	4618      	mov	r0, r3
 800195c:	4621      	mov	r1, r4
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f04f 0400 	mov.w	r4, #0
 8001964:	461a      	mov	r2, r3
 8001966:	4623      	mov	r3, r4
 8001968:	f7fe fc34 	bl	80001d4 <__aeabi_uldivmod>
 800196c:	4603      	mov	r3, r0
 800196e:	460c      	mov	r4, r1
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e049      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001974:	4b2f      	ldr	r3, [pc, #188]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	099b      	lsrs	r3, r3, #6
 800197a:	f04f 0400 	mov.w	r4, #0
 800197e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	ea03 0501 	and.w	r5, r3, r1
 800198a:	ea04 0602 	and.w	r6, r4, r2
 800198e:	4629      	mov	r1, r5
 8001990:	4632      	mov	r2, r6
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	f04f 0400 	mov.w	r4, #0
 800199a:	0154      	lsls	r4, r2, #5
 800199c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019a0:	014b      	lsls	r3, r1, #5
 80019a2:	4619      	mov	r1, r3
 80019a4:	4622      	mov	r2, r4
 80019a6:	1b49      	subs	r1, r1, r5
 80019a8:	eb62 0206 	sbc.w	r2, r2, r6
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	f04f 0400 	mov.w	r4, #0
 80019b4:	0194      	lsls	r4, r2, #6
 80019b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019ba:	018b      	lsls	r3, r1, #6
 80019bc:	1a5b      	subs	r3, r3, r1
 80019be:	eb64 0402 	sbc.w	r4, r4, r2
 80019c2:	f04f 0100 	mov.w	r1, #0
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	00e2      	lsls	r2, r4, #3
 80019cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019d0:	00d9      	lsls	r1, r3, #3
 80019d2:	460b      	mov	r3, r1
 80019d4:	4614      	mov	r4, r2
 80019d6:	195b      	adds	r3, r3, r5
 80019d8:	eb44 0406 	adc.w	r4, r4, r6
 80019dc:	f04f 0100 	mov.w	r1, #0
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	02a2      	lsls	r2, r4, #10
 80019e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019ea:	0299      	lsls	r1, r3, #10
 80019ec:	460b      	mov	r3, r1
 80019ee:	4614      	mov	r4, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	4621      	mov	r1, r4
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f04f 0400 	mov.w	r4, #0
 80019fa:	461a      	mov	r2, r3
 80019fc:	4623      	mov	r3, r4
 80019fe:	f7fe fbe9 	bl	80001d4 <__aeabi_uldivmod>
 8001a02:	4603      	mov	r3, r0
 8001a04:	460c      	mov	r4, r1
 8001a06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	0c1b      	lsrs	r3, r3, #16
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	3301      	adds	r3, #1
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a20:	60bb      	str	r3, [r7, #8]
      break;
 8001a22:	e002      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a26:	60bb      	str	r3, [r7, #8]
      break;
 8001a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2a:	68bb      	ldr	r3, [r7, #8]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a34:	40023800 	.word	0x40023800
 8001a38:	00f42400 	.word	0x00f42400
 8001a3c:	007a1200 	.word	0x007a1200

08001a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000000 	.word	0x20000000

08001a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a5c:	f7ff fff0 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001a60:	4601      	mov	r1, r0
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	0a9b      	lsrs	r3, r3, #10
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	4a03      	ldr	r2, [pc, #12]	; (8001a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a6e:	5cd3      	ldrb	r3, [r2, r3]
 8001a70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	08002df4 	.word	0x08002df4

08001a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a84:	f7ff ffdc 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001a88:	4601      	mov	r1, r0
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	0b5b      	lsrs	r3, r3, #13
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	4a03      	ldr	r2, [pc, #12]	; (8001aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a96:	5cd3      	ldrb	r3, [r2, r3]
 8001a98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	08002df4 	.word	0x08002df4

08001aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e01d      	b.n	8001af6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d106      	bne.n	8001ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7fe ff60 	bl	8000994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	f000 f9ee 	bl	8001ec8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e01d      	b.n	8001b4c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d106      	bne.n	8001b2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f815 	bl	8001b54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	f000 f9c3 	bl	8001ec8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2201      	movs	r2, #1
 8001b78:	6839      	ldr	r1, [r7, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 fc4a 	bl	8002414 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a10      	ldr	r2, [pc, #64]	; (8001bc8 <HAL_TIM_PWM_Start+0x60>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d107      	bne.n	8001b9a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2b06      	cmp	r3, #6
 8001baa:	d007      	beq.n	8001bbc <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40010000 	.word	0x40010000

08001bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e0b4      	b.n	8001d50 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b0c      	cmp	r3, #12
 8001bfa:	f200 809f 	bhi.w	8001d3c <HAL_TIM_PWM_ConfigChannel+0x170>
 8001bfe:	a201      	add	r2, pc, #4	; (adr r2, 8001c04 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c04:	08001c39 	.word	0x08001c39
 8001c08:	08001d3d 	.word	0x08001d3d
 8001c0c:	08001d3d 	.word	0x08001d3d
 8001c10:	08001d3d 	.word	0x08001d3d
 8001c14:	08001c79 	.word	0x08001c79
 8001c18:	08001d3d 	.word	0x08001d3d
 8001c1c:	08001d3d 	.word	0x08001d3d
 8001c20:	08001d3d 	.word	0x08001d3d
 8001c24:	08001cbb 	.word	0x08001cbb
 8001c28:	08001d3d 	.word	0x08001d3d
 8001c2c:	08001d3d 	.word	0x08001d3d
 8001c30:	08001d3d 	.word	0x08001d3d
 8001c34:	08001cfb 	.word	0x08001cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f9c2 	bl	8001fc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699a      	ldr	r2, [r3, #24]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0208 	orr.w	r2, r2, #8
 8001c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	699a      	ldr	r2, [r3, #24]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0204 	bic.w	r2, r2, #4
 8001c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6999      	ldr	r1, [r3, #24]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	691a      	ldr	r2, [r3, #16]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	619a      	str	r2, [r3, #24]
      break;
 8001c76:	e062      	b.n	8001d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 fa08 	bl	8002094 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699a      	ldr	r2, [r3, #24]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699a      	ldr	r2, [r3, #24]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6999      	ldr	r1, [r3, #24]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	021a      	lsls	r2, r3, #8
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	619a      	str	r2, [r3, #24]
      break;
 8001cb8:	e041      	b.n	8001d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68b9      	ldr	r1, [r7, #8]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fa53 	bl	800216c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	69da      	ldr	r2, [r3, #28]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0208 	orr.w	r2, r2, #8
 8001cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	69da      	ldr	r2, [r3, #28]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0204 	bic.w	r2, r2, #4
 8001ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	69d9      	ldr	r1, [r3, #28]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	61da      	str	r2, [r3, #28]
      break;
 8001cf8:	e021      	b.n	8001d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68b9      	ldr	r1, [r7, #8]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 fa9d 	bl	8002240 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	69da      	ldr	r2, [r3, #28]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	69da      	ldr	r2, [r3, #28]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69d9      	ldr	r1, [r3, #28]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	021a      	lsls	r2, r3, #8
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	61da      	str	r2, [r3, #28]
      break;
 8001d3a:	e000      	b.n	8001d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001d3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_TIM_ConfigClockSource+0x18>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e0a6      	b.n	8001ebe <HAL_TIM_ConfigClockSource+0x166>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b40      	cmp	r3, #64	; 0x40
 8001da6:	d067      	beq.n	8001e78 <HAL_TIM_ConfigClockSource+0x120>
 8001da8:	2b40      	cmp	r3, #64	; 0x40
 8001daa:	d80b      	bhi.n	8001dc4 <HAL_TIM_ConfigClockSource+0x6c>
 8001dac:	2b10      	cmp	r3, #16
 8001dae:	d073      	beq.n	8001e98 <HAL_TIM_ConfigClockSource+0x140>
 8001db0:	2b10      	cmp	r3, #16
 8001db2:	d802      	bhi.n	8001dba <HAL_TIM_ConfigClockSource+0x62>
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d06f      	beq.n	8001e98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001db8:	e078      	b.n	8001eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001dba:	2b20      	cmp	r3, #32
 8001dbc:	d06c      	beq.n	8001e98 <HAL_TIM_ConfigClockSource+0x140>
 8001dbe:	2b30      	cmp	r3, #48	; 0x30
 8001dc0:	d06a      	beq.n	8001e98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001dc2:	e073      	b.n	8001eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001dc4:	2b70      	cmp	r3, #112	; 0x70
 8001dc6:	d00d      	beq.n	8001de4 <HAL_TIM_ConfigClockSource+0x8c>
 8001dc8:	2b70      	cmp	r3, #112	; 0x70
 8001dca:	d804      	bhi.n	8001dd6 <HAL_TIM_ConfigClockSource+0x7e>
 8001dcc:	2b50      	cmp	r3, #80	; 0x50
 8001dce:	d033      	beq.n	8001e38 <HAL_TIM_ConfigClockSource+0xe0>
 8001dd0:	2b60      	cmp	r3, #96	; 0x60
 8001dd2:	d041      	beq.n	8001e58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001dd4:	e06a      	b.n	8001eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dda:	d066      	beq.n	8001eaa <HAL_TIM_ConfigClockSource+0x152>
 8001ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001de0:	d017      	beq.n	8001e12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001de2:	e063      	b.n	8001eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6899      	ldr	r1, [r3, #8]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f000 faee 	bl	80023d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	609a      	str	r2, [r3, #8]
      break;
 8001e10:	e04c      	b.n	8001eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6818      	ldr	r0, [r3, #0]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6899      	ldr	r1, [r3, #8]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f000 fad7 	bl	80023d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e34:	609a      	str	r2, [r3, #8]
      break;
 8001e36:	e039      	b.n	8001eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	6859      	ldr	r1, [r3, #4]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	461a      	mov	r2, r3
 8001e46:	f000 fa4b 	bl	80022e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2150      	movs	r1, #80	; 0x50
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 faa4 	bl	800239e <TIM_ITRx_SetConfig>
      break;
 8001e56:	e029      	b.n	8001eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6859      	ldr	r1, [r3, #4]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	461a      	mov	r2, r3
 8001e66:	f000 fa6a 	bl	800233e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2160      	movs	r1, #96	; 0x60
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 fa94 	bl	800239e <TIM_ITRx_SetConfig>
      break;
 8001e76:	e019      	b.n	8001eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6859      	ldr	r1, [r3, #4]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	461a      	mov	r2, r3
 8001e86:	f000 fa2b 	bl	80022e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2140      	movs	r1, #64	; 0x40
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 fa84 	bl	800239e <TIM_ITRx_SetConfig>
      break;
 8001e96:	e009      	b.n	8001eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	f000 fa7b 	bl	800239e <TIM_ITRx_SetConfig>
      break;
 8001ea8:	e000      	b.n	8001eac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a34      	ldr	r2, [pc, #208]	; (8001fac <TIM_Base_SetConfig+0xe4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d00f      	beq.n	8001f00 <TIM_Base_SetConfig+0x38>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee6:	d00b      	beq.n	8001f00 <TIM_Base_SetConfig+0x38>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a31      	ldr	r2, [pc, #196]	; (8001fb0 <TIM_Base_SetConfig+0xe8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d007      	beq.n	8001f00 <TIM_Base_SetConfig+0x38>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a30      	ldr	r2, [pc, #192]	; (8001fb4 <TIM_Base_SetConfig+0xec>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d003      	beq.n	8001f00 <TIM_Base_SetConfig+0x38>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a2f      	ldr	r2, [pc, #188]	; (8001fb8 <TIM_Base_SetConfig+0xf0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d108      	bne.n	8001f12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a25      	ldr	r2, [pc, #148]	; (8001fac <TIM_Base_SetConfig+0xe4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d01b      	beq.n	8001f52 <TIM_Base_SetConfig+0x8a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f20:	d017      	beq.n	8001f52 <TIM_Base_SetConfig+0x8a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a22      	ldr	r2, [pc, #136]	; (8001fb0 <TIM_Base_SetConfig+0xe8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <TIM_Base_SetConfig+0x8a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a21      	ldr	r2, [pc, #132]	; (8001fb4 <TIM_Base_SetConfig+0xec>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00f      	beq.n	8001f52 <TIM_Base_SetConfig+0x8a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a20      	ldr	r2, [pc, #128]	; (8001fb8 <TIM_Base_SetConfig+0xf0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00b      	beq.n	8001f52 <TIM_Base_SetConfig+0x8a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a1f      	ldr	r2, [pc, #124]	; (8001fbc <TIM_Base_SetConfig+0xf4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d007      	beq.n	8001f52 <TIM_Base_SetConfig+0x8a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a1e      	ldr	r2, [pc, #120]	; (8001fc0 <TIM_Base_SetConfig+0xf8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d003      	beq.n	8001f52 <TIM_Base_SetConfig+0x8a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <TIM_Base_SetConfig+0xfc>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d108      	bne.n	8001f64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a08      	ldr	r2, [pc, #32]	; (8001fac <TIM_Base_SetConfig+0xe4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d103      	bne.n	8001f98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	615a      	str	r2, [r3, #20]
}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	40000800 	.word	0x40000800
 8001fb8:	40000c00 	.word	0x40000c00
 8001fbc:	40014000 	.word	0x40014000
 8001fc0:	40014400 	.word	0x40014400
 8001fc4:	40014800 	.word	0x40014800

08001fc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	f023 0201 	bic.w	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f023 0303 	bic.w	r3, r3, #3
 8001ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f023 0302 	bic.w	r3, r3, #2
 8002010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4313      	orrs	r3, r2
 800201a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a1c      	ldr	r2, [pc, #112]	; (8002090 <TIM_OC1_SetConfig+0xc8>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d10c      	bne.n	800203e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f023 0308 	bic.w	r3, r3, #8
 800202a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	4313      	orrs	r3, r2
 8002034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f023 0304 	bic.w	r3, r3, #4
 800203c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a13      	ldr	r2, [pc, #76]	; (8002090 <TIM_OC1_SetConfig+0xc8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d111      	bne.n	800206a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800204c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	621a      	str	r2, [r3, #32]
}
 8002084:	bf00      	nop
 8002086:	371c      	adds	r7, #28
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	40010000 	.word	0x40010000

08002094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002094:	b480      	push	{r7}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	f023 0210 	bic.w	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f023 0320 	bic.w	r3, r3, #32
 80020de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a1e      	ldr	r2, [pc, #120]	; (8002168 <TIM_OC2_SetConfig+0xd4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d10d      	bne.n	8002110 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800210e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a15      	ldr	r2, [pc, #84]	; (8002168 <TIM_OC2_SetConfig+0xd4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d113      	bne.n	8002140 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800211e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002126:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	621a      	str	r2, [r3, #32]
}
 800215a:	bf00      	nop
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40010000 	.word	0x40010000

0800216c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f023 0303 	bic.w	r3, r3, #3
 80021a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	4313      	orrs	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a1d      	ldr	r2, [pc, #116]	; (800223c <TIM_OC3_SetConfig+0xd0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d10d      	bne.n	80021e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	4313      	orrs	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <TIM_OC3_SetConfig+0xd0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d113      	bne.n	8002216 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	621a      	str	r2, [r3, #32]
}
 8002230:	bf00      	nop
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	40010000 	.word	0x40010000

08002240 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800226e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800228a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	031b      	lsls	r3, r3, #12
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a10      	ldr	r2, [pc, #64]	; (80022dc <TIM_OC4_SetConfig+0x9c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d109      	bne.n	80022b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	019b      	lsls	r3, r3, #6
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	621a      	str	r2, [r3, #32]
}
 80022ce:	bf00      	nop
 80022d0:	371c      	adds	r7, #28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40010000 	.word	0x40010000

080022e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	f023 0201 	bic.w	r2, r3, #1
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800230a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f023 030a 	bic.w	r3, r3, #10
 800231c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4313      	orrs	r3, r2
 8002324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	621a      	str	r2, [r3, #32]
}
 8002332:	bf00      	nop
 8002334:	371c      	adds	r7, #28
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800233e:	b480      	push	{r7}
 8002340:	b087      	sub	sp, #28
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	f023 0210 	bic.w	r2, r3, #16
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002368:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	031b      	lsls	r3, r3, #12
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800237a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	621a      	str	r2, [r3, #32]
}
 8002392:	bf00      	nop
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f043 0307 	orr.w	r3, r3, #7
 80023c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	609a      	str	r2, [r3, #8]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	021a      	lsls	r2, r3, #8
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	4313      	orrs	r3, r2
 8002400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	609a      	str	r2, [r3, #8]
}
 8002408:	bf00      	nop
 800240a:	371c      	adds	r7, #28
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	2201      	movs	r2, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a1a      	ldr	r2, [r3, #32]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	43db      	mvns	r3, r3
 8002436:	401a      	ands	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a1a      	ldr	r2, [r3, #32]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	fa01 f303 	lsl.w	r3, r1, r3
 800244c:	431a      	orrs	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	621a      	str	r2, [r3, #32]
}
 8002452:	bf00      	nop
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002474:	2302      	movs	r3, #2
 8002476:	e050      	b.n	800251a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1c      	ldr	r2, [pc, #112]	; (8002528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d018      	beq.n	80024ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c4:	d013      	beq.n	80024ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a18      	ldr	r2, [pc, #96]	; (800252c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00e      	beq.n	80024ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a16      	ldr	r2, [pc, #88]	; (8002530 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d009      	beq.n	80024ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a15      	ldr	r2, [pc, #84]	; (8002534 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d004      	beq.n	80024ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a13      	ldr	r2, [pc, #76]	; (8002538 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d10c      	bne.n	8002508 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40010000 	.word	0x40010000
 800252c:	40000400 	.word	0x40000400
 8002530:	40000800 	.word	0x40000800
 8002534:	40000c00 	.word	0x40000c00
 8002538:	40014000 	.word	0x40014000

0800253c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002554:	2302      	movs	r3, #2
 8002556:	e03d      	b.n	80025d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	4313      	orrs	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e03f      	b.n	8002672 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe fa20 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2224      	movs	r2, #36	; 0x24
 8002610:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002622:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f829 	bl	800267c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002638:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800267c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002680:	b085      	sub	sp, #20
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80026be:	f023 030c 	bic.w	r3, r3, #12
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	68f9      	ldr	r1, [r7, #12]
 80026c8:	430b      	orrs	r3, r1
 80026ca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ea:	f040 818b 	bne.w	8002a04 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4ac1      	ldr	r2, [pc, #772]	; (80029f8 <UART_SetConfig+0x37c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d005      	beq.n	8002704 <UART_SetConfig+0x88>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4abf      	ldr	r2, [pc, #764]	; (80029fc <UART_SetConfig+0x380>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	f040 80bd 	bne.w	800287e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002704:	f7ff f9bc 	bl	8001a80 <HAL_RCC_GetPCLK2Freq>
 8002708:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	461d      	mov	r5, r3
 800270e:	f04f 0600 	mov.w	r6, #0
 8002712:	46a8      	mov	r8, r5
 8002714:	46b1      	mov	r9, r6
 8002716:	eb18 0308 	adds.w	r3, r8, r8
 800271a:	eb49 0409 	adc.w	r4, r9, r9
 800271e:	4698      	mov	r8, r3
 8002720:	46a1      	mov	r9, r4
 8002722:	eb18 0805 	adds.w	r8, r8, r5
 8002726:	eb49 0906 	adc.w	r9, r9, r6
 800272a:	f04f 0100 	mov.w	r1, #0
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002736:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800273a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800273e:	4688      	mov	r8, r1
 8002740:	4691      	mov	r9, r2
 8002742:	eb18 0005 	adds.w	r0, r8, r5
 8002746:	eb49 0106 	adc.w	r1, r9, r6
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	461d      	mov	r5, r3
 8002750:	f04f 0600 	mov.w	r6, #0
 8002754:	196b      	adds	r3, r5, r5
 8002756:	eb46 0406 	adc.w	r4, r6, r6
 800275a:	461a      	mov	r2, r3
 800275c:	4623      	mov	r3, r4
 800275e:	f7fd fd39 	bl	80001d4 <__aeabi_uldivmod>
 8002762:	4603      	mov	r3, r0
 8002764:	460c      	mov	r4, r1
 8002766:	461a      	mov	r2, r3
 8002768:	4ba5      	ldr	r3, [pc, #660]	; (8002a00 <UART_SetConfig+0x384>)
 800276a:	fba3 2302 	umull	r2, r3, r3, r2
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	461d      	mov	r5, r3
 8002778:	f04f 0600 	mov.w	r6, #0
 800277c:	46a9      	mov	r9, r5
 800277e:	46b2      	mov	sl, r6
 8002780:	eb19 0309 	adds.w	r3, r9, r9
 8002784:	eb4a 040a 	adc.w	r4, sl, sl
 8002788:	4699      	mov	r9, r3
 800278a:	46a2      	mov	sl, r4
 800278c:	eb19 0905 	adds.w	r9, r9, r5
 8002790:	eb4a 0a06 	adc.w	sl, sl, r6
 8002794:	f04f 0100 	mov.w	r1, #0
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027a8:	4689      	mov	r9, r1
 80027aa:	4692      	mov	sl, r2
 80027ac:	eb19 0005 	adds.w	r0, r9, r5
 80027b0:	eb4a 0106 	adc.w	r1, sl, r6
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	461d      	mov	r5, r3
 80027ba:	f04f 0600 	mov.w	r6, #0
 80027be:	196b      	adds	r3, r5, r5
 80027c0:	eb46 0406 	adc.w	r4, r6, r6
 80027c4:	461a      	mov	r2, r3
 80027c6:	4623      	mov	r3, r4
 80027c8:	f7fd fd04 	bl	80001d4 <__aeabi_uldivmod>
 80027cc:	4603      	mov	r3, r0
 80027ce:	460c      	mov	r4, r1
 80027d0:	461a      	mov	r2, r3
 80027d2:	4b8b      	ldr	r3, [pc, #556]	; (8002a00 <UART_SetConfig+0x384>)
 80027d4:	fba3 1302 	umull	r1, r3, r3, r2
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	2164      	movs	r1, #100	; 0x64
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	3332      	adds	r3, #50	; 0x32
 80027e6:	4a86      	ldr	r2, [pc, #536]	; (8002a00 <UART_SetConfig+0x384>)
 80027e8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ec:	095b      	lsrs	r3, r3, #5
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027f4:	4498      	add	r8, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	461d      	mov	r5, r3
 80027fa:	f04f 0600 	mov.w	r6, #0
 80027fe:	46a9      	mov	r9, r5
 8002800:	46b2      	mov	sl, r6
 8002802:	eb19 0309 	adds.w	r3, r9, r9
 8002806:	eb4a 040a 	adc.w	r4, sl, sl
 800280a:	4699      	mov	r9, r3
 800280c:	46a2      	mov	sl, r4
 800280e:	eb19 0905 	adds.w	r9, r9, r5
 8002812:	eb4a 0a06 	adc.w	sl, sl, r6
 8002816:	f04f 0100 	mov.w	r1, #0
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002822:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002826:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800282a:	4689      	mov	r9, r1
 800282c:	4692      	mov	sl, r2
 800282e:	eb19 0005 	adds.w	r0, r9, r5
 8002832:	eb4a 0106 	adc.w	r1, sl, r6
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	461d      	mov	r5, r3
 800283c:	f04f 0600 	mov.w	r6, #0
 8002840:	196b      	adds	r3, r5, r5
 8002842:	eb46 0406 	adc.w	r4, r6, r6
 8002846:	461a      	mov	r2, r3
 8002848:	4623      	mov	r3, r4
 800284a:	f7fd fcc3 	bl	80001d4 <__aeabi_uldivmod>
 800284e:	4603      	mov	r3, r0
 8002850:	460c      	mov	r4, r1
 8002852:	461a      	mov	r2, r3
 8002854:	4b6a      	ldr	r3, [pc, #424]	; (8002a00 <UART_SetConfig+0x384>)
 8002856:	fba3 1302 	umull	r1, r3, r3, r2
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	2164      	movs	r1, #100	; 0x64
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	3332      	adds	r3, #50	; 0x32
 8002868:	4a65      	ldr	r2, [pc, #404]	; (8002a00 <UART_SetConfig+0x384>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	f003 0207 	and.w	r2, r3, #7
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4442      	add	r2, r8
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	e26f      	b.n	8002d5e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800287e:	f7ff f8eb 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 8002882:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	461d      	mov	r5, r3
 8002888:	f04f 0600 	mov.w	r6, #0
 800288c:	46a8      	mov	r8, r5
 800288e:	46b1      	mov	r9, r6
 8002890:	eb18 0308 	adds.w	r3, r8, r8
 8002894:	eb49 0409 	adc.w	r4, r9, r9
 8002898:	4698      	mov	r8, r3
 800289a:	46a1      	mov	r9, r4
 800289c:	eb18 0805 	adds.w	r8, r8, r5
 80028a0:	eb49 0906 	adc.w	r9, r9, r6
 80028a4:	f04f 0100 	mov.w	r1, #0
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028b8:	4688      	mov	r8, r1
 80028ba:	4691      	mov	r9, r2
 80028bc:	eb18 0005 	adds.w	r0, r8, r5
 80028c0:	eb49 0106 	adc.w	r1, r9, r6
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	461d      	mov	r5, r3
 80028ca:	f04f 0600 	mov.w	r6, #0
 80028ce:	196b      	adds	r3, r5, r5
 80028d0:	eb46 0406 	adc.w	r4, r6, r6
 80028d4:	461a      	mov	r2, r3
 80028d6:	4623      	mov	r3, r4
 80028d8:	f7fd fc7c 	bl	80001d4 <__aeabi_uldivmod>
 80028dc:	4603      	mov	r3, r0
 80028de:	460c      	mov	r4, r1
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <UART_SetConfig+0x384>)
 80028e4:	fba3 2302 	umull	r2, r3, r3, r2
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	461d      	mov	r5, r3
 80028f2:	f04f 0600 	mov.w	r6, #0
 80028f6:	46a9      	mov	r9, r5
 80028f8:	46b2      	mov	sl, r6
 80028fa:	eb19 0309 	adds.w	r3, r9, r9
 80028fe:	eb4a 040a 	adc.w	r4, sl, sl
 8002902:	4699      	mov	r9, r3
 8002904:	46a2      	mov	sl, r4
 8002906:	eb19 0905 	adds.w	r9, r9, r5
 800290a:	eb4a 0a06 	adc.w	sl, sl, r6
 800290e:	f04f 0100 	mov.w	r1, #0
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800291a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800291e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002922:	4689      	mov	r9, r1
 8002924:	4692      	mov	sl, r2
 8002926:	eb19 0005 	adds.w	r0, r9, r5
 800292a:	eb4a 0106 	adc.w	r1, sl, r6
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	461d      	mov	r5, r3
 8002934:	f04f 0600 	mov.w	r6, #0
 8002938:	196b      	adds	r3, r5, r5
 800293a:	eb46 0406 	adc.w	r4, r6, r6
 800293e:	461a      	mov	r2, r3
 8002940:	4623      	mov	r3, r4
 8002942:	f7fd fc47 	bl	80001d4 <__aeabi_uldivmod>
 8002946:	4603      	mov	r3, r0
 8002948:	460c      	mov	r4, r1
 800294a:	461a      	mov	r2, r3
 800294c:	4b2c      	ldr	r3, [pc, #176]	; (8002a00 <UART_SetConfig+0x384>)
 800294e:	fba3 1302 	umull	r1, r3, r3, r2
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	2164      	movs	r1, #100	; 0x64
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	3332      	adds	r3, #50	; 0x32
 8002960:	4a27      	ldr	r2, [pc, #156]	; (8002a00 <UART_SetConfig+0x384>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800296e:	4498      	add	r8, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	461d      	mov	r5, r3
 8002974:	f04f 0600 	mov.w	r6, #0
 8002978:	46a9      	mov	r9, r5
 800297a:	46b2      	mov	sl, r6
 800297c:	eb19 0309 	adds.w	r3, r9, r9
 8002980:	eb4a 040a 	adc.w	r4, sl, sl
 8002984:	4699      	mov	r9, r3
 8002986:	46a2      	mov	sl, r4
 8002988:	eb19 0905 	adds.w	r9, r9, r5
 800298c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002990:	f04f 0100 	mov.w	r1, #0
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800299c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029a4:	4689      	mov	r9, r1
 80029a6:	4692      	mov	sl, r2
 80029a8:	eb19 0005 	adds.w	r0, r9, r5
 80029ac:	eb4a 0106 	adc.w	r1, sl, r6
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	461d      	mov	r5, r3
 80029b6:	f04f 0600 	mov.w	r6, #0
 80029ba:	196b      	adds	r3, r5, r5
 80029bc:	eb46 0406 	adc.w	r4, r6, r6
 80029c0:	461a      	mov	r2, r3
 80029c2:	4623      	mov	r3, r4
 80029c4:	f7fd fc06 	bl	80001d4 <__aeabi_uldivmod>
 80029c8:	4603      	mov	r3, r0
 80029ca:	460c      	mov	r4, r1
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <UART_SetConfig+0x384>)
 80029d0:	fba3 1302 	umull	r1, r3, r3, r2
 80029d4:	095b      	lsrs	r3, r3, #5
 80029d6:	2164      	movs	r1, #100	; 0x64
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	3332      	adds	r3, #50	; 0x32
 80029e2:	4a07      	ldr	r2, [pc, #28]	; (8002a00 <UART_SetConfig+0x384>)
 80029e4:	fba2 2303 	umull	r2, r3, r2, r3
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	f003 0207 	and.w	r2, r3, #7
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4442      	add	r2, r8
 80029f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80029f6:	e1b2      	b.n	8002d5e <UART_SetConfig+0x6e2>
 80029f8:	40011000 	.word	0x40011000
 80029fc:	40011400 	.word	0x40011400
 8002a00:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4ad7      	ldr	r2, [pc, #860]	; (8002d68 <UART_SetConfig+0x6ec>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d005      	beq.n	8002a1a <UART_SetConfig+0x39e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4ad6      	ldr	r2, [pc, #856]	; (8002d6c <UART_SetConfig+0x6f0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	f040 80d1 	bne.w	8002bbc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a1a:	f7ff f831 	bl	8001a80 <HAL_RCC_GetPCLK2Freq>
 8002a1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	469a      	mov	sl, r3
 8002a24:	f04f 0b00 	mov.w	fp, #0
 8002a28:	46d0      	mov	r8, sl
 8002a2a:	46d9      	mov	r9, fp
 8002a2c:	eb18 0308 	adds.w	r3, r8, r8
 8002a30:	eb49 0409 	adc.w	r4, r9, r9
 8002a34:	4698      	mov	r8, r3
 8002a36:	46a1      	mov	r9, r4
 8002a38:	eb18 080a 	adds.w	r8, r8, sl
 8002a3c:	eb49 090b 	adc.w	r9, r9, fp
 8002a40:	f04f 0100 	mov.w	r1, #0
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a54:	4688      	mov	r8, r1
 8002a56:	4691      	mov	r9, r2
 8002a58:	eb1a 0508 	adds.w	r5, sl, r8
 8002a5c:	eb4b 0609 	adc.w	r6, fp, r9
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4619      	mov	r1, r3
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	f04f 0400 	mov.w	r4, #0
 8002a72:	0094      	lsls	r4, r2, #2
 8002a74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a78:	008b      	lsls	r3, r1, #2
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	4623      	mov	r3, r4
 8002a7e:	4628      	mov	r0, r5
 8002a80:	4631      	mov	r1, r6
 8002a82:	f7fd fba7 	bl	80001d4 <__aeabi_uldivmod>
 8002a86:	4603      	mov	r3, r0
 8002a88:	460c      	mov	r4, r1
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4bb8      	ldr	r3, [pc, #736]	; (8002d70 <UART_SetConfig+0x6f4>)
 8002a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	469b      	mov	fp, r3
 8002a9c:	f04f 0c00 	mov.w	ip, #0
 8002aa0:	46d9      	mov	r9, fp
 8002aa2:	46e2      	mov	sl, ip
 8002aa4:	eb19 0309 	adds.w	r3, r9, r9
 8002aa8:	eb4a 040a 	adc.w	r4, sl, sl
 8002aac:	4699      	mov	r9, r3
 8002aae:	46a2      	mov	sl, r4
 8002ab0:	eb19 090b 	adds.w	r9, r9, fp
 8002ab4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ab8:	f04f 0100 	mov.w	r1, #0
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ac4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ac8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002acc:	4689      	mov	r9, r1
 8002ace:	4692      	mov	sl, r2
 8002ad0:	eb1b 0509 	adds.w	r5, fp, r9
 8002ad4:	eb4c 060a 	adc.w	r6, ip, sl
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4619      	mov	r1, r3
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	f04f 0400 	mov.w	r4, #0
 8002aea:	0094      	lsls	r4, r2, #2
 8002aec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002af0:	008b      	lsls	r3, r1, #2
 8002af2:	461a      	mov	r2, r3
 8002af4:	4623      	mov	r3, r4
 8002af6:	4628      	mov	r0, r5
 8002af8:	4631      	mov	r1, r6
 8002afa:	f7fd fb6b 	bl	80001d4 <__aeabi_uldivmod>
 8002afe:	4603      	mov	r3, r0
 8002b00:	460c      	mov	r4, r1
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b9a      	ldr	r3, [pc, #616]	; (8002d70 <UART_SetConfig+0x6f4>)
 8002b06:	fba3 1302 	umull	r1, r3, r3, r2
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	2164      	movs	r1, #100	; 0x64
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	3332      	adds	r3, #50	; 0x32
 8002b18:	4a95      	ldr	r2, [pc, #596]	; (8002d70 <UART_SetConfig+0x6f4>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b24:	4498      	add	r8, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	469b      	mov	fp, r3
 8002b2a:	f04f 0c00 	mov.w	ip, #0
 8002b2e:	46d9      	mov	r9, fp
 8002b30:	46e2      	mov	sl, ip
 8002b32:	eb19 0309 	adds.w	r3, r9, r9
 8002b36:	eb4a 040a 	adc.w	r4, sl, sl
 8002b3a:	4699      	mov	r9, r3
 8002b3c:	46a2      	mov	sl, r4
 8002b3e:	eb19 090b 	adds.w	r9, r9, fp
 8002b42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b46:	f04f 0100 	mov.w	r1, #0
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b5a:	4689      	mov	r9, r1
 8002b5c:	4692      	mov	sl, r2
 8002b5e:	eb1b 0509 	adds.w	r5, fp, r9
 8002b62:	eb4c 060a 	adc.w	r6, ip, sl
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	f04f 0400 	mov.w	r4, #0
 8002b78:	0094      	lsls	r4, r2, #2
 8002b7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b7e:	008b      	lsls	r3, r1, #2
 8002b80:	461a      	mov	r2, r3
 8002b82:	4623      	mov	r3, r4
 8002b84:	4628      	mov	r0, r5
 8002b86:	4631      	mov	r1, r6
 8002b88:	f7fd fb24 	bl	80001d4 <__aeabi_uldivmod>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	460c      	mov	r4, r1
 8002b90:	461a      	mov	r2, r3
 8002b92:	4b77      	ldr	r3, [pc, #476]	; (8002d70 <UART_SetConfig+0x6f4>)
 8002b94:	fba3 1302 	umull	r1, r3, r3, r2
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	2164      	movs	r1, #100	; 0x64
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	3332      	adds	r3, #50	; 0x32
 8002ba6:	4a72      	ldr	r2, [pc, #456]	; (8002d70 <UART_SetConfig+0x6f4>)
 8002ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bac:	095b      	lsrs	r3, r3, #5
 8002bae:	f003 020f 	and.w	r2, r3, #15
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4442      	add	r2, r8
 8002bb8:	609a      	str	r2, [r3, #8]
 8002bba:	e0d0      	b.n	8002d5e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bbc:	f7fe ff4c 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 8002bc0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	469a      	mov	sl, r3
 8002bc6:	f04f 0b00 	mov.w	fp, #0
 8002bca:	46d0      	mov	r8, sl
 8002bcc:	46d9      	mov	r9, fp
 8002bce:	eb18 0308 	adds.w	r3, r8, r8
 8002bd2:	eb49 0409 	adc.w	r4, r9, r9
 8002bd6:	4698      	mov	r8, r3
 8002bd8:	46a1      	mov	r9, r4
 8002bda:	eb18 080a 	adds.w	r8, r8, sl
 8002bde:	eb49 090b 	adc.w	r9, r9, fp
 8002be2:	f04f 0100 	mov.w	r1, #0
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002bee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002bf2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002bf6:	4688      	mov	r8, r1
 8002bf8:	4691      	mov	r9, r2
 8002bfa:	eb1a 0508 	adds.w	r5, sl, r8
 8002bfe:	eb4b 0609 	adc.w	r6, fp, r9
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4619      	mov	r1, r3
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	f04f 0400 	mov.w	r4, #0
 8002c14:	0094      	lsls	r4, r2, #2
 8002c16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c1a:	008b      	lsls	r3, r1, #2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4623      	mov	r3, r4
 8002c20:	4628      	mov	r0, r5
 8002c22:	4631      	mov	r1, r6
 8002c24:	f7fd fad6 	bl	80001d4 <__aeabi_uldivmod>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	460c      	mov	r4, r1
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b50      	ldr	r3, [pc, #320]	; (8002d70 <UART_SetConfig+0x6f4>)
 8002c30:	fba3 2302 	umull	r2, r3, r3, r2
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	469b      	mov	fp, r3
 8002c3e:	f04f 0c00 	mov.w	ip, #0
 8002c42:	46d9      	mov	r9, fp
 8002c44:	46e2      	mov	sl, ip
 8002c46:	eb19 0309 	adds.w	r3, r9, r9
 8002c4a:	eb4a 040a 	adc.w	r4, sl, sl
 8002c4e:	4699      	mov	r9, r3
 8002c50:	46a2      	mov	sl, r4
 8002c52:	eb19 090b 	adds.w	r9, r9, fp
 8002c56:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c5a:	f04f 0100 	mov.w	r1, #0
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c6e:	4689      	mov	r9, r1
 8002c70:	4692      	mov	sl, r2
 8002c72:	eb1b 0509 	adds.w	r5, fp, r9
 8002c76:	eb4c 060a 	adc.w	r6, ip, sl
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	f04f 0400 	mov.w	r4, #0
 8002c8c:	0094      	lsls	r4, r2, #2
 8002c8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c92:	008b      	lsls	r3, r1, #2
 8002c94:	461a      	mov	r2, r3
 8002c96:	4623      	mov	r3, r4
 8002c98:	4628      	mov	r0, r5
 8002c9a:	4631      	mov	r1, r6
 8002c9c:	f7fd fa9a 	bl	80001d4 <__aeabi_uldivmod>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	460c      	mov	r4, r1
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4b32      	ldr	r3, [pc, #200]	; (8002d70 <UART_SetConfig+0x6f4>)
 8002ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	2164      	movs	r1, #100	; 0x64
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	3332      	adds	r3, #50	; 0x32
 8002cba:	4a2d      	ldr	r2, [pc, #180]	; (8002d70 <UART_SetConfig+0x6f4>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc6:	4498      	add	r8, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	469b      	mov	fp, r3
 8002ccc:	f04f 0c00 	mov.w	ip, #0
 8002cd0:	46d9      	mov	r9, fp
 8002cd2:	46e2      	mov	sl, ip
 8002cd4:	eb19 0309 	adds.w	r3, r9, r9
 8002cd8:	eb4a 040a 	adc.w	r4, sl, sl
 8002cdc:	4699      	mov	r9, r3
 8002cde:	46a2      	mov	sl, r4
 8002ce0:	eb19 090b 	adds.w	r9, r9, fp
 8002ce4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ce8:	f04f 0100 	mov.w	r1, #0
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cfc:	4689      	mov	r9, r1
 8002cfe:	4692      	mov	sl, r2
 8002d00:	eb1b 0509 	adds.w	r5, fp, r9
 8002d04:	eb4c 060a 	adc.w	r6, ip, sl
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	f04f 0400 	mov.w	r4, #0
 8002d1a:	0094      	lsls	r4, r2, #2
 8002d1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d20:	008b      	lsls	r3, r1, #2
 8002d22:	461a      	mov	r2, r3
 8002d24:	4623      	mov	r3, r4
 8002d26:	4628      	mov	r0, r5
 8002d28:	4631      	mov	r1, r6
 8002d2a:	f7fd fa53 	bl	80001d4 <__aeabi_uldivmod>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	460c      	mov	r4, r1
 8002d32:	461a      	mov	r2, r3
 8002d34:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <UART_SetConfig+0x6f4>)
 8002d36:	fba3 1302 	umull	r1, r3, r3, r2
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	2164      	movs	r1, #100	; 0x64
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	3332      	adds	r3, #50	; 0x32
 8002d48:	4a09      	ldr	r2, [pc, #36]	; (8002d70 <UART_SetConfig+0x6f4>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	f003 020f 	and.w	r2, r3, #15
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4442      	add	r2, r8
 8002d5a:	609a      	str	r2, [r3, #8]
}
 8002d5c:	e7ff      	b.n	8002d5e <UART_SetConfig+0x6e2>
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d68:	40011000 	.word	0x40011000
 8002d6c:	40011400 	.word	0x40011400
 8002d70:	51eb851f 	.word	0x51eb851f

08002d74 <__libc_init_array>:
 8002d74:	b570      	push	{r4, r5, r6, lr}
 8002d76:	4e0d      	ldr	r6, [pc, #52]	; (8002dac <__libc_init_array+0x38>)
 8002d78:	4c0d      	ldr	r4, [pc, #52]	; (8002db0 <__libc_init_array+0x3c>)
 8002d7a:	1ba4      	subs	r4, r4, r6
 8002d7c:	10a4      	asrs	r4, r4, #2
 8002d7e:	2500      	movs	r5, #0
 8002d80:	42a5      	cmp	r5, r4
 8002d82:	d109      	bne.n	8002d98 <__libc_init_array+0x24>
 8002d84:	4e0b      	ldr	r6, [pc, #44]	; (8002db4 <__libc_init_array+0x40>)
 8002d86:	4c0c      	ldr	r4, [pc, #48]	; (8002db8 <__libc_init_array+0x44>)
 8002d88:	f000 f820 	bl	8002dcc <_init>
 8002d8c:	1ba4      	subs	r4, r4, r6
 8002d8e:	10a4      	asrs	r4, r4, #2
 8002d90:	2500      	movs	r5, #0
 8002d92:	42a5      	cmp	r5, r4
 8002d94:	d105      	bne.n	8002da2 <__libc_init_array+0x2e>
 8002d96:	bd70      	pop	{r4, r5, r6, pc}
 8002d98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d9c:	4798      	blx	r3
 8002d9e:	3501      	adds	r5, #1
 8002da0:	e7ee      	b.n	8002d80 <__libc_init_array+0xc>
 8002da2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002da6:	4798      	blx	r3
 8002da8:	3501      	adds	r5, #1
 8002daa:	e7f2      	b.n	8002d92 <__libc_init_array+0x1e>
 8002dac:	08002e04 	.word	0x08002e04
 8002db0:	08002e04 	.word	0x08002e04
 8002db4:	08002e04 	.word	0x08002e04
 8002db8:	08002e08 	.word	0x08002e08

08002dbc <memset>:
 8002dbc:	4402      	add	r2, r0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d100      	bne.n	8002dc6 <memset+0xa>
 8002dc4:	4770      	bx	lr
 8002dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dca:	e7f9      	b.n	8002dc0 <memset+0x4>

08002dcc <_init>:
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dce:	bf00      	nop
 8002dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dd2:	bc08      	pop	{r3}
 8002dd4:	469e      	mov	lr, r3
 8002dd6:	4770      	bx	lr

08002dd8 <_fini>:
 8002dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dda:	bf00      	nop
 8002ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dde:	bc08      	pop	{r3}
 8002de0:	469e      	mov	lr, r3
 8002de2:	4770      	bx	lr
