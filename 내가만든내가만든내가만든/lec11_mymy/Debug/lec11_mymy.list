
lec11_mymy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002860  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a0c  08002a0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a0c  08002a0c  00012a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a14  08002a14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a14  08002a14  00012a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a18  08002a18  00012a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08002a28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002a28  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092f6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015b7  00000000  00000000  00029332  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000af8  00000000  00000000  0002a8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a40  00000000  00000000  0002b3e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015224  00000000  00000000  0002be28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000763e  00000000  00000000  0004104c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087732  00000000  00000000  0004868a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cfdbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e2c  00000000  00000000  000cfe38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080029dc 	.word	0x080029dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080029dc 	.word	0x080029dc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fb4e 	bl	8000b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f82c 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f924 	bl	800072c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f8f8 	bl	80006d8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004e8:	f000 f892 	bl	8000610 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(INB_TIM, IN1B_CH);
 80004ec:	2100      	movs	r1, #0
 80004ee:	4810      	ldr	r0, [pc, #64]	; (8000530 <main+0x5c>)
 80004f0:	f001 fae6 	bl	8001ac0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(INB_TIM, IN2B_CH);                // PWM START
 80004f4:	2104      	movs	r1, #4
 80004f6:	480e      	ldr	r0, [pc, #56]	; (8000530 <main+0x5c>)
 80004f8:	f001 fae2 	bl	8001ac0 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(INB_TIM, IN1B_CH, 0);         // IN1B RESET
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <main+0x5c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2200      	movs	r2, #0
 8000502:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(INB_TIM, IN2B_CH, 0);         // IN2B RESET
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <main+0x5c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2200      	movs	r2, #0
 800050a:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_GPIO_WritePin(ENB_PORT, ENB_PIN, GPIO_PIN_SET); // ENABLE SET
 800050c:	2201      	movs	r2, #1
 800050e:	2102      	movs	r1, #2
 8000510:	4808      	ldr	r0, [pc, #32]	; (8000534 <main+0x60>)
 8000512:	f000 fe2d 	bl	8001170 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Speed_Up_Down(INB_TIM, IN1B_CH, 128); //Forward, Speed => 0~255
 8000516:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800051a:	2100      	movs	r1, #0
 800051c:	4804      	ldr	r0, [pc, #16]	; (8000530 <main+0x5c>)
 800051e:	f000 f987 	bl	8000830 <Speed_Up_Down>
	  Speed_Up_Down(INB_TIM, IN2B_CH, 255); //Reverse, Speed => 0~255
 8000522:	f04f 32ff 	mov.w	r2, #4294967295
 8000526:	2104      	movs	r1, #4
 8000528:	4801      	ldr	r0, [pc, #4]	; (8000530 <main+0x5c>)
 800052a:	f000 f981 	bl	8000830 <Speed_Up_Down>
	  Speed_Up_Down(INB_TIM, IN1B_CH, 128); //Forward, Speed => 0~255
 800052e:	e7f2      	b.n	8000516 <main+0x42>
 8000530:	20000028 	.word	0x20000028
 8000534:	40020800 	.word	0x40020800

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f002 fa40 	bl	80029cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	4b29      	ldr	r3, [pc, #164]	; (8000608 <SystemClock_Config+0xd0>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a28      	ldr	r2, [pc, #160]	; (8000608 <SystemClock_Config+0xd0>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b26      	ldr	r3, [pc, #152]	; (8000608 <SystemClock_Config+0xd0>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b23      	ldr	r3, [pc, #140]	; (800060c <SystemClock_Config+0xd4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <SystemClock_Config+0xd4>)
 8000586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SystemClock_Config+0xd4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a0:	2310      	movs	r3, #16
 80005a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2302      	movs	r3, #2
 80005a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a8:	2300      	movs	r3, #0
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005ac:	2310      	movs	r3, #16
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005b6:	2304      	movs	r3, #4
 80005b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ba:	2307      	movs	r3, #7
 80005bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fdee 	bl	80011a4 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ce:	f000 f995 	bl	80008fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2302      	movs	r3, #2
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2102      	movs	r1, #2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 f848 	bl	8001684 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005fa:	f000 f97f 	bl	80008fc <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3750      	adds	r7, #80	; 0x50
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]
 800062e:	615a      	str	r2, [r3, #20]
 8000630:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <MX_TIM2_Init+0xc4>)
 8000634:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000638:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <MX_TIM2_Init+0xc4>)
 800063c:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000640:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000642:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <MX_TIM2_Init+0xc4>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_TIM2_Init+0xc4>)
 800064a:	22ff      	movs	r2, #255	; 0xff
 800064c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064e:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <MX_TIM2_Init+0xc4>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <MX_TIM2_Init+0xc4>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800065a:	481e      	ldr	r0, [pc, #120]	; (80006d4 <MX_TIM2_Init+0xc4>)
 800065c:	f001 fa04 	bl	8001a68 <HAL_TIM_PWM_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000666:	f000 f949 	bl	80008fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	4619      	mov	r1, r3
 8000678:	4816      	ldr	r0, [pc, #88]	; (80006d4 <MX_TIM2_Init+0xc4>)
 800067a:	f001 fd4b 	bl	8002114 <HAL_TIMEx_MasterConfigSynchronization>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000684:	f000 f93a 	bl	80008fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000688:	2360      	movs	r3, #96	; 0x60
 800068a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2200      	movs	r2, #0
 800069c:	4619      	mov	r1, r3
 800069e:	480d      	ldr	r0, [pc, #52]	; (80006d4 <MX_TIM2_Init+0xc4>)
 80006a0:	f001 fa40 	bl	8001b24 <HAL_TIM_PWM_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80006aa:	f000 f927 	bl	80008fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2204      	movs	r2, #4
 80006b2:	4619      	mov	r1, r3
 80006b4:	4807      	ldr	r0, [pc, #28]	; (80006d4 <MX_TIM2_Init+0xc4>)
 80006b6:	f001 fa35 	bl	8001b24 <HAL_TIM_PWM_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80006c0:	f000 f91c 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <MX_TIM2_Init+0xc4>)
 80006c6:	f000 f969 	bl	800099c <HAL_TIM_MspPostInit>

}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	; 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000028 	.word	0x20000028

080006d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_USART2_UART_Init+0x50>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 8000710:	f001 fd6e 	bl	80021f0 <HAL_UART_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071a:	f000 f8ef 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000068 	.word	0x20000068
 8000728:	40004400 	.word	0x40004400

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b36      	ldr	r3, [pc, #216]	; (8000820 <MX_GPIO_Init+0xf4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a35      	ldr	r2, [pc, #212]	; (8000820 <MX_GPIO_Init+0xf4>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b33      	ldr	r3, [pc, #204]	; (8000820 <MX_GPIO_Init+0xf4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b2f      	ldr	r3, [pc, #188]	; (8000820 <MX_GPIO_Init+0xf4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a2e      	ldr	r2, [pc, #184]	; (8000820 <MX_GPIO_Init+0xf4>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <MX_GPIO_Init+0xf4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b28      	ldr	r3, [pc, #160]	; (8000820 <MX_GPIO_Init+0xf4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a27      	ldr	r2, [pc, #156]	; (8000820 <MX_GPIO_Init+0xf4>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b25      	ldr	r3, [pc, #148]	; (8000820 <MX_GPIO_Init+0xf4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b21      	ldr	r3, [pc, #132]	; (8000820 <MX_GPIO_Init+0xf4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a20      	ldr	r2, [pc, #128]	; (8000820 <MX_GPIO_Init+0xf4>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <MX_GPIO_Init+0xf4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2102      	movs	r1, #2
 80007b6:	481b      	ldr	r0, [pc, #108]	; (8000824 <MX_GPIO_Init+0xf8>)
 80007b8:	f000 fcda 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2120      	movs	r1, #32
 80007c0:	4819      	ldr	r0, [pc, #100]	; (8000828 <MX_GPIO_Init+0xfc>)
 80007c2:	f000 fcd5 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_GPIO_Init+0x100>)
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4812      	ldr	r0, [pc, #72]	; (8000824 <MX_GPIO_Init+0xf8>)
 80007dc:	f000 fb46 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007e0:	2302      	movs	r3, #2
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <MX_GPIO_Init+0xf8>)
 80007f8:	f000 fb38 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007fc:	2320      	movs	r3, #32
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_GPIO_Init+0xfc>)
 8000814:	f000 fb2a 	bl	8000e6c <HAL_GPIO_Init>

}
 8000818:	bf00      	nop
 800081a:	3728      	adds	r7, #40	; 0x28
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	40020800 	.word	0x40020800
 8000828:	40020000 	.word	0x40020000
 800082c:	10210000 	.word	0x10210000

08000830 <Speed_Up_Down>:

/* USER CODE BEGIN 4 */
void Speed_Up_Down(TIM_HandleTypeDef *htim, uint32_t Channel, int8_t speed){
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	4613      	mov	r3, r2
 800083c:	71fb      	strb	r3, [r7, #7]

	for(int i = 0; i <= speed; i++){
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	e021      	b.n	8000888 <Speed_Up_Down+0x58>
		__HAL_TIM_SET_COMPARE(htim, Channel, i);
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d104      	bne.n	8000854 <Speed_Up_Down+0x24>
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	697a      	ldr	r2, [r7, #20]
 8000850:	635a      	str	r2, [r3, #52]	; 0x34
 8000852:	e013      	b.n	800087c <Speed_Up_Down+0x4c>
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	2b04      	cmp	r3, #4
 8000858:	d104      	bne.n	8000864 <Speed_Up_Down+0x34>
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	639a      	str	r2, [r3, #56]	; 0x38
 8000862:	e00b      	b.n	800087c <Speed_Up_Down+0x4c>
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	2b08      	cmp	r3, #8
 8000868:	d104      	bne.n	8000874 <Speed_Up_Down+0x44>
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	697a      	ldr	r2, [r7, #20]
 8000870:	63da      	str	r2, [r3, #60]	; 0x3c
 8000872:	e003      	b.n	800087c <Speed_Up_Down+0x4c>
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(100);
 800087c:	2064      	movs	r0, #100	; 0x64
 800087e:	f000 f9ed 	bl	8000c5c <HAL_Delay>
	for(int i = 0; i <= speed; i++){
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	3301      	adds	r3, #1
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	429a      	cmp	r2, r3
 8000890:	ddd8      	ble.n	8000844 <Speed_Up_Down+0x14>
	}
	HAL_Delay(1000);
 8000892:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000896:	f000 f9e1 	bl	8000c5c <HAL_Delay>

	for(int i = speed; i >= 0; i--){
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	e021      	b.n	80008e6 <Speed_Up_Down+0xb6>
		__HAL_TIM_SET_COMPARE(htim, Channel, i);
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d104      	bne.n	80008b2 <Speed_Up_Down+0x82>
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	635a      	str	r2, [r3, #52]	; 0x34
 80008b0:	e013      	b.n	80008da <Speed_Up_Down+0xaa>
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	2b04      	cmp	r3, #4
 80008b6:	d104      	bne.n	80008c2 <Speed_Up_Down+0x92>
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	639a      	str	r2, [r3, #56]	; 0x38
 80008c0:	e00b      	b.n	80008da <Speed_Up_Down+0xaa>
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	2b08      	cmp	r3, #8
 80008c6:	d104      	bne.n	80008d2 <Speed_Up_Down+0xa2>
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80008d0:	e003      	b.n	80008da <Speed_Up_Down+0xaa>
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(100);
 80008da:	2064      	movs	r0, #100	; 0x64
 80008dc:	f000 f9be 	bl	8000c5c <HAL_Delay>
	for(int i = speed; i >= 0; i--){
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	dada      	bge.n	80008a2 <Speed_Up_Down+0x72>
	}
	HAL_Delay(1000);
 80008ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f0:	f000 f9b4 	bl	8000c5c <HAL_Delay>
}
 80008f4:	bf00      	nop
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <HAL_MspInit+0x4c>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <HAL_MspInit+0x4c>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <HAL_MspInit+0x4c>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_MspInit+0x4c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800094a:	2007      	movs	r0, #7
 800094c:	f000 fa5a 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800096c:	d10d      	bne.n	800098a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_TIM_PWM_MspInit+0x3c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_TIM_PWM_MspInit+0x3c>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_TIM_PWM_MspInit+0x3c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009bc:	d11d      	bne.n	80009fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <HAL_TIM_MspPostInit+0x68>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <HAL_TIM_MspPostInit+0x68>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <HAL_TIM_MspPostInit+0x68>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009da:	2303      	movs	r3, #3
 80009dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	4619      	mov	r1, r3
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <HAL_TIM_MspPostInit+0x6c>)
 80009f6:	f000 fa39 	bl	8000e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009fa:	bf00      	nop
 80009fc:	3720      	adds	r7, #32
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000

08000a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <HAL_UART_MspInit+0x84>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d12b      	bne.n	8000a86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a66:	230c      	movs	r3, #12
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a76:	2307      	movs	r3, #7
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <HAL_UART_MspInit+0x8c>)
 8000a82:	f000 f9f3 	bl	8000e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 f894 	bl	8000c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <SystemInit+0x28>)
 8000afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b02:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <SystemInit+0x28>)
 8000b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <SystemInit+0x28>)
 8000b0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b12:	609a      	str	r2, [r3, #8]
#endif
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b2a:	e003      	b.n	8000b34 <LoopCopyDataInit>

08000b2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b32:	3104      	adds	r1, #4

08000b34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b34:	480b      	ldr	r0, [pc, #44]	; (8000b64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b3c:	d3f6      	bcc.n	8000b2c <CopyDataInit>
  ldr  r2, =_sbss
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b40:	e002      	b.n	8000b48 <LoopFillZerobss>

08000b42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b44:	f842 3b04 	str.w	r3, [r2], #4

08000b48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b4c:	d3f9      	bcc.n	8000b42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b4e:	f7ff ffd3 	bl	8000af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b52:	f001 ff17 	bl	8002984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b56:	f7ff fcbd 	bl	80004d4 <main>
  bx  lr    
 8000b5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b5c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000b60:	08002a1c 	.word	0x08002a1c
  ldr  r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b68:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000b6c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000b70:	200000ac 	.word	0x200000ac

08000b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC_IRQHandler>
	...

08000b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_Init+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0d      	ldr	r2, [pc, #52]	; (8000bb8 <HAL_Init+0x40>)
 8000b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <HAL_Init+0x40>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <HAL_Init+0x40>)
 8000b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <HAL_Init+0x40>)
 8000b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f000 f92f 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f000 f808 	bl	8000bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bac:	f7ff feae 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023c00 	.word	0x40023c00

08000bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_InitTick+0x54>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_InitTick+0x58>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f939 	bl	8000e52 <HAL_SYSTICK_Config>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00e      	b.n	8000c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	d80a      	bhi.n	8000c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	f000 f90f 	bl	8000e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bfc:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <HAL_InitTick+0x5c>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c02:	2300      	movs	r3, #0
 8000c04:	e000      	b.n	8000c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000000 	.word	0x20000000
 8000c14:	20000008 	.word	0x20000008
 8000c18:	20000004 	.word	0x20000004

08000c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x20>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x24>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_IncTick+0x24>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	200000a8 	.word	0x200000a8

08000c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <HAL_GetTick+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	200000a8 	.word	0x200000a8

08000c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c64:	f7ff ffee 	bl	8000c44 <HAL_GetTick>
 8000c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c74:	d005      	beq.n	8000c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_Delay+0x40>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c82:	bf00      	nop
 8000c84:	f7ff ffde 	bl	8000c44 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d8f7      	bhi.n	8000c84 <HAL_Delay+0x28>
  {
  }
}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000008 	.word	0x20000008

08000ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <__NVIC_GetPriorityGrouping+0x18>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	f003 0307 	and.w	r3, r3, #7
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	; (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	; (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	; 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f7ff ff8e 	bl	8000d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff47 	bl	8000ca0 <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff5c 	bl	8000ce8 <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff8e 	bl	8000d58 <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5d 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ffb0 	bl	8000dc0 <SysTick_Config>
 8000e60:	4603      	mov	r3, r0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
 8000e86:	e159      	b.n	800113c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e88:	2201      	movs	r2, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	f040 8148 	bne.w	8001136 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d00b      	beq.n	8000ec6 <HAL_GPIO_Init+0x5a>
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d007      	beq.n	8000ec6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eba:	2b11      	cmp	r3, #17
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b12      	cmp	r3, #18
 8000ec4:	d130      	bne.n	8000f28 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	68da      	ldr	r2, [r3, #12]
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000efc:	2201      	movs	r2, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	091b      	lsrs	r3, r3, #4
 8000f12:	f003 0201 	and.w	r2, r3, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0xfc>
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b12      	cmp	r3, #18
 8000f66:	d123      	bne.n	8000fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	08da      	lsrs	r2, r3, #3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3208      	adds	r2, #8
 8000f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	220f      	movs	r2, #15
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	691a      	ldr	r2, [r3, #16]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3208      	adds	r2, #8
 8000faa:	69b9      	ldr	r1, [r7, #24]
 8000fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0203 	and.w	r2, r3, #3
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 80a2 	beq.w	8001136 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b56      	ldr	r3, [pc, #344]	; (8001150 <HAL_GPIO_Init+0x2e4>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a55      	ldr	r2, [pc, #340]	; (8001150 <HAL_GPIO_Init+0x2e4>)
 8000ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b53      	ldr	r3, [pc, #332]	; (8001150 <HAL_GPIO_Init+0x2e4>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800100e:	4a51      	ldr	r2, [pc, #324]	; (8001154 <HAL_GPIO_Init+0x2e8>)
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	3302      	adds	r3, #2
 8001016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	220f      	movs	r2, #15
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a48      	ldr	r2, [pc, #288]	; (8001158 <HAL_GPIO_Init+0x2ec>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d019      	beq.n	800106e <HAL_GPIO_Init+0x202>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a47      	ldr	r2, [pc, #284]	; (800115c <HAL_GPIO_Init+0x2f0>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d013      	beq.n	800106a <HAL_GPIO_Init+0x1fe>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a46      	ldr	r2, [pc, #280]	; (8001160 <HAL_GPIO_Init+0x2f4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d00d      	beq.n	8001066 <HAL_GPIO_Init+0x1fa>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a45      	ldr	r2, [pc, #276]	; (8001164 <HAL_GPIO_Init+0x2f8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d007      	beq.n	8001062 <HAL_GPIO_Init+0x1f6>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a44      	ldr	r2, [pc, #272]	; (8001168 <HAL_GPIO_Init+0x2fc>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d101      	bne.n	800105e <HAL_GPIO_Init+0x1f2>
 800105a:	2304      	movs	r3, #4
 800105c:	e008      	b.n	8001070 <HAL_GPIO_Init+0x204>
 800105e:	2307      	movs	r3, #7
 8001060:	e006      	b.n	8001070 <HAL_GPIO_Init+0x204>
 8001062:	2303      	movs	r3, #3
 8001064:	e004      	b.n	8001070 <HAL_GPIO_Init+0x204>
 8001066:	2302      	movs	r3, #2
 8001068:	e002      	b.n	8001070 <HAL_GPIO_Init+0x204>
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <HAL_GPIO_Init+0x204>
 800106e:	2300      	movs	r3, #0
 8001070:	69fa      	ldr	r2, [r7, #28]
 8001072:	f002 0203 	and.w	r2, r2, #3
 8001076:	0092      	lsls	r2, r2, #2
 8001078:	4093      	lsls	r3, r2
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001080:	4934      	ldr	r1, [pc, #208]	; (8001154 <HAL_GPIO_Init+0x2e8>)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800108e:	4b37      	ldr	r3, [pc, #220]	; (800116c <HAL_GPIO_Init+0x300>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b2:	4a2e      	ldr	r2, [pc, #184]	; (800116c <HAL_GPIO_Init+0x300>)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010b8:	4b2c      	ldr	r3, [pc, #176]	; (800116c <HAL_GPIO_Init+0x300>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010dc:	4a23      	ldr	r2, [pc, #140]	; (800116c <HAL_GPIO_Init+0x300>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e2:	4b22      	ldr	r3, [pc, #136]	; (800116c <HAL_GPIO_Init+0x300>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001106:	4a19      	ldr	r2, [pc, #100]	; (800116c <HAL_GPIO_Init+0x300>)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_GPIO_Init+0x300>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001130:	4a0e      	ldr	r2, [pc, #56]	; (800116c <HAL_GPIO_Init+0x300>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3301      	adds	r3, #1
 800113a:	61fb      	str	r3, [r7, #28]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	2b0f      	cmp	r3, #15
 8001140:	f67f aea2 	bls.w	8000e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001144:	bf00      	nop
 8001146:	3724      	adds	r7, #36	; 0x24
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	40023800 	.word	0x40023800
 8001154:	40013800 	.word	0x40013800
 8001158:	40020000 	.word	0x40020000
 800115c:	40020400 	.word	0x40020400
 8001160:	40020800 	.word	0x40020800
 8001164:	40020c00 	.word	0x40020c00
 8001168:	40021000 	.word	0x40021000
 800116c:	40013c00 	.word	0x40013c00

08001170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
 800117c:	4613      	mov	r3, r2
 800117e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800118c:	e003      	b.n	8001196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800118e:	887b      	ldrh	r3, [r7, #2]
 8001190:	041a      	lsls	r2, r3, #16
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	619a      	str	r2, [r3, #24]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e25b      	b.n	800166e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d075      	beq.n	80012ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011c2:	4ba3      	ldr	r3, [pc, #652]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	d00c      	beq.n	80011e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ce:	4ba0      	ldr	r3, [pc, #640]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d112      	bne.n	8001200 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011da:	4b9d      	ldr	r3, [pc, #628]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011e6:	d10b      	bne.n	8001200 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e8:	4b99      	ldr	r3, [pc, #612]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d05b      	beq.n	80012ac <HAL_RCC_OscConfig+0x108>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d157      	bne.n	80012ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e236      	b.n	800166e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001208:	d106      	bne.n	8001218 <HAL_RCC_OscConfig+0x74>
 800120a:	4b91      	ldr	r3, [pc, #580]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a90      	ldr	r2, [pc, #576]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e01d      	b.n	8001254 <HAL_RCC_OscConfig+0xb0>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0x98>
 8001222:	4b8b      	ldr	r3, [pc, #556]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a8a      	ldr	r2, [pc, #552]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b88      	ldr	r3, [pc, #544]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a87      	ldr	r2, [pc, #540]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e00b      	b.n	8001254 <HAL_RCC_OscConfig+0xb0>
 800123c:	4b84      	ldr	r3, [pc, #528]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a83      	ldr	r2, [pc, #524]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b81      	ldr	r3, [pc, #516]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a80      	ldr	r2, [pc, #512]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 800124e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d013      	beq.n	8001284 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff fcf2 	bl	8000c44 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff fcee 	bl	8000c44 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	; 0x64
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e1fb      	b.n	800166e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001276:	4b76      	ldr	r3, [pc, #472]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0xc0>
 8001282:	e014      	b.n	80012ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7ff fcde 	bl	8000c44 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fcda 	bl	8000c44 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	; 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e1e7      	b.n	800166e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129e:	4b6c      	ldr	r3, [pc, #432]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0xe8>
 80012aa:	e000      	b.n	80012ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d063      	beq.n	8001382 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ba:	4b65      	ldr	r3, [pc, #404]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00b      	beq.n	80012de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012c6:	4b62      	ldr	r3, [pc, #392]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d11c      	bne.n	800130c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012d2:	4b5f      	ldr	r3, [pc, #380]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d116      	bne.n	800130c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012de:	4b5c      	ldr	r3, [pc, #368]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <HAL_RCC_OscConfig+0x152>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d001      	beq.n	80012f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e1bb      	b.n	800166e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f6:	4b56      	ldr	r3, [pc, #344]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	4952      	ldr	r1, [pc, #328]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130a:	e03a      	b.n	8001382 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d020      	beq.n	8001356 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001314:	4b4f      	ldr	r3, [pc, #316]	; (8001454 <HAL_RCC_OscConfig+0x2b0>)
 8001316:	2201      	movs	r2, #1
 8001318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131a:	f7ff fc93 	bl	8000c44 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001322:	f7ff fc8f 	bl	8000c44 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e19c      	b.n	800166e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001334:	4b46      	ldr	r3, [pc, #280]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001340:	4b43      	ldr	r3, [pc, #268]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4940      	ldr	r1, [pc, #256]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	4313      	orrs	r3, r2
 8001352:	600b      	str	r3, [r1, #0]
 8001354:	e015      	b.n	8001382 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001356:	4b3f      	ldr	r3, [pc, #252]	; (8001454 <HAL_RCC_OscConfig+0x2b0>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135c:	f7ff fc72 	bl	8000c44 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001364:	f7ff fc6e 	bl	8000c44 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e17b      	b.n	800166e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001376:	4b36      	ldr	r3, [pc, #216]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	d030      	beq.n	80013f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d016      	beq.n	80013c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001396:	4b30      	ldr	r3, [pc, #192]	; (8001458 <HAL_RCC_OscConfig+0x2b4>)
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139c:	f7ff fc52 	bl	8000c44 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a4:	f7ff fc4e 	bl	8000c44 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e15b      	b.n	800166e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0x200>
 80013c2:	e015      	b.n	80013f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <HAL_RCC_OscConfig+0x2b4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ca:	f7ff fc3b 	bl	8000c44 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d2:	f7ff fc37 	bl	8000c44 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e144      	b.n	800166e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e4:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80013e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f0      	bne.n	80013d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 80a0 	beq.w	800153e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10f      	bne.n	800142e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800142a:	2301      	movs	r3, #1
 800142c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_RCC_OscConfig+0x2b8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001436:	2b00      	cmp	r3, #0
 8001438:	d121      	bne.n	800147e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_RCC_OscConfig+0x2b8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a07      	ldr	r2, [pc, #28]	; (800145c <HAL_RCC_OscConfig+0x2b8>)
 8001440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001446:	f7ff fbfd 	bl	8000c44 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144c:	e011      	b.n	8001472 <HAL_RCC_OscConfig+0x2ce>
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	42470000 	.word	0x42470000
 8001458:	42470e80 	.word	0x42470e80
 800145c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001460:	f7ff fbf0 	bl	8000c44 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e0fd      	b.n	800166e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001472:	4b81      	ldr	r3, [pc, #516]	; (8001678 <HAL_RCC_OscConfig+0x4d4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d106      	bne.n	8001494 <HAL_RCC_OscConfig+0x2f0>
 8001486:	4b7d      	ldr	r3, [pc, #500]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 8001488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148a:	4a7c      	ldr	r2, [pc, #496]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6713      	str	r3, [r2, #112]	; 0x70
 8001492:	e01c      	b.n	80014ce <HAL_RCC_OscConfig+0x32a>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b05      	cmp	r3, #5
 800149a:	d10c      	bne.n	80014b6 <HAL_RCC_OscConfig+0x312>
 800149c:	4b77      	ldr	r3, [pc, #476]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 800149e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a0:	4a76      	ldr	r2, [pc, #472]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	6713      	str	r3, [r2, #112]	; 0x70
 80014a8:	4b74      	ldr	r3, [pc, #464]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 80014aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ac:	4a73      	ldr	r2, [pc, #460]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6713      	str	r3, [r2, #112]	; 0x70
 80014b4:	e00b      	b.n	80014ce <HAL_RCC_OscConfig+0x32a>
 80014b6:	4b71      	ldr	r3, [pc, #452]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ba:	4a70      	ldr	r2, [pc, #448]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 80014bc:	f023 0301 	bic.w	r3, r3, #1
 80014c0:	6713      	str	r3, [r2, #112]	; 0x70
 80014c2:	4b6e      	ldr	r3, [pc, #440]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 80014c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c6:	4a6d      	ldr	r2, [pc, #436]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 80014c8:	f023 0304 	bic.w	r3, r3, #4
 80014cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d015      	beq.n	8001502 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d6:	f7ff fbb5 	bl	8000c44 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014de:	f7ff fbb1 	bl	8000c44 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e0bc      	b.n	800166e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f4:	4b61      	ldr	r3, [pc, #388]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0ee      	beq.n	80014de <HAL_RCC_OscConfig+0x33a>
 8001500:	e014      	b.n	800152c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff fb9f 	bl	8000c44 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff fb9b 	bl	8000c44 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f241 3288 	movw	r2, #5000	; 0x1388
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e0a6      	b.n	800166e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001520:	4b56      	ldr	r3, [pc, #344]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ee      	bne.n	800150a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d105      	bne.n	800153e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001532:	4b52      	ldr	r3, [pc, #328]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a51      	ldr	r2, [pc, #324]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 8001538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 8092 	beq.w	800166c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001548:	4b4c      	ldr	r3, [pc, #304]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b08      	cmp	r3, #8
 8001552:	d05c      	beq.n	800160e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d141      	bne.n	80015e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155c:	4b48      	ldr	r3, [pc, #288]	; (8001680 <HAL_RCC_OscConfig+0x4dc>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff fb6f 	bl	8000c44 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800156a:	f7ff fb6b 	bl	8000c44 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e078      	b.n	800166e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157c:	4b3f      	ldr	r3, [pc, #252]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f0      	bne.n	800156a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69da      	ldr	r2, [r3, #28]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	019b      	lsls	r3, r3, #6
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159e:	085b      	lsrs	r3, r3, #1
 80015a0:	3b01      	subs	r3, #1
 80015a2:	041b      	lsls	r3, r3, #16
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015aa:	061b      	lsls	r3, r3, #24
 80015ac:	4933      	ldr	r1, [pc, #204]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <HAL_RCC_OscConfig+0x4dc>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fb44 	bl	8000c44 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff fb40 	bl	8000c44 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e04d      	b.n	800166e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0x41c>
 80015de:	e045      	b.n	800166c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e0:	4b27      	ldr	r3, [pc, #156]	; (8001680 <HAL_RCC_OscConfig+0x4dc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fb2d 	bl	8000c44 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ee:	f7ff fb29 	bl	8000c44 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e036      	b.n	800166e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001600:	4b1e      	ldr	r3, [pc, #120]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f0      	bne.n	80015ee <HAL_RCC_OscConfig+0x44a>
 800160c:	e02e      	b.n	800166c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d101      	bne.n	800161a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e029      	b.n	800166e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_RCC_OscConfig+0x4d8>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	429a      	cmp	r2, r3
 800162c:	d11c      	bne.n	8001668 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001638:	429a      	cmp	r2, r3
 800163a:	d115      	bne.n	8001668 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001642:	4013      	ands	r3, r2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001648:	4293      	cmp	r3, r2
 800164a:	d10d      	bne.n	8001668 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001656:	429a      	cmp	r2, r3
 8001658:	d106      	bne.n	8001668 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40007000 	.word	0x40007000
 800167c:	40023800 	.word	0x40023800
 8001680:	42470060 	.word	0x42470060

08001684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e0cc      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001698:	4b68      	ldr	r3, [pc, #416]	; (800183c <HAL_RCC_ClockConfig+0x1b8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d90c      	bls.n	80016c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	4b65      	ldr	r3, [pc, #404]	; (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ae:	4b63      	ldr	r3, [pc, #396]	; (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0b8      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d020      	beq.n	800170e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d8:	4b59      	ldr	r3, [pc, #356]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	4a58      	ldr	r2, [pc, #352]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f0:	4b53      	ldr	r3, [pc, #332]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	4a52      	ldr	r2, [pc, #328]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016fc:	4b50      	ldr	r3, [pc, #320]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	494d      	ldr	r1, [pc, #308]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d044      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001722:	4b47      	ldr	r3, [pc, #284]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d119      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e07f      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d003      	beq.n	8001742 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800173e:	2b03      	cmp	r3, #3
 8001740:	d107      	bne.n	8001752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001742:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d109      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e06f      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001752:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e067      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001762:	4b37      	ldr	r3, [pc, #220]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f023 0203 	bic.w	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4934      	ldr	r1, [pc, #208]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	4313      	orrs	r3, r2
 8001772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001774:	f7ff fa66 	bl	8000c44 <HAL_GetTick>
 8001778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177a:	e00a      	b.n	8001792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177c:	f7ff fa62 	bl	8000c44 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	; 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e04f      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001792:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 020c 	and.w	r2, r3, #12
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d1eb      	bne.n	800177c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017a4:	4b25      	ldr	r3, [pc, #148]	; (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 030f 	and.w	r3, r3, #15
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d20c      	bcs.n	80017cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b2:	4b22      	ldr	r3, [pc, #136]	; (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ba:	4b20      	ldr	r3, [pc, #128]	; (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e032      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d008      	beq.n	80017ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d8:	4b19      	ldr	r3, [pc, #100]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	4916      	ldr	r1, [pc, #88]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d009      	beq.n	800180a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	490e      	ldr	r1, [pc, #56]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800180a:	f000 f821 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 800180e:	4601      	mov	r1, r0
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	5cd3      	ldrb	r3, [r2, r3]
 800181e:	fa21 f303 	lsr.w	r3, r1, r3
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_RCC_ClockConfig+0x1c8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff f9c6 	bl	8000bbc <HAL_InitTick>

  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023c00 	.word	0x40023c00
 8001840:	40023800 	.word	0x40023800
 8001844:	080029f4 	.word	0x080029f4
 8001848:	20000000 	.word	0x20000000
 800184c:	20000004 	.word	0x20000004

08001850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	2300      	movs	r3, #0
 8001860:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001866:	4b63      	ldr	r3, [pc, #396]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b04      	cmp	r3, #4
 8001870:	d007      	beq.n	8001882 <HAL_RCC_GetSysClockFreq+0x32>
 8001872:	2b08      	cmp	r3, #8
 8001874:	d008      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0x38>
 8001876:	2b00      	cmp	r3, #0
 8001878:	f040 80b4 	bne.w	80019e4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800187c:	4b5e      	ldr	r3, [pc, #376]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800187e:	60bb      	str	r3, [r7, #8]
       break;
 8001880:	e0b3      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001882:	4b5e      	ldr	r3, [pc, #376]	; (80019fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001884:	60bb      	str	r3, [r7, #8]
      break;
 8001886:	e0b0      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001888:	4b5a      	ldr	r3, [pc, #360]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001890:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001892:	4b58      	ldr	r3, [pc, #352]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d04a      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189e:	4b55      	ldr	r3, [pc, #340]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	099b      	lsrs	r3, r3, #6
 80018a4:	f04f 0400 	mov.w	r4, #0
 80018a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	ea03 0501 	and.w	r5, r3, r1
 80018b4:	ea04 0602 	and.w	r6, r4, r2
 80018b8:	4629      	mov	r1, r5
 80018ba:	4632      	mov	r2, r6
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	f04f 0400 	mov.w	r4, #0
 80018c4:	0154      	lsls	r4, r2, #5
 80018c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018ca:	014b      	lsls	r3, r1, #5
 80018cc:	4619      	mov	r1, r3
 80018ce:	4622      	mov	r2, r4
 80018d0:	1b49      	subs	r1, r1, r5
 80018d2:	eb62 0206 	sbc.w	r2, r2, r6
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	f04f 0400 	mov.w	r4, #0
 80018de:	0194      	lsls	r4, r2, #6
 80018e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018e4:	018b      	lsls	r3, r1, #6
 80018e6:	1a5b      	subs	r3, r3, r1
 80018e8:	eb64 0402 	sbc.w	r4, r4, r2
 80018ec:	f04f 0100 	mov.w	r1, #0
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	00e2      	lsls	r2, r4, #3
 80018f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018fa:	00d9      	lsls	r1, r3, #3
 80018fc:	460b      	mov	r3, r1
 80018fe:	4614      	mov	r4, r2
 8001900:	195b      	adds	r3, r3, r5
 8001902:	eb44 0406 	adc.w	r4, r4, r6
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	0262      	lsls	r2, r4, #9
 8001910:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001914:	0259      	lsls	r1, r3, #9
 8001916:	460b      	mov	r3, r1
 8001918:	4614      	mov	r4, r2
 800191a:	4618      	mov	r0, r3
 800191c:	4621      	mov	r1, r4
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f04f 0400 	mov.w	r4, #0
 8001924:	461a      	mov	r2, r3
 8001926:	4623      	mov	r3, r4
 8001928:	f7fe fc54 	bl	80001d4 <__aeabi_uldivmod>
 800192c:	4603      	mov	r3, r0
 800192e:	460c      	mov	r4, r1
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	e049      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001934:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	099b      	lsrs	r3, r3, #6
 800193a:	f04f 0400 	mov.w	r4, #0
 800193e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	ea03 0501 	and.w	r5, r3, r1
 800194a:	ea04 0602 	and.w	r6, r4, r2
 800194e:	4629      	mov	r1, r5
 8001950:	4632      	mov	r2, r6
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	f04f 0400 	mov.w	r4, #0
 800195a:	0154      	lsls	r4, r2, #5
 800195c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001960:	014b      	lsls	r3, r1, #5
 8001962:	4619      	mov	r1, r3
 8001964:	4622      	mov	r2, r4
 8001966:	1b49      	subs	r1, r1, r5
 8001968:	eb62 0206 	sbc.w	r2, r2, r6
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	f04f 0400 	mov.w	r4, #0
 8001974:	0194      	lsls	r4, r2, #6
 8001976:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800197a:	018b      	lsls	r3, r1, #6
 800197c:	1a5b      	subs	r3, r3, r1
 800197e:	eb64 0402 	sbc.w	r4, r4, r2
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	00e2      	lsls	r2, r4, #3
 800198c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001990:	00d9      	lsls	r1, r3, #3
 8001992:	460b      	mov	r3, r1
 8001994:	4614      	mov	r4, r2
 8001996:	195b      	adds	r3, r3, r5
 8001998:	eb44 0406 	adc.w	r4, r4, r6
 800199c:	f04f 0100 	mov.w	r1, #0
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	02a2      	lsls	r2, r4, #10
 80019a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019aa:	0299      	lsls	r1, r3, #10
 80019ac:	460b      	mov	r3, r1
 80019ae:	4614      	mov	r4, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	4621      	mov	r1, r4
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f04f 0400 	mov.w	r4, #0
 80019ba:	461a      	mov	r2, r3
 80019bc:	4623      	mov	r3, r4
 80019be:	f7fe fc09 	bl	80001d4 <__aeabi_uldivmod>
 80019c2:	4603      	mov	r3, r0
 80019c4:	460c      	mov	r4, r1
 80019c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	0c1b      	lsrs	r3, r3, #16
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	3301      	adds	r3, #1
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e0:	60bb      	str	r3, [r7, #8]
      break;
 80019e2:	e002      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019e6:	60bb      	str	r3, [r7, #8]
      break;
 80019e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ea:	68bb      	ldr	r3, [r7, #8]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f4:	40023800 	.word	0x40023800
 80019f8:	00f42400 	.word	0x00f42400
 80019fc:	007a1200 	.word	0x007a1200

08001a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000000 	.word	0x20000000

08001a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a1c:	f7ff fff0 	bl	8001a00 <HAL_RCC_GetHCLKFreq>
 8001a20:	4601      	mov	r1, r0
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	0a9b      	lsrs	r3, r3, #10
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	4a03      	ldr	r2, [pc, #12]	; (8001a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a2e:	5cd3      	ldrb	r3, [r2, r3]
 8001a30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	08002a04 	.word	0x08002a04

08001a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a44:	f7ff ffdc 	bl	8001a00 <HAL_RCC_GetHCLKFreq>
 8001a48:	4601      	mov	r1, r0
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	0b5b      	lsrs	r3, r3, #13
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4a03      	ldr	r2, [pc, #12]	; (8001a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a56:	5cd3      	ldrb	r3, [r2, r3]
 8001a58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40023800 	.word	0x40023800
 8001a64:	08002a04 	.word	0x08002a04

08001a68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e01d      	b.n	8001ab6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d106      	bne.n	8001a94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7fe ff64 	bl	800095c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	f000 f902 	bl	8001cb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	6839      	ldr	r1, [r7, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 faf8 	bl	80020c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a10      	ldr	r2, [pc, #64]	; (8001b20 <HAL_TIM_PWM_Start+0x60>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d107      	bne.n	8001af2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b06      	cmp	r3, #6
 8001b02:	d007      	beq.n	8001b14 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40010000 	.word	0x40010000

08001b24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e0b4      	b.n	8001ca8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b0c      	cmp	r3, #12
 8001b52:	f200 809f 	bhi.w	8001c94 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001b56:	a201      	add	r2, pc, #4	; (adr r2, 8001b5c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5c:	08001b91 	.word	0x08001b91
 8001b60:	08001c95 	.word	0x08001c95
 8001b64:	08001c95 	.word	0x08001c95
 8001b68:	08001c95 	.word	0x08001c95
 8001b6c:	08001bd1 	.word	0x08001bd1
 8001b70:	08001c95 	.word	0x08001c95
 8001b74:	08001c95 	.word	0x08001c95
 8001b78:	08001c95 	.word	0x08001c95
 8001b7c:	08001c13 	.word	0x08001c13
 8001b80:	08001c95 	.word	0x08001c95
 8001b84:	08001c95 	.word	0x08001c95
 8001b88:	08001c95 	.word	0x08001c95
 8001b8c:	08001c53 	.word	0x08001c53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f90a 	bl	8001db0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699a      	ldr	r2, [r3, #24]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0208 	orr.w	r2, r2, #8
 8001baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	699a      	ldr	r2, [r3, #24]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0204 	bic.w	r2, r2, #4
 8001bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6999      	ldr	r1, [r3, #24]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	691a      	ldr	r2, [r3, #16]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	619a      	str	r2, [r3, #24]
      break;
 8001bce:	e062      	b.n	8001c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 f950 	bl	8001e7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699a      	ldr	r2, [r3, #24]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6999      	ldr	r1, [r3, #24]
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	021a      	lsls	r2, r3, #8
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	619a      	str	r2, [r3, #24]
      break;
 8001c10:	e041      	b.n	8001c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68b9      	ldr	r1, [r7, #8]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 f99b 	bl	8001f54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	69da      	ldr	r2, [r3, #28]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0208 	orr.w	r2, r2, #8
 8001c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	69da      	ldr	r2, [r3, #28]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0204 	bic.w	r2, r2, #4
 8001c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	69d9      	ldr	r1, [r3, #28]
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	61da      	str	r2, [r3, #28]
      break;
 8001c50:	e021      	b.n	8001c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68b9      	ldr	r1, [r7, #8]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 f9e5 	bl	8002028 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	69da      	ldr	r2, [r3, #28]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69da      	ldr	r2, [r3, #28]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	69d9      	ldr	r1, [r3, #28]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	021a      	lsls	r2, r3, #8
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	61da      	str	r2, [r3, #28]
      break;
 8001c92:	e000      	b.n	8001c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001c94:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a34      	ldr	r2, [pc, #208]	; (8001d94 <TIM_Base_SetConfig+0xe4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d00f      	beq.n	8001ce8 <TIM_Base_SetConfig+0x38>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cce:	d00b      	beq.n	8001ce8 <TIM_Base_SetConfig+0x38>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a31      	ldr	r2, [pc, #196]	; (8001d98 <TIM_Base_SetConfig+0xe8>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d007      	beq.n	8001ce8 <TIM_Base_SetConfig+0x38>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a30      	ldr	r2, [pc, #192]	; (8001d9c <TIM_Base_SetConfig+0xec>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d003      	beq.n	8001ce8 <TIM_Base_SetConfig+0x38>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a2f      	ldr	r2, [pc, #188]	; (8001da0 <TIM_Base_SetConfig+0xf0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d108      	bne.n	8001cfa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a25      	ldr	r2, [pc, #148]	; (8001d94 <TIM_Base_SetConfig+0xe4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d01b      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d08:	d017      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a22      	ldr	r2, [pc, #136]	; (8001d98 <TIM_Base_SetConfig+0xe8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a21      	ldr	r2, [pc, #132]	; (8001d9c <TIM_Base_SetConfig+0xec>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00f      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a20      	ldr	r2, [pc, #128]	; (8001da0 <TIM_Base_SetConfig+0xf0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00b      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a1f      	ldr	r2, [pc, #124]	; (8001da4 <TIM_Base_SetConfig+0xf4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d007      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a1e      	ldr	r2, [pc, #120]	; (8001da8 <TIM_Base_SetConfig+0xf8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d003      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <TIM_Base_SetConfig+0xfc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d108      	bne.n	8001d4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <TIM_Base_SetConfig+0xe4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d103      	bne.n	8001d80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	615a      	str	r2, [r3, #20]
}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40010000 	.word	0x40010000
 8001d98:	40000400 	.word	0x40000400
 8001d9c:	40000800 	.word	0x40000800
 8001da0:	40000c00 	.word	0x40000c00
 8001da4:	40014000 	.word	0x40014000
 8001da8:	40014400 	.word	0x40014400
 8001dac:	40014800 	.word	0x40014800

08001db0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	f023 0201 	bic.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 0303 	bic.w	r3, r3, #3
 8001de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f023 0302 	bic.w	r3, r3, #2
 8001df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a1c      	ldr	r2, [pc, #112]	; (8001e78 <TIM_OC1_SetConfig+0xc8>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d10c      	bne.n	8001e26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f023 0308 	bic.w	r3, r3, #8
 8001e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f023 0304 	bic.w	r3, r3, #4
 8001e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a13      	ldr	r2, [pc, #76]	; (8001e78 <TIM_OC1_SetConfig+0xc8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d111      	bne.n	8001e52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	621a      	str	r2, [r3, #32]
}
 8001e6c:	bf00      	nop
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	40010000 	.word	0x40010000

08001e7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	f023 0210 	bic.w	r2, r3, #16
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f023 0320 	bic.w	r3, r3, #32
 8001ec6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a1e      	ldr	r2, [pc, #120]	; (8001f50 <TIM_OC2_SetConfig+0xd4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d10d      	bne.n	8001ef8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ef6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a15      	ldr	r2, [pc, #84]	; (8001f50 <TIM_OC2_SetConfig+0xd4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d113      	bne.n	8001f28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	621a      	str	r2, [r3, #32]
}
 8001f42:	bf00      	nop
 8001f44:	371c      	adds	r7, #28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40010000 	.word	0x40010000

08001f54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b087      	sub	sp, #28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f023 0303 	bic.w	r3, r3, #3
 8001f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a1d      	ldr	r2, [pc, #116]	; (8002024 <TIM_OC3_SetConfig+0xd0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d10d      	bne.n	8001fce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a14      	ldr	r2, [pc, #80]	; (8002024 <TIM_OC3_SetConfig+0xd0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d113      	bne.n	8001ffe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	621a      	str	r2, [r3, #32]
}
 8002018:	bf00      	nop
 800201a:	371c      	adds	r7, #28
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	40010000 	.word	0x40010000

08002028 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800205e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002072:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	031b      	lsls	r3, r3, #12
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a10      	ldr	r2, [pc, #64]	; (80020c4 <TIM_OC4_SetConfig+0x9c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d109      	bne.n	800209c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800208e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	019b      	lsls	r3, r3, #6
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4313      	orrs	r3, r2
 800209a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	621a      	str	r2, [r3, #32]
}
 80020b6:	bf00      	nop
 80020b8:	371c      	adds	r7, #28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40010000 	.word	0x40010000

080020c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f003 031f 	and.w	r3, r3, #31
 80020da:	2201      	movs	r2, #1
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a1a      	ldr	r2, [r3, #32]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	401a      	ands	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6a1a      	ldr	r2, [r3, #32]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f003 031f 	and.w	r3, r3, #31
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002100:	431a      	orrs	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	621a      	str	r2, [r3, #32]
}
 8002106:	bf00      	nop
 8002108:	371c      	adds	r7, #28
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002128:	2302      	movs	r3, #2
 800212a:	e050      	b.n	80021ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d018      	beq.n	80021a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002178:	d013      	beq.n	80021a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a18      	ldr	r2, [pc, #96]	; (80021e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00e      	beq.n	80021a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a16      	ldr	r2, [pc, #88]	; (80021e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d009      	beq.n	80021a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d004      	beq.n	80021a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a13      	ldr	r2, [pc, #76]	; (80021ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d10c      	bne.n	80021bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40010000 	.word	0x40010000
 80021e0:	40000400 	.word	0x40000400
 80021e4:	40000800 	.word	0x40000800
 80021e8:	40000c00 	.word	0x40000c00
 80021ec:	40014000 	.word	0x40014000

080021f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e03f      	b.n	8002282 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe fbf8 	bl	8000a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2224      	movs	r2, #36	; 0x24
 8002220:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002232:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f829 	bl	800228c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695a      	ldr	r2, [r3, #20]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002258:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002268:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800228c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002290:	b085      	sub	sp, #20
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80022ce:	f023 030c 	bic.w	r3, r3, #12
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	68f9      	ldr	r1, [r7, #12]
 80022d8:	430b      	orrs	r3, r1
 80022da:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022fa:	f040 818b 	bne.w	8002614 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4ac1      	ldr	r2, [pc, #772]	; (8002608 <UART_SetConfig+0x37c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d005      	beq.n	8002314 <UART_SetConfig+0x88>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4abf      	ldr	r2, [pc, #764]	; (800260c <UART_SetConfig+0x380>)
 800230e:	4293      	cmp	r3, r2
 8002310:	f040 80bd 	bne.w	800248e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002314:	f7ff fb94 	bl	8001a40 <HAL_RCC_GetPCLK2Freq>
 8002318:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	461d      	mov	r5, r3
 800231e:	f04f 0600 	mov.w	r6, #0
 8002322:	46a8      	mov	r8, r5
 8002324:	46b1      	mov	r9, r6
 8002326:	eb18 0308 	adds.w	r3, r8, r8
 800232a:	eb49 0409 	adc.w	r4, r9, r9
 800232e:	4698      	mov	r8, r3
 8002330:	46a1      	mov	r9, r4
 8002332:	eb18 0805 	adds.w	r8, r8, r5
 8002336:	eb49 0906 	adc.w	r9, r9, r6
 800233a:	f04f 0100 	mov.w	r1, #0
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002346:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800234a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800234e:	4688      	mov	r8, r1
 8002350:	4691      	mov	r9, r2
 8002352:	eb18 0005 	adds.w	r0, r8, r5
 8002356:	eb49 0106 	adc.w	r1, r9, r6
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	461d      	mov	r5, r3
 8002360:	f04f 0600 	mov.w	r6, #0
 8002364:	196b      	adds	r3, r5, r5
 8002366:	eb46 0406 	adc.w	r4, r6, r6
 800236a:	461a      	mov	r2, r3
 800236c:	4623      	mov	r3, r4
 800236e:	f7fd ff31 	bl	80001d4 <__aeabi_uldivmod>
 8002372:	4603      	mov	r3, r0
 8002374:	460c      	mov	r4, r1
 8002376:	461a      	mov	r2, r3
 8002378:	4ba5      	ldr	r3, [pc, #660]	; (8002610 <UART_SetConfig+0x384>)
 800237a:	fba3 2302 	umull	r2, r3, r3, r2
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	461d      	mov	r5, r3
 8002388:	f04f 0600 	mov.w	r6, #0
 800238c:	46a9      	mov	r9, r5
 800238e:	46b2      	mov	sl, r6
 8002390:	eb19 0309 	adds.w	r3, r9, r9
 8002394:	eb4a 040a 	adc.w	r4, sl, sl
 8002398:	4699      	mov	r9, r3
 800239a:	46a2      	mov	sl, r4
 800239c:	eb19 0905 	adds.w	r9, r9, r5
 80023a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80023a4:	f04f 0100 	mov.w	r1, #0
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023b8:	4689      	mov	r9, r1
 80023ba:	4692      	mov	sl, r2
 80023bc:	eb19 0005 	adds.w	r0, r9, r5
 80023c0:	eb4a 0106 	adc.w	r1, sl, r6
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	461d      	mov	r5, r3
 80023ca:	f04f 0600 	mov.w	r6, #0
 80023ce:	196b      	adds	r3, r5, r5
 80023d0:	eb46 0406 	adc.w	r4, r6, r6
 80023d4:	461a      	mov	r2, r3
 80023d6:	4623      	mov	r3, r4
 80023d8:	f7fd fefc 	bl	80001d4 <__aeabi_uldivmod>
 80023dc:	4603      	mov	r3, r0
 80023de:	460c      	mov	r4, r1
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b8b      	ldr	r3, [pc, #556]	; (8002610 <UART_SetConfig+0x384>)
 80023e4:	fba3 1302 	umull	r1, r3, r3, r2
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	2164      	movs	r1, #100	; 0x64
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	3332      	adds	r3, #50	; 0x32
 80023f6:	4a86      	ldr	r2, [pc, #536]	; (8002610 <UART_SetConfig+0x384>)
 80023f8:	fba2 2303 	umull	r2, r3, r2, r3
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002404:	4498      	add	r8, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	461d      	mov	r5, r3
 800240a:	f04f 0600 	mov.w	r6, #0
 800240e:	46a9      	mov	r9, r5
 8002410:	46b2      	mov	sl, r6
 8002412:	eb19 0309 	adds.w	r3, r9, r9
 8002416:	eb4a 040a 	adc.w	r4, sl, sl
 800241a:	4699      	mov	r9, r3
 800241c:	46a2      	mov	sl, r4
 800241e:	eb19 0905 	adds.w	r9, r9, r5
 8002422:	eb4a 0a06 	adc.w	sl, sl, r6
 8002426:	f04f 0100 	mov.w	r1, #0
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002432:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002436:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800243a:	4689      	mov	r9, r1
 800243c:	4692      	mov	sl, r2
 800243e:	eb19 0005 	adds.w	r0, r9, r5
 8002442:	eb4a 0106 	adc.w	r1, sl, r6
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	461d      	mov	r5, r3
 800244c:	f04f 0600 	mov.w	r6, #0
 8002450:	196b      	adds	r3, r5, r5
 8002452:	eb46 0406 	adc.w	r4, r6, r6
 8002456:	461a      	mov	r2, r3
 8002458:	4623      	mov	r3, r4
 800245a:	f7fd febb 	bl	80001d4 <__aeabi_uldivmod>
 800245e:	4603      	mov	r3, r0
 8002460:	460c      	mov	r4, r1
 8002462:	461a      	mov	r2, r3
 8002464:	4b6a      	ldr	r3, [pc, #424]	; (8002610 <UART_SetConfig+0x384>)
 8002466:	fba3 1302 	umull	r1, r3, r3, r2
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2164      	movs	r1, #100	; 0x64
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	3332      	adds	r3, #50	; 0x32
 8002478:	4a65      	ldr	r2, [pc, #404]	; (8002610 <UART_SetConfig+0x384>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	f003 0207 	and.w	r2, r3, #7
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4442      	add	r2, r8
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	e26f      	b.n	800296e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800248e:	f7ff fac3 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 8002492:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	461d      	mov	r5, r3
 8002498:	f04f 0600 	mov.w	r6, #0
 800249c:	46a8      	mov	r8, r5
 800249e:	46b1      	mov	r9, r6
 80024a0:	eb18 0308 	adds.w	r3, r8, r8
 80024a4:	eb49 0409 	adc.w	r4, r9, r9
 80024a8:	4698      	mov	r8, r3
 80024aa:	46a1      	mov	r9, r4
 80024ac:	eb18 0805 	adds.w	r8, r8, r5
 80024b0:	eb49 0906 	adc.w	r9, r9, r6
 80024b4:	f04f 0100 	mov.w	r1, #0
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80024c8:	4688      	mov	r8, r1
 80024ca:	4691      	mov	r9, r2
 80024cc:	eb18 0005 	adds.w	r0, r8, r5
 80024d0:	eb49 0106 	adc.w	r1, r9, r6
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	461d      	mov	r5, r3
 80024da:	f04f 0600 	mov.w	r6, #0
 80024de:	196b      	adds	r3, r5, r5
 80024e0:	eb46 0406 	adc.w	r4, r6, r6
 80024e4:	461a      	mov	r2, r3
 80024e6:	4623      	mov	r3, r4
 80024e8:	f7fd fe74 	bl	80001d4 <__aeabi_uldivmod>
 80024ec:	4603      	mov	r3, r0
 80024ee:	460c      	mov	r4, r1
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b47      	ldr	r3, [pc, #284]	; (8002610 <UART_SetConfig+0x384>)
 80024f4:	fba3 2302 	umull	r2, r3, r3, r2
 80024f8:	095b      	lsrs	r3, r3, #5
 80024fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	461d      	mov	r5, r3
 8002502:	f04f 0600 	mov.w	r6, #0
 8002506:	46a9      	mov	r9, r5
 8002508:	46b2      	mov	sl, r6
 800250a:	eb19 0309 	adds.w	r3, r9, r9
 800250e:	eb4a 040a 	adc.w	r4, sl, sl
 8002512:	4699      	mov	r9, r3
 8002514:	46a2      	mov	sl, r4
 8002516:	eb19 0905 	adds.w	r9, r9, r5
 800251a:	eb4a 0a06 	adc.w	sl, sl, r6
 800251e:	f04f 0100 	mov.w	r1, #0
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800252a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800252e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002532:	4689      	mov	r9, r1
 8002534:	4692      	mov	sl, r2
 8002536:	eb19 0005 	adds.w	r0, r9, r5
 800253a:	eb4a 0106 	adc.w	r1, sl, r6
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	461d      	mov	r5, r3
 8002544:	f04f 0600 	mov.w	r6, #0
 8002548:	196b      	adds	r3, r5, r5
 800254a:	eb46 0406 	adc.w	r4, r6, r6
 800254e:	461a      	mov	r2, r3
 8002550:	4623      	mov	r3, r4
 8002552:	f7fd fe3f 	bl	80001d4 <__aeabi_uldivmod>
 8002556:	4603      	mov	r3, r0
 8002558:	460c      	mov	r4, r1
 800255a:	461a      	mov	r2, r3
 800255c:	4b2c      	ldr	r3, [pc, #176]	; (8002610 <UART_SetConfig+0x384>)
 800255e:	fba3 1302 	umull	r1, r3, r3, r2
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	2164      	movs	r1, #100	; 0x64
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	3332      	adds	r3, #50	; 0x32
 8002570:	4a27      	ldr	r2, [pc, #156]	; (8002610 <UART_SetConfig+0x384>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800257e:	4498      	add	r8, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	461d      	mov	r5, r3
 8002584:	f04f 0600 	mov.w	r6, #0
 8002588:	46a9      	mov	r9, r5
 800258a:	46b2      	mov	sl, r6
 800258c:	eb19 0309 	adds.w	r3, r9, r9
 8002590:	eb4a 040a 	adc.w	r4, sl, sl
 8002594:	4699      	mov	r9, r3
 8002596:	46a2      	mov	sl, r4
 8002598:	eb19 0905 	adds.w	r9, r9, r5
 800259c:	eb4a 0a06 	adc.w	sl, sl, r6
 80025a0:	f04f 0100 	mov.w	r1, #0
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025b4:	4689      	mov	r9, r1
 80025b6:	4692      	mov	sl, r2
 80025b8:	eb19 0005 	adds.w	r0, r9, r5
 80025bc:	eb4a 0106 	adc.w	r1, sl, r6
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	461d      	mov	r5, r3
 80025c6:	f04f 0600 	mov.w	r6, #0
 80025ca:	196b      	adds	r3, r5, r5
 80025cc:	eb46 0406 	adc.w	r4, r6, r6
 80025d0:	461a      	mov	r2, r3
 80025d2:	4623      	mov	r3, r4
 80025d4:	f7fd fdfe 	bl	80001d4 <__aeabi_uldivmod>
 80025d8:	4603      	mov	r3, r0
 80025da:	460c      	mov	r4, r1
 80025dc:	461a      	mov	r2, r3
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <UART_SetConfig+0x384>)
 80025e0:	fba3 1302 	umull	r1, r3, r3, r2
 80025e4:	095b      	lsrs	r3, r3, #5
 80025e6:	2164      	movs	r1, #100	; 0x64
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	3332      	adds	r3, #50	; 0x32
 80025f2:	4a07      	ldr	r2, [pc, #28]	; (8002610 <UART_SetConfig+0x384>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	f003 0207 	and.w	r2, r3, #7
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4442      	add	r2, r8
 8002604:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002606:	e1b2      	b.n	800296e <UART_SetConfig+0x6e2>
 8002608:	40011000 	.word	0x40011000
 800260c:	40011400 	.word	0x40011400
 8002610:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4ad7      	ldr	r2, [pc, #860]	; (8002978 <UART_SetConfig+0x6ec>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d005      	beq.n	800262a <UART_SetConfig+0x39e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4ad6      	ldr	r2, [pc, #856]	; (800297c <UART_SetConfig+0x6f0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	f040 80d1 	bne.w	80027cc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800262a:	f7ff fa09 	bl	8001a40 <HAL_RCC_GetPCLK2Freq>
 800262e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	469a      	mov	sl, r3
 8002634:	f04f 0b00 	mov.w	fp, #0
 8002638:	46d0      	mov	r8, sl
 800263a:	46d9      	mov	r9, fp
 800263c:	eb18 0308 	adds.w	r3, r8, r8
 8002640:	eb49 0409 	adc.w	r4, r9, r9
 8002644:	4698      	mov	r8, r3
 8002646:	46a1      	mov	r9, r4
 8002648:	eb18 080a 	adds.w	r8, r8, sl
 800264c:	eb49 090b 	adc.w	r9, r9, fp
 8002650:	f04f 0100 	mov.w	r1, #0
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800265c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002660:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002664:	4688      	mov	r8, r1
 8002666:	4691      	mov	r9, r2
 8002668:	eb1a 0508 	adds.w	r5, sl, r8
 800266c:	eb4b 0609 	adc.w	r6, fp, r9
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4619      	mov	r1, r3
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	f04f 0400 	mov.w	r4, #0
 8002682:	0094      	lsls	r4, r2, #2
 8002684:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002688:	008b      	lsls	r3, r1, #2
 800268a:	461a      	mov	r2, r3
 800268c:	4623      	mov	r3, r4
 800268e:	4628      	mov	r0, r5
 8002690:	4631      	mov	r1, r6
 8002692:	f7fd fd9f 	bl	80001d4 <__aeabi_uldivmod>
 8002696:	4603      	mov	r3, r0
 8002698:	460c      	mov	r4, r1
 800269a:	461a      	mov	r2, r3
 800269c:	4bb8      	ldr	r3, [pc, #736]	; (8002980 <UART_SetConfig+0x6f4>)
 800269e:	fba3 2302 	umull	r2, r3, r3, r2
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	469b      	mov	fp, r3
 80026ac:	f04f 0c00 	mov.w	ip, #0
 80026b0:	46d9      	mov	r9, fp
 80026b2:	46e2      	mov	sl, ip
 80026b4:	eb19 0309 	adds.w	r3, r9, r9
 80026b8:	eb4a 040a 	adc.w	r4, sl, sl
 80026bc:	4699      	mov	r9, r3
 80026be:	46a2      	mov	sl, r4
 80026c0:	eb19 090b 	adds.w	r9, r9, fp
 80026c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80026c8:	f04f 0100 	mov.w	r1, #0
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026dc:	4689      	mov	r9, r1
 80026de:	4692      	mov	sl, r2
 80026e0:	eb1b 0509 	adds.w	r5, fp, r9
 80026e4:	eb4c 060a 	adc.w	r6, ip, sl
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4619      	mov	r1, r3
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	f04f 0400 	mov.w	r4, #0
 80026fa:	0094      	lsls	r4, r2, #2
 80026fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002700:	008b      	lsls	r3, r1, #2
 8002702:	461a      	mov	r2, r3
 8002704:	4623      	mov	r3, r4
 8002706:	4628      	mov	r0, r5
 8002708:	4631      	mov	r1, r6
 800270a:	f7fd fd63 	bl	80001d4 <__aeabi_uldivmod>
 800270e:	4603      	mov	r3, r0
 8002710:	460c      	mov	r4, r1
 8002712:	461a      	mov	r2, r3
 8002714:	4b9a      	ldr	r3, [pc, #616]	; (8002980 <UART_SetConfig+0x6f4>)
 8002716:	fba3 1302 	umull	r1, r3, r3, r2
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	2164      	movs	r1, #100	; 0x64
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	3332      	adds	r3, #50	; 0x32
 8002728:	4a95      	ldr	r2, [pc, #596]	; (8002980 <UART_SetConfig+0x6f4>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002734:	4498      	add	r8, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	469b      	mov	fp, r3
 800273a:	f04f 0c00 	mov.w	ip, #0
 800273e:	46d9      	mov	r9, fp
 8002740:	46e2      	mov	sl, ip
 8002742:	eb19 0309 	adds.w	r3, r9, r9
 8002746:	eb4a 040a 	adc.w	r4, sl, sl
 800274a:	4699      	mov	r9, r3
 800274c:	46a2      	mov	sl, r4
 800274e:	eb19 090b 	adds.w	r9, r9, fp
 8002752:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002756:	f04f 0100 	mov.w	r1, #0
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002762:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002766:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800276a:	4689      	mov	r9, r1
 800276c:	4692      	mov	sl, r2
 800276e:	eb1b 0509 	adds.w	r5, fp, r9
 8002772:	eb4c 060a 	adc.w	r6, ip, sl
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4619      	mov	r1, r3
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	f04f 0400 	mov.w	r4, #0
 8002788:	0094      	lsls	r4, r2, #2
 800278a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800278e:	008b      	lsls	r3, r1, #2
 8002790:	461a      	mov	r2, r3
 8002792:	4623      	mov	r3, r4
 8002794:	4628      	mov	r0, r5
 8002796:	4631      	mov	r1, r6
 8002798:	f7fd fd1c 	bl	80001d4 <__aeabi_uldivmod>
 800279c:	4603      	mov	r3, r0
 800279e:	460c      	mov	r4, r1
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b77      	ldr	r3, [pc, #476]	; (8002980 <UART_SetConfig+0x6f4>)
 80027a4:	fba3 1302 	umull	r1, r3, r3, r2
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	2164      	movs	r1, #100	; 0x64
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	3332      	adds	r3, #50	; 0x32
 80027b6:	4a72      	ldr	r2, [pc, #456]	; (8002980 <UART_SetConfig+0x6f4>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	f003 020f 	and.w	r2, r3, #15
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4442      	add	r2, r8
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	e0d0      	b.n	800296e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80027cc:	f7ff f924 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 80027d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	469a      	mov	sl, r3
 80027d6:	f04f 0b00 	mov.w	fp, #0
 80027da:	46d0      	mov	r8, sl
 80027dc:	46d9      	mov	r9, fp
 80027de:	eb18 0308 	adds.w	r3, r8, r8
 80027e2:	eb49 0409 	adc.w	r4, r9, r9
 80027e6:	4698      	mov	r8, r3
 80027e8:	46a1      	mov	r9, r4
 80027ea:	eb18 080a 	adds.w	r8, r8, sl
 80027ee:	eb49 090b 	adc.w	r9, r9, fp
 80027f2:	f04f 0100 	mov.w	r1, #0
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80027fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002802:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002806:	4688      	mov	r8, r1
 8002808:	4691      	mov	r9, r2
 800280a:	eb1a 0508 	adds.w	r5, sl, r8
 800280e:	eb4b 0609 	adc.w	r6, fp, r9
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4619      	mov	r1, r3
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	f04f 0400 	mov.w	r4, #0
 8002824:	0094      	lsls	r4, r2, #2
 8002826:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800282a:	008b      	lsls	r3, r1, #2
 800282c:	461a      	mov	r2, r3
 800282e:	4623      	mov	r3, r4
 8002830:	4628      	mov	r0, r5
 8002832:	4631      	mov	r1, r6
 8002834:	f7fd fcce 	bl	80001d4 <__aeabi_uldivmod>
 8002838:	4603      	mov	r3, r0
 800283a:	460c      	mov	r4, r1
 800283c:	461a      	mov	r2, r3
 800283e:	4b50      	ldr	r3, [pc, #320]	; (8002980 <UART_SetConfig+0x6f4>)
 8002840:	fba3 2302 	umull	r2, r3, r3, r2
 8002844:	095b      	lsrs	r3, r3, #5
 8002846:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	469b      	mov	fp, r3
 800284e:	f04f 0c00 	mov.w	ip, #0
 8002852:	46d9      	mov	r9, fp
 8002854:	46e2      	mov	sl, ip
 8002856:	eb19 0309 	adds.w	r3, r9, r9
 800285a:	eb4a 040a 	adc.w	r4, sl, sl
 800285e:	4699      	mov	r9, r3
 8002860:	46a2      	mov	sl, r4
 8002862:	eb19 090b 	adds.w	r9, r9, fp
 8002866:	eb4a 0a0c 	adc.w	sl, sl, ip
 800286a:	f04f 0100 	mov.w	r1, #0
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002876:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800287a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800287e:	4689      	mov	r9, r1
 8002880:	4692      	mov	sl, r2
 8002882:	eb1b 0509 	adds.w	r5, fp, r9
 8002886:	eb4c 060a 	adc.w	r6, ip, sl
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	4619      	mov	r1, r3
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	f04f 0400 	mov.w	r4, #0
 800289c:	0094      	lsls	r4, r2, #2
 800289e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028a2:	008b      	lsls	r3, r1, #2
 80028a4:	461a      	mov	r2, r3
 80028a6:	4623      	mov	r3, r4
 80028a8:	4628      	mov	r0, r5
 80028aa:	4631      	mov	r1, r6
 80028ac:	f7fd fc92 	bl	80001d4 <__aeabi_uldivmod>
 80028b0:	4603      	mov	r3, r0
 80028b2:	460c      	mov	r4, r1
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b32      	ldr	r3, [pc, #200]	; (8002980 <UART_SetConfig+0x6f4>)
 80028b8:	fba3 1302 	umull	r1, r3, r3, r2
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	2164      	movs	r1, #100	; 0x64
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	3332      	adds	r3, #50	; 0x32
 80028ca:	4a2d      	ldr	r2, [pc, #180]	; (8002980 <UART_SetConfig+0x6f4>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d6:	4498      	add	r8, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	469b      	mov	fp, r3
 80028dc:	f04f 0c00 	mov.w	ip, #0
 80028e0:	46d9      	mov	r9, fp
 80028e2:	46e2      	mov	sl, ip
 80028e4:	eb19 0309 	adds.w	r3, r9, r9
 80028e8:	eb4a 040a 	adc.w	r4, sl, sl
 80028ec:	4699      	mov	r9, r3
 80028ee:	46a2      	mov	sl, r4
 80028f0:	eb19 090b 	adds.w	r9, r9, fp
 80028f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80028f8:	f04f 0100 	mov.w	r1, #0
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002904:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002908:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800290c:	4689      	mov	r9, r1
 800290e:	4692      	mov	sl, r2
 8002910:	eb1b 0509 	adds.w	r5, fp, r9
 8002914:	eb4c 060a 	adc.w	r6, ip, sl
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4619      	mov	r1, r3
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	f04f 0400 	mov.w	r4, #0
 800292a:	0094      	lsls	r4, r2, #2
 800292c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002930:	008b      	lsls	r3, r1, #2
 8002932:	461a      	mov	r2, r3
 8002934:	4623      	mov	r3, r4
 8002936:	4628      	mov	r0, r5
 8002938:	4631      	mov	r1, r6
 800293a:	f7fd fc4b 	bl	80001d4 <__aeabi_uldivmod>
 800293e:	4603      	mov	r3, r0
 8002940:	460c      	mov	r4, r1
 8002942:	461a      	mov	r2, r3
 8002944:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <UART_SetConfig+0x6f4>)
 8002946:	fba3 1302 	umull	r1, r3, r3, r2
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2164      	movs	r1, #100	; 0x64
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	3332      	adds	r3, #50	; 0x32
 8002958:	4a09      	ldr	r2, [pc, #36]	; (8002980 <UART_SetConfig+0x6f4>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	f003 020f 	and.w	r2, r3, #15
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4442      	add	r2, r8
 800296a:	609a      	str	r2, [r3, #8]
}
 800296c:	e7ff      	b.n	800296e <UART_SetConfig+0x6e2>
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002978:	40011000 	.word	0x40011000
 800297c:	40011400 	.word	0x40011400
 8002980:	51eb851f 	.word	0x51eb851f

08002984 <__libc_init_array>:
 8002984:	b570      	push	{r4, r5, r6, lr}
 8002986:	4e0d      	ldr	r6, [pc, #52]	; (80029bc <__libc_init_array+0x38>)
 8002988:	4c0d      	ldr	r4, [pc, #52]	; (80029c0 <__libc_init_array+0x3c>)
 800298a:	1ba4      	subs	r4, r4, r6
 800298c:	10a4      	asrs	r4, r4, #2
 800298e:	2500      	movs	r5, #0
 8002990:	42a5      	cmp	r5, r4
 8002992:	d109      	bne.n	80029a8 <__libc_init_array+0x24>
 8002994:	4e0b      	ldr	r6, [pc, #44]	; (80029c4 <__libc_init_array+0x40>)
 8002996:	4c0c      	ldr	r4, [pc, #48]	; (80029c8 <__libc_init_array+0x44>)
 8002998:	f000 f820 	bl	80029dc <_init>
 800299c:	1ba4      	subs	r4, r4, r6
 800299e:	10a4      	asrs	r4, r4, #2
 80029a0:	2500      	movs	r5, #0
 80029a2:	42a5      	cmp	r5, r4
 80029a4:	d105      	bne.n	80029b2 <__libc_init_array+0x2e>
 80029a6:	bd70      	pop	{r4, r5, r6, pc}
 80029a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029ac:	4798      	blx	r3
 80029ae:	3501      	adds	r5, #1
 80029b0:	e7ee      	b.n	8002990 <__libc_init_array+0xc>
 80029b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029b6:	4798      	blx	r3
 80029b8:	3501      	adds	r5, #1
 80029ba:	e7f2      	b.n	80029a2 <__libc_init_array+0x1e>
 80029bc:	08002a14 	.word	0x08002a14
 80029c0:	08002a14 	.word	0x08002a14
 80029c4:	08002a14 	.word	0x08002a14
 80029c8:	08002a18 	.word	0x08002a18

080029cc <memset>:
 80029cc:	4402      	add	r2, r0
 80029ce:	4603      	mov	r3, r0
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d100      	bne.n	80029d6 <memset+0xa>
 80029d4:	4770      	bx	lr
 80029d6:	f803 1b01 	strb.w	r1, [r3], #1
 80029da:	e7f9      	b.n	80029d0 <memset+0x4>

080029dc <_init>:
 80029dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029de:	bf00      	nop
 80029e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e2:	bc08      	pop	{r3}
 80029e4:	469e      	mov	lr, r3
 80029e6:	4770      	bx	lr

080029e8 <_fini>:
 80029e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ea:	bf00      	nop
 80029ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ee:	bc08      	pop	{r3}
 80029f0:	469e      	mov	lr, r3
 80029f2:	4770      	bx	lr
