
New_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08003fc4  08003fc4  00013fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040cc  080040cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080040cc  080040cc  000140cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040d4  080040d4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d4  080040d4  000140d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040d8  080040d8  000140d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080040dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000074  08004150  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08004150  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba3e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001afb  00000000  00000000  0002bae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bd0  00000000  00000000  0002d5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af8  00000000  00000000  0002e1b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ed2  00000000  00000000  0002eca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008482  00000000  00000000  00045b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c97e  00000000  00000000  0004dffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da97a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000386c  00000000  00000000  000da9f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003fac 	.word	0x08003fac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003fac 	.word	0x08003fac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fc88 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f828 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f940 	bl	8000810 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f914 	bl	80007bc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000594:	f000 f88e 	bl	80006b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  printf("Clock Start 2\r\n");
 8000598:	480c      	ldr	r0, [pc, #48]	; (80005cc <main+0x4c>)
 800059a:	f002 fe33 	bl	8003204 <puts>
  HAL_Delay(1000);
 800059e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a2:	f000 fceb 	bl	8000f7c <HAL_Delay>
  printf("Clock Start 1\r\n");
 80005a6:	480a      	ldr	r0, [pc, #40]	; (80005d0 <main+0x50>)
 80005a8:	f002 fe2c 	bl	8003204 <puts>
  HAL_Delay(1000);
 80005ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b0:	f000 fce4 	bl	8000f7c <HAL_Delay>
  printf("Clock Start 0\r\n");
 80005b4:	4807      	ldr	r0, [pc, #28]	; (80005d4 <main+0x54>)
 80005b6:	f002 fe25 	bl	8003204 <puts>
  HAL_Delay(1000);
 80005ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005be:	f000 fcdd 	bl	8000f7c <HAL_Delay>
  HAL_TIM_Base_Start_IT(TIM);
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <main+0x58>)
 80005c4:	f001 fc0c 	bl	8001de0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <main+0x48>
 80005ca:	bf00      	nop
 80005cc:	08003fc4 	.word	0x08003fc4
 80005d0:	08003fd4 	.word	0x08003fd4
 80005d4:	08003fe4 	.word	0x08003fe4
 80005d8:	200000a0 	.word	0x200000a0

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fd8e 	bl	800310c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b29      	ldr	r3, [pc, #164]	; (80006ac <SystemClock_Config+0xd0>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a28      	ldr	r2, [pc, #160]	; (80006ac <SystemClock_Config+0xd0>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b26      	ldr	r3, [pc, #152]	; (80006ac <SystemClock_Config+0xd0>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <SystemClock_Config+0xd4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000628:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <SystemClock_Config+0xd4>)
 800062a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <SystemClock_Config+0xd4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000644:	2310      	movs	r3, #16
 8000646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064c:	2300      	movs	r3, #0
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000650:	2310      	movs	r3, #16
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000654:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800065a:	2304      	movs	r3, #4
 800065c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800065e:	2307      	movs	r3, #7
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	4618      	mov	r0, r3
 8000668:	f000 ff58 	bl	800151c <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000672:	f000 fa25 	bl	8000ac0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2102      	movs	r1, #2
 8000692:	4618      	mov	r0, r3
 8000694:	f001 f9b2 	bl	80019fc <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800069e:	f000 fa0f 	bl	8000ac0 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b092      	sub	sp, #72	; 0x48
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
 80006d4:	615a      	str	r2, [r3, #20]
 80006d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2220      	movs	r2, #32
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fd14 	bl	800310c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006e4:	4b33      	ldr	r3, [pc, #204]	; (80007b4 <MX_TIM1_Init+0x100>)
 80006e6:	4a34      	ldr	r2, [pc, #208]	; (80007b8 <MX_TIM1_Init+0x104>)
 80006e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400;
 80006ea:	4b32      	ldr	r3, [pc, #200]	; (80007b4 <MX_TIM1_Init+0x100>)
 80006ec:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80006f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f2:	4b30      	ldr	r3, [pc, #192]	; (80007b4 <MX_TIM1_Init+0x100>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80006f8:	4b2e      	ldr	r3, [pc, #184]	; (80007b4 <MX_TIM1_Init+0x100>)
 80006fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80006fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000700:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <MX_TIM1_Init+0x100>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000706:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <MX_TIM1_Init+0x100>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070c:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <MX_TIM1_Init+0x100>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000712:	4828      	ldr	r0, [pc, #160]	; (80007b4 <MX_TIM1_Init+0x100>)
 8000714:	f001 fb88 	bl	8001e28 <HAL_TIM_OC_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800071e:	f000 f9cf 	bl	8000ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000722:	2300      	movs	r3, #0
 8000724:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800072a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800072e:	4619      	mov	r1, r3
 8000730:	4820      	ldr	r0, [pc, #128]	; (80007b4 <MX_TIM1_Init+0x100>)
 8000732:	f001 ff41 	bl	80025b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 800073c:	f000 f9c0 	bl	8000ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000748:	2300      	movs	r3, #0
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800074c:	2300      	movs	r3, #0
 800074e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000754:	2300      	movs	r3, #0
 8000756:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000760:	2200      	movs	r2, #0
 8000762:	4619      	mov	r1, r3
 8000764:	4813      	ldr	r0, [pc, #76]	; (80007b4 <MX_TIM1_Init+0x100>)
 8000766:	f001 fc93 	bl	8002090 <HAL_TIM_OC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000770:	f000 f9a6 	bl	8000ac0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	4619      	mov	r1, r3
 8000796:	4807      	ldr	r0, [pc, #28]	; (80007b4 <MX_TIM1_Init+0x100>)
 8000798:	f001 ff7c 	bl	8002694 <HAL_TIMEx_ConfigBreakDeadTime>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80007a2:	f000 f98d 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007a6:	4803      	ldr	r0, [pc, #12]	; (80007b4 <MX_TIM1_Init+0x100>)
 80007a8:	f000 f9e2 	bl	8000b70 <HAL_TIM_MspPostInit>

}
 80007ac:	bf00      	nop
 80007ae:	3748      	adds	r7, #72	; 0x48
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200000a0 	.word	0x200000a0
 80007b8:	40010000 	.word	0x40010000

080007bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_USART2_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f001 ffb4 	bl	8002760 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 f95f 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000e0 	.word	0x200000e0
 800080c:	40004400 	.word	0x40004400

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a2c      	ldr	r2, [pc, #176]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b2a      	ldr	r3, [pc, #168]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a25      	ldr	r2, [pc, #148]	; (80008e0 <MX_GPIO_Init+0xd0>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a1e      	ldr	r2, [pc, #120]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2120      	movs	r1, #32
 800089a:	4812      	ldr	r0, [pc, #72]	; (80008e4 <MX_GPIO_Init+0xd4>)
 800089c:	f000 fe24 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_GPIO_Init+0xd8>)
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_GPIO_Init+0xdc>)
 80008b6:	f000 fc95 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ba:	2320      	movs	r3, #32
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_GPIO_Init+0xd4>)
 80008d2:	f000 fc87 	bl	80011e4 <HAL_GPIO_Init>

}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	; 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020000 	.word	0x40020000
 80008e8:	10210000 	.word	0x10210000
 80008ec:	40020800 	.word	0x40020800

080008f0 <__io_putchar>:
/*int __io_putchar(int ch){

	return ITM_SendChar(ch);
}*/
int __io_putchar(int ch)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	uint8_t buf[2];
	buf[0] = (uint8_t)ch;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	733b      	strb	r3, [r7, #12]
	return HAL_UART_Transmit(&huart2, buf, 1, 100);
 80008fe:	f107 010c 	add.w	r1, r7, #12
 8000902:	2364      	movs	r3, #100	; 0x64
 8000904:	2201      	movs	r2, #1
 8000906:	4804      	ldr	r0, [pc, #16]	; (8000918 <__io_putchar+0x28>)
 8000908:	f001 ff77 	bl	80027fa <HAL_UART_Transmit>
 800090c:	4603      	mov	r3, r0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000e0 	.word	0x200000e0

0800091c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b085      	sub	sp, #20
 8000920:	af02      	add	r7, sp, #8
 8000922:	6078      	str	r0, [r7, #4]
		sec2++;
 8000924:	4b5c      	ldr	r3, [pc, #368]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	3301      	adds	r3, #1
 800092a:	b2da      	uxtb	r2, r3
 800092c:	4b5a      	ldr	r3, [pc, #360]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800092e:	701a      	strb	r2, [r3, #0]
		if(!(sec2 %= 10)){
 8000930:	4b59      	ldr	r3, [pc, #356]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000932:	781a      	ldrb	r2, [r3, #0]
 8000934:	4b59      	ldr	r3, [pc, #356]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000936:	fba3 1302 	umull	r1, r3, r3, r2
 800093a:	08d9      	lsrs	r1, r3, #3
 800093c:	460b      	mov	r3, r1
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	440b      	add	r3, r1
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b53      	ldr	r3, [pc, #332]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800094a:	701a      	strb	r2, [r3, #0]
 800094c:	4b52      	ldr	r3, [pc, #328]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d169      	bne.n	8000a28 <HAL_TIM_PeriodElapsedCallback+0x10c>
			sec1++;
 8000954:	4b52      	ldr	r3, [pc, #328]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b50      	ldr	r3, [pc, #320]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800095e:	701a      	strb	r2, [r3, #0]
			if(!(sec1 %= 6)){
 8000960:	4b4f      	ldr	r3, [pc, #316]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000962:	781a      	ldrb	r2, [r3, #0]
 8000964:	4b4f      	ldr	r3, [pc, #316]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000966:	fba3 1302 	umull	r1, r3, r3, r2
 800096a:	0899      	lsrs	r1, r3, #2
 800096c:	460b      	mov	r3, r1
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	440b      	add	r3, r1
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b49      	ldr	r3, [pc, #292]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800097a:	701a      	strb	r2, [r3, #0]
 800097c:	4b48      	ldr	r3, [pc, #288]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d151      	bne.n	8000a28 <HAL_TIM_PeriodElapsedCallback+0x10c>
				min2++;
 8000984:	4b48      	ldr	r3, [pc, #288]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	b2da      	uxtb	r2, r3
 800098c:	4b46      	ldr	r3, [pc, #280]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800098e:	701a      	strb	r2, [r3, #0]
				if(!(min2 %= 10)){
 8000990:	4b45      	ldr	r3, [pc, #276]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000992:	781a      	ldrb	r2, [r3, #0]
 8000994:	4b41      	ldr	r3, [pc, #260]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000996:	fba3 1302 	umull	r1, r3, r3, r2
 800099a:	08d9      	lsrs	r1, r3, #3
 800099c:	460b      	mov	r3, r1
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	440b      	add	r3, r1
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b3f      	ldr	r3, [pc, #252]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80009aa:	701a      	strb	r2, [r3, #0]
 80009ac:	4b3e      	ldr	r3, [pc, #248]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d139      	bne.n	8000a28 <HAL_TIM_PeriodElapsedCallback+0x10c>
					min1++;
 80009b4:	4b3d      	ldr	r3, [pc, #244]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x190>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b3b      	ldr	r3, [pc, #236]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x190>)
 80009be:	701a      	strb	r2, [r3, #0]
					if(!(min1 %= 6)){
 80009c0:	4b3a      	ldr	r3, [pc, #232]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x190>)
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	4b37      	ldr	r3, [pc, #220]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80009c6:	fba3 1302 	umull	r1, r3, r3, r2
 80009ca:	0899      	lsrs	r1, r3, #2
 80009cc:	460b      	mov	r3, r1
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	440b      	add	r3, r1
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	4b34      	ldr	r3, [pc, #208]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x190>)
 80009da:	701a      	strb	r2, [r3, #0]
 80009dc:	4b33      	ldr	r3, [pc, #204]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x190>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d121      	bne.n	8000a28 <HAL_TIM_PeriodElapsedCallback+0x10c>
						hour++;
 80009e4:	4b32      	ldr	r3, [pc, #200]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80009ee:	701a      	strb	r2, [r3, #0]
						if(!(hour %= 12)){
 80009f0:	4b2f      	ldr	r3, [pc, #188]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80009f2:	781a      	ldrb	r2, [r3, #0]
 80009f4:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80009f6:	fba3 1302 	umull	r1, r3, r3, r2
 80009fa:	08d9      	lsrs	r1, r3, #3
 80009fc:	460b      	mov	r3, r1
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	440b      	add	r3, r1
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d109      	bne.n	8000a28 <HAL_TIM_PeriodElapsedCallback+0x10c>
							Meridiem = !Meridiem;
 8000a14:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	bf0c      	ite	eq
 8000a1c:	2301      	moveq	r3, #1
 8000a1e:	2300      	movne	r3, #0
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	461a      	mov	r2, r3
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000a26:	701a      	strb	r2, [r3, #0]
					}

				}
			}
		}
		if(Meridiem == AM){
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d115      	bne.n	8000a5c <HAL_TIM_PeriodElapsedCallback+0x140>
			printf("%d:%d%d:%d%d AM\r\n", hour, min1, min2, sec1, sec2);
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	461c      	mov	r4, r3
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	9200      	str	r2, [sp, #0]
 8000a50:	4623      	mov	r3, r4
 8000a52:	4602      	mov	r2, r0
 8000a54:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000a56:	f002 fb61 	bl	800311c <iprintf>
		}
		else if(Meridiem == PM){
			printf("%d:%d%d:%d%d PM\r\n", hour, min1, min2, sec1, sec2);
		}
}
 8000a5a:	e018      	b.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x172>
		else if(Meridiem == PM){
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d114      	bne.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x172>
			printf("%d:%d%d:%d%d PM\r\n", hour, min1, min2, sec1, sec2);
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461c      	mov	r4, r3
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	9301      	str	r3, [sp, #4]
 8000a82:	9200      	str	r2, [sp, #0]
 8000a84:	4623      	mov	r3, r4
 8000a86:	4602      	mov	r2, r0
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000a8a:	f002 fb47 	bl	800311c <iprintf>
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd90      	pop	{r4, r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000090 	.word	0x20000090
 8000a9c:	cccccccd 	.word	0xcccccccd
 8000aa0:	20000003 	.word	0x20000003
 8000aa4:	aaaaaaab 	.word	0xaaaaaaab
 8000aa8:	20000002 	.word	0x20000002
 8000aac:	20000001 	.word	0x20000001
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000091 	.word	0x20000091
 8000ab8:	08003ff4 	.word	0x08003ff4
 8000abc:	08004008 	.word	0x08004008

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
	...

08000ad0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_MspInit+0x4c>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b0e:	2007      	movs	r0, #7
 8000b10:	f000 fb26 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <HAL_TIM_OC_MspInit+0x48>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d115      	bne.n	8000b5e <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <HAL_TIM_OC_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a0c      	ldr	r2, [pc, #48]	; (8000b6c <HAL_TIM_OC_MspInit+0x4c>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <HAL_TIM_OC_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	2019      	movs	r0, #25
 8000b54:	f000 fb0f 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b58:	2019      	movs	r0, #25
 8000b5a:	f000 fb28 	bl	80011ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40010000 	.word	0x40010000
 8000b6c:	40023800 	.word	0x40023800

08000b70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <HAL_TIM_MspPostInit+0x68>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d11e      	bne.n	8000bd0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_TIM_MspPostInit+0x6c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <HAL_TIM_MspPostInit+0x6c>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_TIM_MspPostInit+0x6c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_TIM_MspPostInit+0x70>)
 8000bcc:	f000 fb0a 	bl	80011e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40010000 	.word	0x40010000
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <HAL_UART_MspInit+0x84>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d12b      	bne.n	8000c5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_UART_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c3e:	230c      	movs	r3, #12
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <HAL_UART_MspInit+0x8c>)
 8000c5a:	f000 fac3 	bl	80011e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40004400 	.word	0x40004400
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 f938 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cd6:	f001 f8d2 	bl	8001e7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200000a0 	.word	0x200000a0

08000ce4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	e00a      	b.n	8000d0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cf6:	f3af 8000 	nop.w
 8000cfa:	4601      	mov	r1, r0
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	60ba      	str	r2, [r7, #8]
 8000d02:	b2ca      	uxtb	r2, r1
 8000d04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbf0      	blt.n	8000cf6 <_read+0x12>
	}

return len;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	e009      	b.n	8000d44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	60ba      	str	r2, [r7, #8]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fdd9 	bl	80008f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dbf1      	blt.n	8000d30 <_write+0x12>
	}
	return len;
 8000d4c:	687b      	ldr	r3, [r7, #4]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_close>:

int _close(int file)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d7e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_isatty>:

int _isatty(int file)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
	return 1;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
	return 0;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <_sbrk+0x50>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x16>
		heap_end = &end;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <_sbrk+0x50>)
 8000dd2:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <_sbrk+0x54>)
 8000dd4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <_sbrk+0x50>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <_sbrk+0x50>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4413      	add	r3, r2
 8000de4:	466a      	mov	r2, sp
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d907      	bls.n	8000dfa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000dea:	f002 f965 	bl	80030b8 <__errno>
 8000dee:	4602      	mov	r2, r0
 8000df0:	230c      	movs	r3, #12
 8000df2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000df4:	f04f 33ff 	mov.w	r3, #4294967295
 8000df8:	e006      	b.n	8000e08 <_sbrk+0x48>
	}

	heap_end += incr;
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <_sbrk+0x50>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <_sbrk+0x50>)
 8000e04:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000094 	.word	0x20000094
 8000e14:	20000128 	.word	0x20000128

08000e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <SystemInit+0x28>)
 8000e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e22:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <SystemInit+0x28>)
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <SystemInit+0x28>)
 8000e2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e32:	609a      	str	r2, [r3, #8]
#endif
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e4a:	e003      	b.n	8000e54 <LoopCopyDataInit>

08000e4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e52:	3104      	adds	r1, #4

08000e54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e54:	480b      	ldr	r0, [pc, #44]	; (8000e84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e5c:	d3f6      	bcc.n	8000e4c <CopyDataInit>
  ldr  r2, =_sbss
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e60:	e002      	b.n	8000e68 <LoopFillZerobss>

08000e62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e64:	f842 3b04 	str.w	r3, [r2], #4

08000e68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e6c:	d3f9      	bcc.n	8000e62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e6e:	f7ff ffd3 	bl	8000e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e72:	f002 f927 	bl	80030c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e76:	f7ff fb83 	bl	8000580 <main>
  bx  lr    
 8000e7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e7c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000e80:	080040dc 	.word	0x080040dc
  ldr  r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e88:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000e8c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000e90:	20000128 	.word	0x20000128

08000e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <HAL_Init+0x40>)
 8000ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_Init+0x40>)
 8000eae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_Init+0x40>)
 8000eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f94d 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 f808 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff fe00 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023c00 	.word	0x40023c00

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x54>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f965 	bl	80011ca <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f000 f92d 	bl	8001176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <HAL_InitTick+0x5c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000004 	.word	0x20000004
 8000f34:	2000000c 	.word	0x2000000c
 8000f38:	20000008 	.word	0x20000008

08000f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x20>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x24>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <HAL_IncTick+0x24>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	2000000c 	.word	0x2000000c
 8000f60:	20000120 	.word	0x20000120

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000120 	.word	0x20000120

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff ffee 	bl	8000f64 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d005      	beq.n	8000fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <HAL_Delay+0x40>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa2:	bf00      	nop
 8000fa4:	f7ff ffde 	bl	8000f64 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8f7      	bhi.n	8000fa4 <HAL_Delay+0x28>
  {
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2000000c 	.word	0x2000000c

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	; (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800112c:	d301      	bcc.n	8001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e00f      	b.n	8001152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <SysTick_Config+0x40>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f7ff ff8e 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <SysTick_Config+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <SysTick_Config+0x40>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff29 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff3e 	bl	8001008 <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff8e 	bl	80010b4 <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff5d 	bl	8001060 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff31 	bl	8001024 <__NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffa2 	bl	800111c <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	; 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e159      	b.n	80014b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001200:	2201      	movs	r2, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	429a      	cmp	r2, r3
 800121a:	f040 8148 	bne.w	80014ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d00b      	beq.n	800123e <HAL_GPIO_Init+0x5a>
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d007      	beq.n	800123e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001232:	2b11      	cmp	r3, #17
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b12      	cmp	r3, #18
 800123c:	d130      	bne.n	80012a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	091b      	lsrs	r3, r3, #4
 800128a:	f003 0201 	and.w	r2, r3, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0xfc>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b12      	cmp	r3, #18
 80012de:	d123      	bne.n	8001328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	08da      	lsrs	r2, r3, #3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3208      	adds	r2, #8
 80012e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	08da      	lsrs	r2, r3, #3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3208      	adds	r2, #8
 8001322:	69b9      	ldr	r1, [r7, #24]
 8001324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0203 	and.w	r2, r3, #3
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80a2 	beq.w	80014ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b56      	ldr	r3, [pc, #344]	; (80014c8 <HAL_GPIO_Init+0x2e4>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4a55      	ldr	r2, [pc, #340]	; (80014c8 <HAL_GPIO_Init+0x2e4>)
 8001374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b53      	ldr	r3, [pc, #332]	; (80014c8 <HAL_GPIO_Init+0x2e4>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001386:	4a51      	ldr	r2, [pc, #324]	; (80014cc <HAL_GPIO_Init+0x2e8>)
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	220f      	movs	r2, #15
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a48      	ldr	r2, [pc, #288]	; (80014d0 <HAL_GPIO_Init+0x2ec>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d019      	beq.n	80013e6 <HAL_GPIO_Init+0x202>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a47      	ldr	r2, [pc, #284]	; (80014d4 <HAL_GPIO_Init+0x2f0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d013      	beq.n	80013e2 <HAL_GPIO_Init+0x1fe>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a46      	ldr	r2, [pc, #280]	; (80014d8 <HAL_GPIO_Init+0x2f4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00d      	beq.n	80013de <HAL_GPIO_Init+0x1fa>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a45      	ldr	r2, [pc, #276]	; (80014dc <HAL_GPIO_Init+0x2f8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d007      	beq.n	80013da <HAL_GPIO_Init+0x1f6>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a44      	ldr	r2, [pc, #272]	; (80014e0 <HAL_GPIO_Init+0x2fc>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_GPIO_Init+0x1f2>
 80013d2:	2304      	movs	r3, #4
 80013d4:	e008      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013d6:	2307      	movs	r3, #7
 80013d8:	e006      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013da:	2303      	movs	r3, #3
 80013dc:	e004      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013de:	2302      	movs	r3, #2
 80013e0:	e002      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013e6:	2300      	movs	r3, #0
 80013e8:	69fa      	ldr	r2, [r7, #28]
 80013ea:	f002 0203 	and.w	r2, r2, #3
 80013ee:	0092      	lsls	r2, r2, #2
 80013f0:	4093      	lsls	r3, r2
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f8:	4934      	ldr	r1, [pc, #208]	; (80014cc <HAL_GPIO_Init+0x2e8>)
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	3302      	adds	r3, #2
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001406:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <HAL_GPIO_Init+0x300>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800142a:	4a2e      	ldr	r2, [pc, #184]	; (80014e4 <HAL_GPIO_Init+0x300>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001430:	4b2c      	ldr	r3, [pc, #176]	; (80014e4 <HAL_GPIO_Init+0x300>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001454:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <HAL_GPIO_Init+0x300>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800145a:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <HAL_GPIO_Init+0x300>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800147e:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <HAL_GPIO_Init+0x300>)
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_GPIO_Init+0x300>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <HAL_GPIO_Init+0x300>)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3301      	adds	r3, #1
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	2b0f      	cmp	r3, #15
 80014b8:	f67f aea2 	bls.w	8001200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014bc:	bf00      	nop
 80014be:	3724      	adds	r7, #36	; 0x24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40013800 	.word	0x40013800
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020400 	.word	0x40020400
 80014d8:	40020800 	.word	0x40020800
 80014dc:	40020c00 	.word	0x40020c00
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40013c00 	.word	0x40013c00

080014e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
 80014f4:	4613      	mov	r3, r2
 80014f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001504:	e003      	b.n	800150e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	041a      	lsls	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	619a      	str	r2, [r3, #24]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e25b      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d075      	beq.n	8001626 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800153a:	4ba3      	ldr	r3, [pc, #652]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b04      	cmp	r3, #4
 8001544:	d00c      	beq.n	8001560 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001546:	4ba0      	ldr	r3, [pc, #640]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800154e:	2b08      	cmp	r3, #8
 8001550:	d112      	bne.n	8001578 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001552:	4b9d      	ldr	r3, [pc, #628]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800155e:	d10b      	bne.n	8001578 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	4b99      	ldr	r3, [pc, #612]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d05b      	beq.n	8001624 <HAL_RCC_OscConfig+0x108>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d157      	bne.n	8001624 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e236      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001580:	d106      	bne.n	8001590 <HAL_RCC_OscConfig+0x74>
 8001582:	4b91      	ldr	r3, [pc, #580]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a90      	ldr	r2, [pc, #576]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e01d      	b.n	80015cc <HAL_RCC_OscConfig+0xb0>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x98>
 800159a:	4b8b      	ldr	r3, [pc, #556]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a8a      	ldr	r2, [pc, #552]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b88      	ldr	r3, [pc, #544]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a87      	ldr	r2, [pc, #540]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0xb0>
 80015b4:	4b84      	ldr	r3, [pc, #528]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a83      	ldr	r2, [pc, #524]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80015ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a80      	ldr	r2, [pc, #512]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80015c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d013      	beq.n	80015fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff fcc6 	bl	8000f64 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff fcc2 	bl	8000f64 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	; 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e1fb      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	4b76      	ldr	r3, [pc, #472]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0xc0>
 80015fa:	e014      	b.n	8001626 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fcb2 	bl	8000f64 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001604:	f7ff fcae 	bl	8000f64 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	; 0x64
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e1e7      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001616:	4b6c      	ldr	r3, [pc, #432]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0xe8>
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d063      	beq.n	80016fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001632:	4b65      	ldr	r3, [pc, #404]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00b      	beq.n	8001656 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800163e:	4b62      	ldr	r3, [pc, #392]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001646:	2b08      	cmp	r3, #8
 8001648:	d11c      	bne.n	8001684 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800164a:	4b5f      	ldr	r3, [pc, #380]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d116      	bne.n	8001684 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001656:	4b5c      	ldr	r3, [pc, #368]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d005      	beq.n	800166e <HAL_RCC_OscConfig+0x152>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d001      	beq.n	800166e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e1bb      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166e:	4b56      	ldr	r3, [pc, #344]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4952      	ldr	r1, [pc, #328]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 800167e:	4313      	orrs	r3, r2
 8001680:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001682:	e03a      	b.n	80016fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d020      	beq.n	80016ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800168c:	4b4f      	ldr	r3, [pc, #316]	; (80017cc <HAL_RCC_OscConfig+0x2b0>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001692:	f7ff fc67 	bl	8000f64 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169a:	f7ff fc63 	bl	8000f64 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e19c      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ac:	4b46      	ldr	r3, [pc, #280]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0f0      	beq.n	800169a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b8:	4b43      	ldr	r3, [pc, #268]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4940      	ldr	r1, [pc, #256]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	600b      	str	r3, [r1, #0]
 80016cc:	e015      	b.n	80016fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ce:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <HAL_RCC_OscConfig+0x2b0>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fc46 	bl	8000f64 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016dc:	f7ff fc42 	bl	8000f64 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e17b      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ee:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d030      	beq.n	8001768 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d016      	beq.n	800173c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170e:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <HAL_RCC_OscConfig+0x2b4>)
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001714:	f7ff fc26 	bl	8000f64 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800171c:	f7ff fc22 	bl	8000f64 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e15b      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172e:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x200>
 800173a:	e015      	b.n	8001768 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173c:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <HAL_RCC_OscConfig+0x2b4>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001742:	f7ff fc0f 	bl	8000f64 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800174a:	f7ff fc0b 	bl	8000f64 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e144      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 800175e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 80a0 	beq.w	80018b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10f      	bne.n	80017a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017a2:	2301      	movs	r3, #1
 80017a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_RCC_OscConfig+0x2b8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d121      	bne.n	80017f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_RCC_OscConfig+0x2b8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <HAL_RCC_OscConfig+0x2b8>)
 80017b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017be:	f7ff fbd1 	bl	8000f64 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c4:	e011      	b.n	80017ea <HAL_RCC_OscConfig+0x2ce>
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	42470000 	.word	0x42470000
 80017d0:	42470e80 	.word	0x42470e80
 80017d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d8:	f7ff fbc4 	bl	8000f64 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e0fd      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ea:	4b81      	ldr	r3, [pc, #516]	; (80019f0 <HAL_RCC_OscConfig+0x4d4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d106      	bne.n	800180c <HAL_RCC_OscConfig+0x2f0>
 80017fe:	4b7d      	ldr	r3, [pc, #500]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	4a7c      	ldr	r2, [pc, #496]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6713      	str	r3, [r2, #112]	; 0x70
 800180a:	e01c      	b.n	8001846 <HAL_RCC_OscConfig+0x32a>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b05      	cmp	r3, #5
 8001812:	d10c      	bne.n	800182e <HAL_RCC_OscConfig+0x312>
 8001814:	4b77      	ldr	r3, [pc, #476]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001818:	4a76      	ldr	r2, [pc, #472]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6713      	str	r3, [r2, #112]	; 0x70
 8001820:	4b74      	ldr	r3, [pc, #464]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 8001822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001824:	4a73      	ldr	r2, [pc, #460]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6713      	str	r3, [r2, #112]	; 0x70
 800182c:	e00b      	b.n	8001846 <HAL_RCC_OscConfig+0x32a>
 800182e:	4b71      	ldr	r3, [pc, #452]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 8001830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001832:	4a70      	ldr	r2, [pc, #448]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 8001834:	f023 0301 	bic.w	r3, r3, #1
 8001838:	6713      	str	r3, [r2, #112]	; 0x70
 800183a:	4b6e      	ldr	r3, [pc, #440]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183e:	4a6d      	ldr	r2, [pc, #436]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 8001840:	f023 0304 	bic.w	r3, r3, #4
 8001844:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d015      	beq.n	800187a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184e:	f7ff fb89 	bl	8000f64 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7ff fb85 	bl	8000f64 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	; 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e0bc      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186c:	4b61      	ldr	r3, [pc, #388]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 800186e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0ee      	beq.n	8001856 <HAL_RCC_OscConfig+0x33a>
 8001878:	e014      	b.n	80018a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187a:	f7ff fb73 	bl	8000f64 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001880:	e00a      	b.n	8001898 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001882:	f7ff fb6f 	bl	8000f64 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001890:	4293      	cmp	r3, r2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e0a6      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001898:	4b56      	ldr	r3, [pc, #344]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 800189a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1ee      	bne.n	8001882 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d105      	bne.n	80018b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018aa:	4b52      	ldr	r3, [pc, #328]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	4a51      	ldr	r2, [pc, #324]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 80018b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 8092 	beq.w	80019e4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018c0:	4b4c      	ldr	r3, [pc, #304]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d05c      	beq.n	8001986 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d141      	bne.n	8001958 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d4:	4b48      	ldr	r3, [pc, #288]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff fb43 	bl	8000f64 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e2:	f7ff fb3f 	bl	8000f64 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e078      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f4:	4b3f      	ldr	r3, [pc, #252]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f0      	bne.n	80018e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69da      	ldr	r2, [r3, #28]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	019b      	lsls	r3, r3, #6
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	085b      	lsrs	r3, r3, #1
 8001918:	3b01      	subs	r3, #1
 800191a:	041b      	lsls	r3, r3, #16
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	061b      	lsls	r3, r3, #24
 8001924:	4933      	ldr	r1, [pc, #204]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 8001926:	4313      	orrs	r3, r2
 8001928:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800192a:	4b33      	ldr	r3, [pc, #204]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff fb18 	bl	8000f64 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff fb14 	bl	8000f64 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e04d      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194a:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x41c>
 8001956:	e045      	b.n	80019e4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001958:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <HAL_RCC_OscConfig+0x4dc>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195e:	f7ff fb01 	bl	8000f64 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001966:	f7ff fafd 	bl	8000f64 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e036      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f0      	bne.n	8001966 <HAL_RCC_OscConfig+0x44a>
 8001984:	e02e      	b.n	80019e4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e029      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_RCC_OscConfig+0x4d8>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d11c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d115      	bne.n	80019e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019ba:	4013      	ands	r3, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d10d      	bne.n	80019e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d106      	bne.n	80019e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40007000 	.word	0x40007000
 80019f4:	40023800 	.word	0x40023800
 80019f8:	42470060 	.word	0x42470060

080019fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0cc      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a10:	4b68      	ldr	r3, [pc, #416]	; (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 030f 	and.w	r3, r3, #15
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d90c      	bls.n	8001a38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	4b65      	ldr	r3, [pc, #404]	; (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b63      	ldr	r3, [pc, #396]	; (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0b8      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d020      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a50:	4b59      	ldr	r3, [pc, #356]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	4a58      	ldr	r2, [pc, #352]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a68:	4b53      	ldr	r3, [pc, #332]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4a52      	ldr	r2, [pc, #328]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a74:	4b50      	ldr	r3, [pc, #320]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	494d      	ldr	r1, [pc, #308]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d044      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	4b47      	ldr	r3, [pc, #284]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d119      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e07f      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d003      	beq.n	8001aba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d107      	bne.n	8001aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aba:	4b3f      	ldr	r3, [pc, #252]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e06f      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aca:	4b3b      	ldr	r3, [pc, #236]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e067      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ada:	4b37      	ldr	r3, [pc, #220]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f023 0203 	bic.w	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4934      	ldr	r1, [pc, #208]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aec:	f7ff fa3a 	bl	8000f64 <HAL_GetTick>
 8001af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af4:	f7ff fa36 	bl	8000f64 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e04f      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0a:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 020c 	and.w	r2, r3, #12
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d1eb      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b1c:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d20c      	bcs.n	8001b44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e032      	b.n	8001baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4916      	ldr	r1, [pc, #88]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d009      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	490e      	ldr	r1, [pc, #56]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b82:	f000 f821 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8001b86:	4601      	mov	r1, r0
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	5cd3      	ldrb	r3, [r2, r3]
 8001b96:	fa21 f303 	lsr.w	r3, r1, r3
 8001b9a:	4a09      	ldr	r2, [pc, #36]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f99a 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023c00 	.word	0x40023c00
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	0800401c 	.word	0x0800401c
 8001bc0:	20000004 	.word	0x20000004
 8001bc4:	20000008 	.word	0x20000008

08001bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bde:	4b63      	ldr	r3, [pc, #396]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d007      	beq.n	8001bfa <HAL_RCC_GetSysClockFreq+0x32>
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d008      	beq.n	8001c00 <HAL_RCC_GetSysClockFreq+0x38>
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f040 80b4 	bne.w	8001d5c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf4:	4b5e      	ldr	r3, [pc, #376]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001bf6:	60bb      	str	r3, [r7, #8]
       break;
 8001bf8:	e0b3      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bfa:	4b5e      	ldr	r3, [pc, #376]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001bfc:	60bb      	str	r3, [r7, #8]
      break;
 8001bfe:	e0b0      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c00:	4b5a      	ldr	r3, [pc, #360]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c0a:	4b58      	ldr	r3, [pc, #352]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d04a      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c16:	4b55      	ldr	r3, [pc, #340]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	099b      	lsrs	r3, r3, #6
 8001c1c:	f04f 0400 	mov.w	r4, #0
 8001c20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	ea03 0501 	and.w	r5, r3, r1
 8001c2c:	ea04 0602 	and.w	r6, r4, r2
 8001c30:	4629      	mov	r1, r5
 8001c32:	4632      	mov	r2, r6
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	f04f 0400 	mov.w	r4, #0
 8001c3c:	0154      	lsls	r4, r2, #5
 8001c3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c42:	014b      	lsls	r3, r1, #5
 8001c44:	4619      	mov	r1, r3
 8001c46:	4622      	mov	r2, r4
 8001c48:	1b49      	subs	r1, r1, r5
 8001c4a:	eb62 0206 	sbc.w	r2, r2, r6
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	f04f 0400 	mov.w	r4, #0
 8001c56:	0194      	lsls	r4, r2, #6
 8001c58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c5c:	018b      	lsls	r3, r1, #6
 8001c5e:	1a5b      	subs	r3, r3, r1
 8001c60:	eb64 0402 	sbc.w	r4, r4, r2
 8001c64:	f04f 0100 	mov.w	r1, #0
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	00e2      	lsls	r2, r4, #3
 8001c6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c72:	00d9      	lsls	r1, r3, #3
 8001c74:	460b      	mov	r3, r1
 8001c76:	4614      	mov	r4, r2
 8001c78:	195b      	adds	r3, r3, r5
 8001c7a:	eb44 0406 	adc.w	r4, r4, r6
 8001c7e:	f04f 0100 	mov.w	r1, #0
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	0262      	lsls	r2, r4, #9
 8001c88:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001c8c:	0259      	lsls	r1, r3, #9
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4614      	mov	r4, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	4621      	mov	r1, r4
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f04f 0400 	mov.w	r4, #0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4623      	mov	r3, r4
 8001ca0:	f7fe faee 	bl	8000280 <__aeabi_uldivmod>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	460c      	mov	r4, r1
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	e049      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cac:	4b2f      	ldr	r3, [pc, #188]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	099b      	lsrs	r3, r3, #6
 8001cb2:	f04f 0400 	mov.w	r4, #0
 8001cb6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	ea03 0501 	and.w	r5, r3, r1
 8001cc2:	ea04 0602 	and.w	r6, r4, r2
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	4632      	mov	r2, r6
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	f04f 0400 	mov.w	r4, #0
 8001cd2:	0154      	lsls	r4, r2, #5
 8001cd4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cd8:	014b      	lsls	r3, r1, #5
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4622      	mov	r2, r4
 8001cde:	1b49      	subs	r1, r1, r5
 8001ce0:	eb62 0206 	sbc.w	r2, r2, r6
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	f04f 0400 	mov.w	r4, #0
 8001cec:	0194      	lsls	r4, r2, #6
 8001cee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cf2:	018b      	lsls	r3, r1, #6
 8001cf4:	1a5b      	subs	r3, r3, r1
 8001cf6:	eb64 0402 	sbc.w	r4, r4, r2
 8001cfa:	f04f 0100 	mov.w	r1, #0
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	00e2      	lsls	r2, r4, #3
 8001d04:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d08:	00d9      	lsls	r1, r3, #3
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4614      	mov	r4, r2
 8001d0e:	195b      	adds	r3, r3, r5
 8001d10:	eb44 0406 	adc.w	r4, r4, r6
 8001d14:	f04f 0100 	mov.w	r1, #0
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	02a2      	lsls	r2, r4, #10
 8001d1e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d22:	0299      	lsls	r1, r3, #10
 8001d24:	460b      	mov	r3, r1
 8001d26:	4614      	mov	r4, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	4621      	mov	r1, r4
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f04f 0400 	mov.w	r4, #0
 8001d32:	461a      	mov	r2, r3
 8001d34:	4623      	mov	r3, r4
 8001d36:	f7fe faa3 	bl	8000280 <__aeabi_uldivmod>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	460c      	mov	r4, r1
 8001d3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	0c1b      	lsrs	r3, r3, #16
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	60bb      	str	r3, [r7, #8]
      break;
 8001d5a:	e002      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d5e:	60bb      	str	r3, [r7, #8]
      break;
 8001d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d62:	68bb      	ldr	r3, [r7, #8]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	00f42400 	.word	0x00f42400
 8001d74:	007a1200 	.word	0x007a1200

08001d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000004 	.word	0x20000004

08001d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001d98:	4601      	mov	r1, r0
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	0a9b      	lsrs	r3, r3, #10
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	4a03      	ldr	r2, [pc, #12]	; (8001db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da6:	5cd3      	ldrb	r3, [r2, r3]
 8001da8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	0800402c 	.word	0x0800402c

08001db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dbc:	f7ff ffdc 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001dc0:	4601      	mov	r1, r0
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	0b5b      	lsrs	r3, r3, #13
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	4a03      	ldr	r2, [pc, #12]	; (8001ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dce:	5cd3      	ldrb	r3, [r2, r3]
 8001dd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	0800402c 	.word	0x0800402c

08001de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d007      	beq.n	8001e1a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0201 	orr.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e01d      	b.n	8001e76 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d106      	bne.n	8001e54 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7fe fe66 	bl	8000b20 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3304      	adds	r3, #4
 8001e64:	4619      	mov	r1, r3
 8001e66:	4610      	mov	r0, r2
 8001e68:	f000 f99a 	bl	80021a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d122      	bne.n	8001eda <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d11b      	bne.n	8001eda <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f06f 0202 	mvn.w	r2, #2
 8001eaa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f94f 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
 8001ec6:	e005      	b.n	8001ed4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f941 	bl	8002150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f952 	bl	8002178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d122      	bne.n	8001f2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d11b      	bne.n	8001f2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f06f 0204 	mvn.w	r2, #4
 8001efe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f925 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
 8001f1a:	e005      	b.n	8001f28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f917 	bl	8002150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f928 	bl	8002178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d122      	bne.n	8001f82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d11b      	bne.n	8001f82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f06f 0208 	mvn.w	r2, #8
 8001f52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2204      	movs	r2, #4
 8001f58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f8fb 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
 8001f6e:	e005      	b.n	8001f7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f8ed 	bl	8002150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f8fe 	bl	8002178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b10      	cmp	r3, #16
 8001f8e:	d122      	bne.n	8001fd6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d11b      	bne.n	8001fd6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f06f 0210 	mvn.w	r2, #16
 8001fa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2208      	movs	r2, #8
 8001fac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f8d1 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
 8001fc2:	e005      	b.n	8001fd0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f8c3 	bl	8002150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f8d4 	bl	8002178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d10e      	bne.n	8002002 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d107      	bne.n	8002002 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f06f 0201 	mvn.w	r2, #1
 8001ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7fe fc8d 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200c:	2b80      	cmp	r3, #128	; 0x80
 800200e:	d10e      	bne.n	800202e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201a:	2b80      	cmp	r3, #128	; 0x80
 800201c:	d107      	bne.n	800202e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fb8f 	bl	800274c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002038:	2b40      	cmp	r3, #64	; 0x40
 800203a:	d10e      	bne.n	800205a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002046:	2b40      	cmp	r3, #64	; 0x40
 8002048:	d107      	bne.n	800205a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f899 	bl	800218c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b20      	cmp	r3, #32
 8002066:	d10e      	bne.n	8002086 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	2b20      	cmp	r3, #32
 8002074:	d107      	bne.n	8002086 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f06f 0220 	mvn.w	r2, #32
 800207e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 fb59 	bl	8002738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_TIM_OC_ConfigChannel+0x1a>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e04e      	b.n	8002148 <HAL_TIM_OC_ConfigChannel+0xb8>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2202      	movs	r2, #2
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b0c      	cmp	r3, #12
 80020be:	d839      	bhi.n	8002134 <HAL_TIM_OC_ConfigChannel+0xa4>
 80020c0:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <HAL_TIM_OC_ConfigChannel+0x38>)
 80020c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c6:	bf00      	nop
 80020c8:	080020fd 	.word	0x080020fd
 80020cc:	08002135 	.word	0x08002135
 80020d0:	08002135 	.word	0x08002135
 80020d4:	08002135 	.word	0x08002135
 80020d8:	0800210b 	.word	0x0800210b
 80020dc:	08002135 	.word	0x08002135
 80020e0:	08002135 	.word	0x08002135
 80020e4:	08002135 	.word	0x08002135
 80020e8:	08002119 	.word	0x08002119
 80020ec:	08002135 	.word	0x08002135
 80020f0:	08002135 	.word	0x08002135
 80020f4:	08002135 	.word	0x08002135
 80020f8:	08002127 	.word	0x08002127
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f8cc 	bl	80022a0 <TIM_OC1_SetConfig>
      break;
 8002108:	e015      	b.n	8002136 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68b9      	ldr	r1, [r7, #8]
 8002110:	4618      	mov	r0, r3
 8002112:	f000 f92b 	bl	800236c <TIM_OC2_SetConfig>
      break;
 8002116:	e00e      	b.n	8002136 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68b9      	ldr	r1, [r7, #8]
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f990 	bl	8002444 <TIM_OC3_SetConfig>
      break;
 8002124:	e007      	b.n	8002136 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68b9      	ldr	r1, [r7, #8]
 800212c:	4618      	mov	r0, r3
 800212e:	f000 f9f3 	bl	8002518 <TIM_OC4_SetConfig>
      break;
 8002132:	e000      	b.n	8002136 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8002134:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a34      	ldr	r2, [pc, #208]	; (8002284 <TIM_Base_SetConfig+0xe4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00f      	beq.n	80021d8 <TIM_Base_SetConfig+0x38>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021be:	d00b      	beq.n	80021d8 <TIM_Base_SetConfig+0x38>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a31      	ldr	r2, [pc, #196]	; (8002288 <TIM_Base_SetConfig+0xe8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d007      	beq.n	80021d8 <TIM_Base_SetConfig+0x38>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a30      	ldr	r2, [pc, #192]	; (800228c <TIM_Base_SetConfig+0xec>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d003      	beq.n	80021d8 <TIM_Base_SetConfig+0x38>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a2f      	ldr	r2, [pc, #188]	; (8002290 <TIM_Base_SetConfig+0xf0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d108      	bne.n	80021ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a25      	ldr	r2, [pc, #148]	; (8002284 <TIM_Base_SetConfig+0xe4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01b      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f8:	d017      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a22      	ldr	r2, [pc, #136]	; (8002288 <TIM_Base_SetConfig+0xe8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a21      	ldr	r2, [pc, #132]	; (800228c <TIM_Base_SetConfig+0xec>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00f      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a20      	ldr	r2, [pc, #128]	; (8002290 <TIM_Base_SetConfig+0xf0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00b      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <TIM_Base_SetConfig+0xf4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d007      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a1e      	ldr	r2, [pc, #120]	; (8002298 <TIM_Base_SetConfig+0xf8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d003      	beq.n	800222a <TIM_Base_SetConfig+0x8a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a1d      	ldr	r2, [pc, #116]	; (800229c <TIM_Base_SetConfig+0xfc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d108      	bne.n	800223c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4313      	orrs	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a08      	ldr	r2, [pc, #32]	; (8002284 <TIM_Base_SetConfig+0xe4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d103      	bne.n	8002270 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	615a      	str	r2, [r3, #20]
}
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40010000 	.word	0x40010000
 8002288:	40000400 	.word	0x40000400
 800228c:	40000800 	.word	0x40000800
 8002290:	40000c00 	.word	0x40000c00
 8002294:	40014000 	.word	0x40014000
 8002298:	40014400 	.word	0x40014400
 800229c:	40014800 	.word	0x40014800

080022a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	f023 0201 	bic.w	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0303 	bic.w	r3, r3, #3
 80022d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f023 0302 	bic.w	r3, r3, #2
 80022e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a1c      	ldr	r2, [pc, #112]	; (8002368 <TIM_OC1_SetConfig+0xc8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d10c      	bne.n	8002316 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f023 0308 	bic.w	r3, r3, #8
 8002302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	4313      	orrs	r3, r2
 800230c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f023 0304 	bic.w	r3, r3, #4
 8002314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a13      	ldr	r2, [pc, #76]	; (8002368 <TIM_OC1_SetConfig+0xc8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d111      	bne.n	8002342 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800232c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	621a      	str	r2, [r3, #32]
}
 800235c:	bf00      	nop
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	40010000 	.word	0x40010000

0800236c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	f023 0210 	bic.w	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800239a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f023 0320 	bic.w	r3, r3, #32
 80023b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a1e      	ldr	r2, [pc, #120]	; (8002440 <TIM_OC2_SetConfig+0xd4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d10d      	bne.n	80023e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a15      	ldr	r2, [pc, #84]	; (8002440 <TIM_OC2_SetConfig+0xd4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d113      	bne.n	8002418 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	621a      	str	r2, [r3, #32]
}
 8002432:	bf00      	nop
 8002434:	371c      	adds	r7, #28
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40010000 	.word	0x40010000

08002444 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002444:	b480      	push	{r7}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f023 0303 	bic.w	r3, r3, #3
 800247a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800248c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	4313      	orrs	r3, r2
 8002498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <TIM_OC3_SetConfig+0xd0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d10d      	bne.n	80024be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a14      	ldr	r2, [pc, #80]	; (8002514 <TIM_OC3_SetConfig+0xd0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d113      	bne.n	80024ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	621a      	str	r2, [r3, #32]
}
 8002508:	bf00      	nop
 800250a:	371c      	adds	r7, #28
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	40010000 	.word	0x40010000

08002518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800254e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	021b      	lsls	r3, r3, #8
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	031b      	lsls	r3, r3, #12
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a10      	ldr	r2, [pc, #64]	; (80025b4 <TIM_OC4_SetConfig+0x9c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d109      	bne.n	800258c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800257e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	019b      	lsls	r3, r3, #6
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	621a      	str	r2, [r3, #32]
}
 80025a6:	bf00      	nop
 80025a8:	371c      	adds	r7, #28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40010000 	.word	0x40010000

080025b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e050      	b.n	8002672 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d018      	beq.n	8002646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261c:	d013      	beq.n	8002646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a18      	ldr	r2, [pc, #96]	; (8002684 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00e      	beq.n	8002646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a16      	ldr	r2, [pc, #88]	; (8002688 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d009      	beq.n	8002646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a15      	ldr	r2, [pc, #84]	; (800268c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d004      	beq.n	8002646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a13      	ldr	r2, [pc, #76]	; (8002690 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d10c      	bne.n	8002660 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800264c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	4313      	orrs	r3, r2
 8002656:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40010000 	.word	0x40010000
 8002684:	40000400 	.word	0x40000400
 8002688:	40000800 	.word	0x40000800
 800268c:	40000c00 	.word	0x40000c00
 8002690:	40014000 	.word	0x40014000

08002694 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e03d      	b.n	800272c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4313      	orrs	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e03f      	b.n	80027f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe fa2c 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2224      	movs	r2, #36	; 0x24
 8002790:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f90b 	bl	80029c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b088      	sub	sp, #32
 80027fe:	af02      	add	r7, sp, #8
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b20      	cmp	r3, #32
 8002818:	f040 8083 	bne.w	8002922 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_UART_Transmit+0x2e>
 8002822:	88fb      	ldrh	r3, [r7, #6]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e07b      	b.n	8002924 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_UART_Transmit+0x40>
 8002836:	2302      	movs	r3, #2
 8002838:	e074      	b.n	8002924 <HAL_UART_Transmit+0x12a>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2221      	movs	r2, #33	; 0x21
 800284c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002850:	f7fe fb88 	bl	8000f64 <HAL_GetTick>
 8002854:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	88fa      	ldrh	r2, [r7, #6]
 800285a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	88fa      	ldrh	r2, [r7, #6]
 8002860:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800286a:	e042      	b.n	80028f2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002882:	d122      	bne.n	80028ca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2200      	movs	r2, #0
 800288c:	2180      	movs	r1, #128	; 0x80
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f84c 	bl	800292c <UART_WaitOnFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e042      	b.n	8002924 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028b0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d103      	bne.n	80028c2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	3302      	adds	r3, #2
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	e017      	b.n	80028f2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3301      	adds	r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	e013      	b.n	80028f2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2200      	movs	r2, #0
 80028d2:	2180      	movs	r1, #128	; 0x80
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f829 	bl	800292c <UART_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e01f      	b.n	8002924 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	60ba      	str	r2, [r7, #8]
 80028ea:	781a      	ldrb	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1b7      	bne.n	800286c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2200      	movs	r2, #0
 8002904:	2140      	movs	r1, #64	; 0x40
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f810 	bl	800292c <UART_WaitOnFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e006      	b.n	8002924 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	e000      	b.n	8002924 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002922:	2302      	movs	r3, #2
  }
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	4613      	mov	r3, r2
 800293a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800293c:	e02c      	b.n	8002998 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d028      	beq.n	8002998 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d007      	beq.n	800295c <UART_WaitOnFlagUntilTimeout+0x30>
 800294c:	f7fe fb0a 	bl	8000f64 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	429a      	cmp	r2, r3
 800295a:	d21d      	bcs.n	8002998 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800296a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e00f      	b.n	80029b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	4013      	ands	r3, r2
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	bf0c      	ite	eq
 80029a8:	2301      	moveq	r3, #1
 80029aa:	2300      	movne	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d0c3      	beq.n	800293e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029c4:	b085      	sub	sp, #20
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002a02:	f023 030c 	bic.w	r3, r3, #12
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	68f9      	ldr	r1, [r7, #12]
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a2e:	f040 818b 	bne.w	8002d48 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4ac1      	ldr	r2, [pc, #772]	; (8002d3c <UART_SetConfig+0x37c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d005      	beq.n	8002a48 <UART_SetConfig+0x88>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4abf      	ldr	r2, [pc, #764]	; (8002d40 <UART_SetConfig+0x380>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	f040 80bd 	bne.w	8002bc2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a48:	f7ff f9b6 	bl	8001db8 <HAL_RCC_GetPCLK2Freq>
 8002a4c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	461d      	mov	r5, r3
 8002a52:	f04f 0600 	mov.w	r6, #0
 8002a56:	46a8      	mov	r8, r5
 8002a58:	46b1      	mov	r9, r6
 8002a5a:	eb18 0308 	adds.w	r3, r8, r8
 8002a5e:	eb49 0409 	adc.w	r4, r9, r9
 8002a62:	4698      	mov	r8, r3
 8002a64:	46a1      	mov	r9, r4
 8002a66:	eb18 0805 	adds.w	r8, r8, r5
 8002a6a:	eb49 0906 	adc.w	r9, r9, r6
 8002a6e:	f04f 0100 	mov.w	r1, #0
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a7a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a82:	4688      	mov	r8, r1
 8002a84:	4691      	mov	r9, r2
 8002a86:	eb18 0005 	adds.w	r0, r8, r5
 8002a8a:	eb49 0106 	adc.w	r1, r9, r6
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	461d      	mov	r5, r3
 8002a94:	f04f 0600 	mov.w	r6, #0
 8002a98:	196b      	adds	r3, r5, r5
 8002a9a:	eb46 0406 	adc.w	r4, r6, r6
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	4623      	mov	r3, r4
 8002aa2:	f7fd fbed 	bl	8000280 <__aeabi_uldivmod>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	460c      	mov	r4, r1
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4ba5      	ldr	r3, [pc, #660]	; (8002d44 <UART_SetConfig+0x384>)
 8002aae:	fba3 2302 	umull	r2, r3, r3, r2
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	461d      	mov	r5, r3
 8002abc:	f04f 0600 	mov.w	r6, #0
 8002ac0:	46a9      	mov	r9, r5
 8002ac2:	46b2      	mov	sl, r6
 8002ac4:	eb19 0309 	adds.w	r3, r9, r9
 8002ac8:	eb4a 040a 	adc.w	r4, sl, sl
 8002acc:	4699      	mov	r9, r3
 8002ace:	46a2      	mov	sl, r4
 8002ad0:	eb19 0905 	adds.w	r9, r9, r5
 8002ad4:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ad8:	f04f 0100 	mov.w	r1, #0
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ae4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ae8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002aec:	4689      	mov	r9, r1
 8002aee:	4692      	mov	sl, r2
 8002af0:	eb19 0005 	adds.w	r0, r9, r5
 8002af4:	eb4a 0106 	adc.w	r1, sl, r6
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	461d      	mov	r5, r3
 8002afe:	f04f 0600 	mov.w	r6, #0
 8002b02:	196b      	adds	r3, r5, r5
 8002b04:	eb46 0406 	adc.w	r4, r6, r6
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4623      	mov	r3, r4
 8002b0c:	f7fd fbb8 	bl	8000280 <__aeabi_uldivmod>
 8002b10:	4603      	mov	r3, r0
 8002b12:	460c      	mov	r4, r1
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b8b      	ldr	r3, [pc, #556]	; (8002d44 <UART_SetConfig+0x384>)
 8002b18:	fba3 1302 	umull	r1, r3, r3, r2
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	2164      	movs	r1, #100	; 0x64
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	3332      	adds	r3, #50	; 0x32
 8002b2a:	4a86      	ldr	r2, [pc, #536]	; (8002d44 <UART_SetConfig+0x384>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b38:	4498      	add	r8, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	461d      	mov	r5, r3
 8002b3e:	f04f 0600 	mov.w	r6, #0
 8002b42:	46a9      	mov	r9, r5
 8002b44:	46b2      	mov	sl, r6
 8002b46:	eb19 0309 	adds.w	r3, r9, r9
 8002b4a:	eb4a 040a 	adc.w	r4, sl, sl
 8002b4e:	4699      	mov	r9, r3
 8002b50:	46a2      	mov	sl, r4
 8002b52:	eb19 0905 	adds.w	r9, r9, r5
 8002b56:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b5a:	f04f 0100 	mov.w	r1, #0
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b6e:	4689      	mov	r9, r1
 8002b70:	4692      	mov	sl, r2
 8002b72:	eb19 0005 	adds.w	r0, r9, r5
 8002b76:	eb4a 0106 	adc.w	r1, sl, r6
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	461d      	mov	r5, r3
 8002b80:	f04f 0600 	mov.w	r6, #0
 8002b84:	196b      	adds	r3, r5, r5
 8002b86:	eb46 0406 	adc.w	r4, r6, r6
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4623      	mov	r3, r4
 8002b8e:	f7fd fb77 	bl	8000280 <__aeabi_uldivmod>
 8002b92:	4603      	mov	r3, r0
 8002b94:	460c      	mov	r4, r1
 8002b96:	461a      	mov	r2, r3
 8002b98:	4b6a      	ldr	r3, [pc, #424]	; (8002d44 <UART_SetConfig+0x384>)
 8002b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	2164      	movs	r1, #100	; 0x64
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	3332      	adds	r3, #50	; 0x32
 8002bac:	4a65      	ldr	r2, [pc, #404]	; (8002d44 <UART_SetConfig+0x384>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	f003 0207 	and.w	r2, r3, #7
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4442      	add	r2, r8
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	e26f      	b.n	80030a2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bc2:	f7ff f8e5 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8002bc6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	461d      	mov	r5, r3
 8002bcc:	f04f 0600 	mov.w	r6, #0
 8002bd0:	46a8      	mov	r8, r5
 8002bd2:	46b1      	mov	r9, r6
 8002bd4:	eb18 0308 	adds.w	r3, r8, r8
 8002bd8:	eb49 0409 	adc.w	r4, r9, r9
 8002bdc:	4698      	mov	r8, r3
 8002bde:	46a1      	mov	r9, r4
 8002be0:	eb18 0805 	adds.w	r8, r8, r5
 8002be4:	eb49 0906 	adc.w	r9, r9, r6
 8002be8:	f04f 0100 	mov.w	r1, #0
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002bf4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002bf8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002bfc:	4688      	mov	r8, r1
 8002bfe:	4691      	mov	r9, r2
 8002c00:	eb18 0005 	adds.w	r0, r8, r5
 8002c04:	eb49 0106 	adc.w	r1, r9, r6
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	461d      	mov	r5, r3
 8002c0e:	f04f 0600 	mov.w	r6, #0
 8002c12:	196b      	adds	r3, r5, r5
 8002c14:	eb46 0406 	adc.w	r4, r6, r6
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4623      	mov	r3, r4
 8002c1c:	f7fd fb30 	bl	8000280 <__aeabi_uldivmod>
 8002c20:	4603      	mov	r3, r0
 8002c22:	460c      	mov	r4, r1
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b47      	ldr	r3, [pc, #284]	; (8002d44 <UART_SetConfig+0x384>)
 8002c28:	fba3 2302 	umull	r2, r3, r3, r2
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	461d      	mov	r5, r3
 8002c36:	f04f 0600 	mov.w	r6, #0
 8002c3a:	46a9      	mov	r9, r5
 8002c3c:	46b2      	mov	sl, r6
 8002c3e:	eb19 0309 	adds.w	r3, r9, r9
 8002c42:	eb4a 040a 	adc.w	r4, sl, sl
 8002c46:	4699      	mov	r9, r3
 8002c48:	46a2      	mov	sl, r4
 8002c4a:	eb19 0905 	adds.w	r9, r9, r5
 8002c4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c52:	f04f 0100 	mov.w	r1, #0
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c66:	4689      	mov	r9, r1
 8002c68:	4692      	mov	sl, r2
 8002c6a:	eb19 0005 	adds.w	r0, r9, r5
 8002c6e:	eb4a 0106 	adc.w	r1, sl, r6
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	461d      	mov	r5, r3
 8002c78:	f04f 0600 	mov.w	r6, #0
 8002c7c:	196b      	adds	r3, r5, r5
 8002c7e:	eb46 0406 	adc.w	r4, r6, r6
 8002c82:	461a      	mov	r2, r3
 8002c84:	4623      	mov	r3, r4
 8002c86:	f7fd fafb 	bl	8000280 <__aeabi_uldivmod>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	460c      	mov	r4, r1
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <UART_SetConfig+0x384>)
 8002c92:	fba3 1302 	umull	r1, r3, r3, r2
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	2164      	movs	r1, #100	; 0x64
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	3332      	adds	r3, #50	; 0x32
 8002ca4:	4a27      	ldr	r2, [pc, #156]	; (8002d44 <UART_SetConfig+0x384>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cb2:	4498      	add	r8, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	461d      	mov	r5, r3
 8002cb8:	f04f 0600 	mov.w	r6, #0
 8002cbc:	46a9      	mov	r9, r5
 8002cbe:	46b2      	mov	sl, r6
 8002cc0:	eb19 0309 	adds.w	r3, r9, r9
 8002cc4:	eb4a 040a 	adc.w	r4, sl, sl
 8002cc8:	4699      	mov	r9, r3
 8002cca:	46a2      	mov	sl, r4
 8002ccc:	eb19 0905 	adds.w	r9, r9, r5
 8002cd0:	eb4a 0a06 	adc.w	sl, sl, r6
 8002cd4:	f04f 0100 	mov.w	r1, #0
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ce0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ce4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ce8:	4689      	mov	r9, r1
 8002cea:	4692      	mov	sl, r2
 8002cec:	eb19 0005 	adds.w	r0, r9, r5
 8002cf0:	eb4a 0106 	adc.w	r1, sl, r6
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	461d      	mov	r5, r3
 8002cfa:	f04f 0600 	mov.w	r6, #0
 8002cfe:	196b      	adds	r3, r5, r5
 8002d00:	eb46 0406 	adc.w	r4, r6, r6
 8002d04:	461a      	mov	r2, r3
 8002d06:	4623      	mov	r3, r4
 8002d08:	f7fd faba 	bl	8000280 <__aeabi_uldivmod>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	460c      	mov	r4, r1
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <UART_SetConfig+0x384>)
 8002d14:	fba3 1302 	umull	r1, r3, r3, r2
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	2164      	movs	r1, #100	; 0x64
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	3332      	adds	r3, #50	; 0x32
 8002d26:	4a07      	ldr	r2, [pc, #28]	; (8002d44 <UART_SetConfig+0x384>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	f003 0207 	and.w	r2, r3, #7
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4442      	add	r2, r8
 8002d38:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002d3a:	e1b2      	b.n	80030a2 <UART_SetConfig+0x6e2>
 8002d3c:	40011000 	.word	0x40011000
 8002d40:	40011400 	.word	0x40011400
 8002d44:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4ad7      	ldr	r2, [pc, #860]	; (80030ac <UART_SetConfig+0x6ec>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d005      	beq.n	8002d5e <UART_SetConfig+0x39e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4ad6      	ldr	r2, [pc, #856]	; (80030b0 <UART_SetConfig+0x6f0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	f040 80d1 	bne.w	8002f00 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d5e:	f7ff f82b 	bl	8001db8 <HAL_RCC_GetPCLK2Freq>
 8002d62:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	469a      	mov	sl, r3
 8002d68:	f04f 0b00 	mov.w	fp, #0
 8002d6c:	46d0      	mov	r8, sl
 8002d6e:	46d9      	mov	r9, fp
 8002d70:	eb18 0308 	adds.w	r3, r8, r8
 8002d74:	eb49 0409 	adc.w	r4, r9, r9
 8002d78:	4698      	mov	r8, r3
 8002d7a:	46a1      	mov	r9, r4
 8002d7c:	eb18 080a 	adds.w	r8, r8, sl
 8002d80:	eb49 090b 	adc.w	r9, r9, fp
 8002d84:	f04f 0100 	mov.w	r1, #0
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d90:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d94:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d98:	4688      	mov	r8, r1
 8002d9a:	4691      	mov	r9, r2
 8002d9c:	eb1a 0508 	adds.w	r5, sl, r8
 8002da0:	eb4b 0609 	adc.w	r6, fp, r9
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4619      	mov	r1, r3
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	f04f 0400 	mov.w	r4, #0
 8002db6:	0094      	lsls	r4, r2, #2
 8002db8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002dbc:	008b      	lsls	r3, r1, #2
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4623      	mov	r3, r4
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	4631      	mov	r1, r6
 8002dc6:	f7fd fa5b 	bl	8000280 <__aeabi_uldivmod>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	460c      	mov	r4, r1
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4bb8      	ldr	r3, [pc, #736]	; (80030b4 <UART_SetConfig+0x6f4>)
 8002dd2:	fba3 2302 	umull	r2, r3, r3, r2
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	469b      	mov	fp, r3
 8002de0:	f04f 0c00 	mov.w	ip, #0
 8002de4:	46d9      	mov	r9, fp
 8002de6:	46e2      	mov	sl, ip
 8002de8:	eb19 0309 	adds.w	r3, r9, r9
 8002dec:	eb4a 040a 	adc.w	r4, sl, sl
 8002df0:	4699      	mov	r9, r3
 8002df2:	46a2      	mov	sl, r4
 8002df4:	eb19 090b 	adds.w	r9, r9, fp
 8002df8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002dfc:	f04f 0100 	mov.w	r1, #0
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e10:	4689      	mov	r9, r1
 8002e12:	4692      	mov	sl, r2
 8002e14:	eb1b 0509 	adds.w	r5, fp, r9
 8002e18:	eb4c 060a 	adc.w	r6, ip, sl
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4619      	mov	r1, r3
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	f04f 0400 	mov.w	r4, #0
 8002e2e:	0094      	lsls	r4, r2, #2
 8002e30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e34:	008b      	lsls	r3, r1, #2
 8002e36:	461a      	mov	r2, r3
 8002e38:	4623      	mov	r3, r4
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	4631      	mov	r1, r6
 8002e3e:	f7fd fa1f 	bl	8000280 <__aeabi_uldivmod>
 8002e42:	4603      	mov	r3, r0
 8002e44:	460c      	mov	r4, r1
 8002e46:	461a      	mov	r2, r3
 8002e48:	4b9a      	ldr	r3, [pc, #616]	; (80030b4 <UART_SetConfig+0x6f4>)
 8002e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	2164      	movs	r1, #100	; 0x64
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	3332      	adds	r3, #50	; 0x32
 8002e5c:	4a95      	ldr	r2, [pc, #596]	; (80030b4 <UART_SetConfig+0x6f4>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e68:	4498      	add	r8, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	469b      	mov	fp, r3
 8002e6e:	f04f 0c00 	mov.w	ip, #0
 8002e72:	46d9      	mov	r9, fp
 8002e74:	46e2      	mov	sl, ip
 8002e76:	eb19 0309 	adds.w	r3, r9, r9
 8002e7a:	eb4a 040a 	adc.w	r4, sl, sl
 8002e7e:	4699      	mov	r9, r3
 8002e80:	46a2      	mov	sl, r4
 8002e82:	eb19 090b 	adds.w	r9, r9, fp
 8002e86:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e8a:	f04f 0100 	mov.w	r1, #0
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e9e:	4689      	mov	r9, r1
 8002ea0:	4692      	mov	sl, r2
 8002ea2:	eb1b 0509 	adds.w	r5, fp, r9
 8002ea6:	eb4c 060a 	adc.w	r6, ip, sl
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	f04f 0400 	mov.w	r4, #0
 8002ebc:	0094      	lsls	r4, r2, #2
 8002ebe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ec2:	008b      	lsls	r3, r1, #2
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4623      	mov	r3, r4
 8002ec8:	4628      	mov	r0, r5
 8002eca:	4631      	mov	r1, r6
 8002ecc:	f7fd f9d8 	bl	8000280 <__aeabi_uldivmod>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	460c      	mov	r4, r1
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b77      	ldr	r3, [pc, #476]	; (80030b4 <UART_SetConfig+0x6f4>)
 8002ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8002edc:	095b      	lsrs	r3, r3, #5
 8002ede:	2164      	movs	r1, #100	; 0x64
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	3332      	adds	r3, #50	; 0x32
 8002eea:	4a72      	ldr	r2, [pc, #456]	; (80030b4 <UART_SetConfig+0x6f4>)
 8002eec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	f003 020f 	and.w	r2, r3, #15
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4442      	add	r2, r8
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	e0d0      	b.n	80030a2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f00:	f7fe ff46 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8002f04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	469a      	mov	sl, r3
 8002f0a:	f04f 0b00 	mov.w	fp, #0
 8002f0e:	46d0      	mov	r8, sl
 8002f10:	46d9      	mov	r9, fp
 8002f12:	eb18 0308 	adds.w	r3, r8, r8
 8002f16:	eb49 0409 	adc.w	r4, r9, r9
 8002f1a:	4698      	mov	r8, r3
 8002f1c:	46a1      	mov	r9, r4
 8002f1e:	eb18 080a 	adds.w	r8, r8, sl
 8002f22:	eb49 090b 	adc.w	r9, r9, fp
 8002f26:	f04f 0100 	mov.w	r1, #0
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f3a:	4688      	mov	r8, r1
 8002f3c:	4691      	mov	r9, r2
 8002f3e:	eb1a 0508 	adds.w	r5, sl, r8
 8002f42:	eb4b 0609 	adc.w	r6, fp, r9
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	f04f 0400 	mov.w	r4, #0
 8002f58:	0094      	lsls	r4, r2, #2
 8002f5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f5e:	008b      	lsls	r3, r1, #2
 8002f60:	461a      	mov	r2, r3
 8002f62:	4623      	mov	r3, r4
 8002f64:	4628      	mov	r0, r5
 8002f66:	4631      	mov	r1, r6
 8002f68:	f7fd f98a 	bl	8000280 <__aeabi_uldivmod>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	460c      	mov	r4, r1
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b50      	ldr	r3, [pc, #320]	; (80030b4 <UART_SetConfig+0x6f4>)
 8002f74:	fba3 2302 	umull	r2, r3, r3, r2
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	469b      	mov	fp, r3
 8002f82:	f04f 0c00 	mov.w	ip, #0
 8002f86:	46d9      	mov	r9, fp
 8002f88:	46e2      	mov	sl, ip
 8002f8a:	eb19 0309 	adds.w	r3, r9, r9
 8002f8e:	eb4a 040a 	adc.w	r4, sl, sl
 8002f92:	4699      	mov	r9, r3
 8002f94:	46a2      	mov	sl, r4
 8002f96:	eb19 090b 	adds.w	r9, r9, fp
 8002f9a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f9e:	f04f 0100 	mov.w	r1, #0
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002faa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fb2:	4689      	mov	r9, r1
 8002fb4:	4692      	mov	sl, r2
 8002fb6:	eb1b 0509 	adds.w	r5, fp, r9
 8002fba:	eb4c 060a 	adc.w	r6, ip, sl
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	f04f 0400 	mov.w	r4, #0
 8002fd0:	0094      	lsls	r4, r2, #2
 8002fd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fd6:	008b      	lsls	r3, r1, #2
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4623      	mov	r3, r4
 8002fdc:	4628      	mov	r0, r5
 8002fde:	4631      	mov	r1, r6
 8002fe0:	f7fd f94e 	bl	8000280 <__aeabi_uldivmod>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b32      	ldr	r3, [pc, #200]	; (80030b4 <UART_SetConfig+0x6f4>)
 8002fec:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	2164      	movs	r1, #100	; 0x64
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	3332      	adds	r3, #50	; 0x32
 8002ffe:	4a2d      	ldr	r2, [pc, #180]	; (80030b4 <UART_SetConfig+0x6f4>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800300a:	4498      	add	r8, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	469b      	mov	fp, r3
 8003010:	f04f 0c00 	mov.w	ip, #0
 8003014:	46d9      	mov	r9, fp
 8003016:	46e2      	mov	sl, ip
 8003018:	eb19 0309 	adds.w	r3, r9, r9
 800301c:	eb4a 040a 	adc.w	r4, sl, sl
 8003020:	4699      	mov	r9, r3
 8003022:	46a2      	mov	sl, r4
 8003024:	eb19 090b 	adds.w	r9, r9, fp
 8003028:	eb4a 0a0c 	adc.w	sl, sl, ip
 800302c:	f04f 0100 	mov.w	r1, #0
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003038:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800303c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003040:	4689      	mov	r9, r1
 8003042:	4692      	mov	sl, r2
 8003044:	eb1b 0509 	adds.w	r5, fp, r9
 8003048:	eb4c 060a 	adc.w	r6, ip, sl
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4619      	mov	r1, r3
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	f04f 0400 	mov.w	r4, #0
 800305e:	0094      	lsls	r4, r2, #2
 8003060:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003064:	008b      	lsls	r3, r1, #2
 8003066:	461a      	mov	r2, r3
 8003068:	4623      	mov	r3, r4
 800306a:	4628      	mov	r0, r5
 800306c:	4631      	mov	r1, r6
 800306e:	f7fd f907 	bl	8000280 <__aeabi_uldivmod>
 8003072:	4603      	mov	r3, r0
 8003074:	460c      	mov	r4, r1
 8003076:	461a      	mov	r2, r3
 8003078:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <UART_SetConfig+0x6f4>)
 800307a:	fba3 1302 	umull	r1, r3, r3, r2
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	2164      	movs	r1, #100	; 0x64
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	3332      	adds	r3, #50	; 0x32
 800308c:	4a09      	ldr	r2, [pc, #36]	; (80030b4 <UART_SetConfig+0x6f4>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	f003 020f 	and.w	r2, r3, #15
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4442      	add	r2, r8
 800309e:	609a      	str	r2, [r3, #8]
}
 80030a0:	e7ff      	b.n	80030a2 <UART_SetConfig+0x6e2>
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ac:	40011000 	.word	0x40011000
 80030b0:	40011400 	.word	0x40011400
 80030b4:	51eb851f 	.word	0x51eb851f

080030b8 <__errno>:
 80030b8:	4b01      	ldr	r3, [pc, #4]	; (80030c0 <__errno+0x8>)
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	20000010 	.word	0x20000010

080030c4 <__libc_init_array>:
 80030c4:	b570      	push	{r4, r5, r6, lr}
 80030c6:	4e0d      	ldr	r6, [pc, #52]	; (80030fc <__libc_init_array+0x38>)
 80030c8:	4c0d      	ldr	r4, [pc, #52]	; (8003100 <__libc_init_array+0x3c>)
 80030ca:	1ba4      	subs	r4, r4, r6
 80030cc:	10a4      	asrs	r4, r4, #2
 80030ce:	2500      	movs	r5, #0
 80030d0:	42a5      	cmp	r5, r4
 80030d2:	d109      	bne.n	80030e8 <__libc_init_array+0x24>
 80030d4:	4e0b      	ldr	r6, [pc, #44]	; (8003104 <__libc_init_array+0x40>)
 80030d6:	4c0c      	ldr	r4, [pc, #48]	; (8003108 <__libc_init_array+0x44>)
 80030d8:	f000 ff68 	bl	8003fac <_init>
 80030dc:	1ba4      	subs	r4, r4, r6
 80030de:	10a4      	asrs	r4, r4, #2
 80030e0:	2500      	movs	r5, #0
 80030e2:	42a5      	cmp	r5, r4
 80030e4:	d105      	bne.n	80030f2 <__libc_init_array+0x2e>
 80030e6:	bd70      	pop	{r4, r5, r6, pc}
 80030e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030ec:	4798      	blx	r3
 80030ee:	3501      	adds	r5, #1
 80030f0:	e7ee      	b.n	80030d0 <__libc_init_array+0xc>
 80030f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030f6:	4798      	blx	r3
 80030f8:	3501      	adds	r5, #1
 80030fa:	e7f2      	b.n	80030e2 <__libc_init_array+0x1e>
 80030fc:	080040d4 	.word	0x080040d4
 8003100:	080040d4 	.word	0x080040d4
 8003104:	080040d4 	.word	0x080040d4
 8003108:	080040d8 	.word	0x080040d8

0800310c <memset>:
 800310c:	4402      	add	r2, r0
 800310e:	4603      	mov	r3, r0
 8003110:	4293      	cmp	r3, r2
 8003112:	d100      	bne.n	8003116 <memset+0xa>
 8003114:	4770      	bx	lr
 8003116:	f803 1b01 	strb.w	r1, [r3], #1
 800311a:	e7f9      	b.n	8003110 <memset+0x4>

0800311c <iprintf>:
 800311c:	b40f      	push	{r0, r1, r2, r3}
 800311e:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <iprintf+0x2c>)
 8003120:	b513      	push	{r0, r1, r4, lr}
 8003122:	681c      	ldr	r4, [r3, #0]
 8003124:	b124      	cbz	r4, 8003130 <iprintf+0x14>
 8003126:	69a3      	ldr	r3, [r4, #24]
 8003128:	b913      	cbnz	r3, 8003130 <iprintf+0x14>
 800312a:	4620      	mov	r0, r4
 800312c:	f000 fa22 	bl	8003574 <__sinit>
 8003130:	ab05      	add	r3, sp, #20
 8003132:	9a04      	ldr	r2, [sp, #16]
 8003134:	68a1      	ldr	r1, [r4, #8]
 8003136:	9301      	str	r3, [sp, #4]
 8003138:	4620      	mov	r0, r4
 800313a:	f000 fbdb 	bl	80038f4 <_vfiprintf_r>
 800313e:	b002      	add	sp, #8
 8003140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003144:	b004      	add	sp, #16
 8003146:	4770      	bx	lr
 8003148:	20000010 	.word	0x20000010

0800314c <_puts_r>:
 800314c:	b570      	push	{r4, r5, r6, lr}
 800314e:	460e      	mov	r6, r1
 8003150:	4605      	mov	r5, r0
 8003152:	b118      	cbz	r0, 800315c <_puts_r+0x10>
 8003154:	6983      	ldr	r3, [r0, #24]
 8003156:	b90b      	cbnz	r3, 800315c <_puts_r+0x10>
 8003158:	f000 fa0c 	bl	8003574 <__sinit>
 800315c:	69ab      	ldr	r3, [r5, #24]
 800315e:	68ac      	ldr	r4, [r5, #8]
 8003160:	b913      	cbnz	r3, 8003168 <_puts_r+0x1c>
 8003162:	4628      	mov	r0, r5
 8003164:	f000 fa06 	bl	8003574 <__sinit>
 8003168:	4b23      	ldr	r3, [pc, #140]	; (80031f8 <_puts_r+0xac>)
 800316a:	429c      	cmp	r4, r3
 800316c:	d117      	bne.n	800319e <_puts_r+0x52>
 800316e:	686c      	ldr	r4, [r5, #4]
 8003170:	89a3      	ldrh	r3, [r4, #12]
 8003172:	071b      	lsls	r3, r3, #28
 8003174:	d51d      	bpl.n	80031b2 <_puts_r+0x66>
 8003176:	6923      	ldr	r3, [r4, #16]
 8003178:	b1db      	cbz	r3, 80031b2 <_puts_r+0x66>
 800317a:	3e01      	subs	r6, #1
 800317c:	68a3      	ldr	r3, [r4, #8]
 800317e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003182:	3b01      	subs	r3, #1
 8003184:	60a3      	str	r3, [r4, #8]
 8003186:	b9e9      	cbnz	r1, 80031c4 <_puts_r+0x78>
 8003188:	2b00      	cmp	r3, #0
 800318a:	da2e      	bge.n	80031ea <_puts_r+0x9e>
 800318c:	4622      	mov	r2, r4
 800318e:	210a      	movs	r1, #10
 8003190:	4628      	mov	r0, r5
 8003192:	f000 f83f 	bl	8003214 <__swbuf_r>
 8003196:	3001      	adds	r0, #1
 8003198:	d011      	beq.n	80031be <_puts_r+0x72>
 800319a:	200a      	movs	r0, #10
 800319c:	e011      	b.n	80031c2 <_puts_r+0x76>
 800319e:	4b17      	ldr	r3, [pc, #92]	; (80031fc <_puts_r+0xb0>)
 80031a0:	429c      	cmp	r4, r3
 80031a2:	d101      	bne.n	80031a8 <_puts_r+0x5c>
 80031a4:	68ac      	ldr	r4, [r5, #8]
 80031a6:	e7e3      	b.n	8003170 <_puts_r+0x24>
 80031a8:	4b15      	ldr	r3, [pc, #84]	; (8003200 <_puts_r+0xb4>)
 80031aa:	429c      	cmp	r4, r3
 80031ac:	bf08      	it	eq
 80031ae:	68ec      	ldreq	r4, [r5, #12]
 80031b0:	e7de      	b.n	8003170 <_puts_r+0x24>
 80031b2:	4621      	mov	r1, r4
 80031b4:	4628      	mov	r0, r5
 80031b6:	f000 f87f 	bl	80032b8 <__swsetup_r>
 80031ba:	2800      	cmp	r0, #0
 80031bc:	d0dd      	beq.n	800317a <_puts_r+0x2e>
 80031be:	f04f 30ff 	mov.w	r0, #4294967295
 80031c2:	bd70      	pop	{r4, r5, r6, pc}
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	da04      	bge.n	80031d2 <_puts_r+0x86>
 80031c8:	69a2      	ldr	r2, [r4, #24]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	dc06      	bgt.n	80031dc <_puts_r+0x90>
 80031ce:	290a      	cmp	r1, #10
 80031d0:	d004      	beq.n	80031dc <_puts_r+0x90>
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	6022      	str	r2, [r4, #0]
 80031d8:	7019      	strb	r1, [r3, #0]
 80031da:	e7cf      	b.n	800317c <_puts_r+0x30>
 80031dc:	4622      	mov	r2, r4
 80031de:	4628      	mov	r0, r5
 80031e0:	f000 f818 	bl	8003214 <__swbuf_r>
 80031e4:	3001      	adds	r0, #1
 80031e6:	d1c9      	bne.n	800317c <_puts_r+0x30>
 80031e8:	e7e9      	b.n	80031be <_puts_r+0x72>
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	200a      	movs	r0, #10
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	6022      	str	r2, [r4, #0]
 80031f2:	7018      	strb	r0, [r3, #0]
 80031f4:	e7e5      	b.n	80031c2 <_puts_r+0x76>
 80031f6:	bf00      	nop
 80031f8:	08004058 	.word	0x08004058
 80031fc:	08004078 	.word	0x08004078
 8003200:	08004038 	.word	0x08004038

08003204 <puts>:
 8003204:	4b02      	ldr	r3, [pc, #8]	; (8003210 <puts+0xc>)
 8003206:	4601      	mov	r1, r0
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	f7ff bf9f 	b.w	800314c <_puts_r>
 800320e:	bf00      	nop
 8003210:	20000010 	.word	0x20000010

08003214 <__swbuf_r>:
 8003214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003216:	460e      	mov	r6, r1
 8003218:	4614      	mov	r4, r2
 800321a:	4605      	mov	r5, r0
 800321c:	b118      	cbz	r0, 8003226 <__swbuf_r+0x12>
 800321e:	6983      	ldr	r3, [r0, #24]
 8003220:	b90b      	cbnz	r3, 8003226 <__swbuf_r+0x12>
 8003222:	f000 f9a7 	bl	8003574 <__sinit>
 8003226:	4b21      	ldr	r3, [pc, #132]	; (80032ac <__swbuf_r+0x98>)
 8003228:	429c      	cmp	r4, r3
 800322a:	d12a      	bne.n	8003282 <__swbuf_r+0x6e>
 800322c:	686c      	ldr	r4, [r5, #4]
 800322e:	69a3      	ldr	r3, [r4, #24]
 8003230:	60a3      	str	r3, [r4, #8]
 8003232:	89a3      	ldrh	r3, [r4, #12]
 8003234:	071a      	lsls	r2, r3, #28
 8003236:	d52e      	bpl.n	8003296 <__swbuf_r+0x82>
 8003238:	6923      	ldr	r3, [r4, #16]
 800323a:	b363      	cbz	r3, 8003296 <__swbuf_r+0x82>
 800323c:	6923      	ldr	r3, [r4, #16]
 800323e:	6820      	ldr	r0, [r4, #0]
 8003240:	1ac0      	subs	r0, r0, r3
 8003242:	6963      	ldr	r3, [r4, #20]
 8003244:	b2f6      	uxtb	r6, r6
 8003246:	4283      	cmp	r3, r0
 8003248:	4637      	mov	r7, r6
 800324a:	dc04      	bgt.n	8003256 <__swbuf_r+0x42>
 800324c:	4621      	mov	r1, r4
 800324e:	4628      	mov	r0, r5
 8003250:	f000 f926 	bl	80034a0 <_fflush_r>
 8003254:	bb28      	cbnz	r0, 80032a2 <__swbuf_r+0x8e>
 8003256:	68a3      	ldr	r3, [r4, #8]
 8003258:	3b01      	subs	r3, #1
 800325a:	60a3      	str	r3, [r4, #8]
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	6022      	str	r2, [r4, #0]
 8003262:	701e      	strb	r6, [r3, #0]
 8003264:	6963      	ldr	r3, [r4, #20]
 8003266:	3001      	adds	r0, #1
 8003268:	4283      	cmp	r3, r0
 800326a:	d004      	beq.n	8003276 <__swbuf_r+0x62>
 800326c:	89a3      	ldrh	r3, [r4, #12]
 800326e:	07db      	lsls	r3, r3, #31
 8003270:	d519      	bpl.n	80032a6 <__swbuf_r+0x92>
 8003272:	2e0a      	cmp	r6, #10
 8003274:	d117      	bne.n	80032a6 <__swbuf_r+0x92>
 8003276:	4621      	mov	r1, r4
 8003278:	4628      	mov	r0, r5
 800327a:	f000 f911 	bl	80034a0 <_fflush_r>
 800327e:	b190      	cbz	r0, 80032a6 <__swbuf_r+0x92>
 8003280:	e00f      	b.n	80032a2 <__swbuf_r+0x8e>
 8003282:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <__swbuf_r+0x9c>)
 8003284:	429c      	cmp	r4, r3
 8003286:	d101      	bne.n	800328c <__swbuf_r+0x78>
 8003288:	68ac      	ldr	r4, [r5, #8]
 800328a:	e7d0      	b.n	800322e <__swbuf_r+0x1a>
 800328c:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <__swbuf_r+0xa0>)
 800328e:	429c      	cmp	r4, r3
 8003290:	bf08      	it	eq
 8003292:	68ec      	ldreq	r4, [r5, #12]
 8003294:	e7cb      	b.n	800322e <__swbuf_r+0x1a>
 8003296:	4621      	mov	r1, r4
 8003298:	4628      	mov	r0, r5
 800329a:	f000 f80d 	bl	80032b8 <__swsetup_r>
 800329e:	2800      	cmp	r0, #0
 80032a0:	d0cc      	beq.n	800323c <__swbuf_r+0x28>
 80032a2:	f04f 37ff 	mov.w	r7, #4294967295
 80032a6:	4638      	mov	r0, r7
 80032a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032aa:	bf00      	nop
 80032ac:	08004058 	.word	0x08004058
 80032b0:	08004078 	.word	0x08004078
 80032b4:	08004038 	.word	0x08004038

080032b8 <__swsetup_r>:
 80032b8:	4b32      	ldr	r3, [pc, #200]	; (8003384 <__swsetup_r+0xcc>)
 80032ba:	b570      	push	{r4, r5, r6, lr}
 80032bc:	681d      	ldr	r5, [r3, #0]
 80032be:	4606      	mov	r6, r0
 80032c0:	460c      	mov	r4, r1
 80032c2:	b125      	cbz	r5, 80032ce <__swsetup_r+0x16>
 80032c4:	69ab      	ldr	r3, [r5, #24]
 80032c6:	b913      	cbnz	r3, 80032ce <__swsetup_r+0x16>
 80032c8:	4628      	mov	r0, r5
 80032ca:	f000 f953 	bl	8003574 <__sinit>
 80032ce:	4b2e      	ldr	r3, [pc, #184]	; (8003388 <__swsetup_r+0xd0>)
 80032d0:	429c      	cmp	r4, r3
 80032d2:	d10f      	bne.n	80032f4 <__swsetup_r+0x3c>
 80032d4:	686c      	ldr	r4, [r5, #4]
 80032d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032da:	b29a      	uxth	r2, r3
 80032dc:	0715      	lsls	r5, r2, #28
 80032de:	d42c      	bmi.n	800333a <__swsetup_r+0x82>
 80032e0:	06d0      	lsls	r0, r2, #27
 80032e2:	d411      	bmi.n	8003308 <__swsetup_r+0x50>
 80032e4:	2209      	movs	r2, #9
 80032e6:	6032      	str	r2, [r6, #0]
 80032e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ec:	81a3      	strh	r3, [r4, #12]
 80032ee:	f04f 30ff 	mov.w	r0, #4294967295
 80032f2:	e03e      	b.n	8003372 <__swsetup_r+0xba>
 80032f4:	4b25      	ldr	r3, [pc, #148]	; (800338c <__swsetup_r+0xd4>)
 80032f6:	429c      	cmp	r4, r3
 80032f8:	d101      	bne.n	80032fe <__swsetup_r+0x46>
 80032fa:	68ac      	ldr	r4, [r5, #8]
 80032fc:	e7eb      	b.n	80032d6 <__swsetup_r+0x1e>
 80032fe:	4b24      	ldr	r3, [pc, #144]	; (8003390 <__swsetup_r+0xd8>)
 8003300:	429c      	cmp	r4, r3
 8003302:	bf08      	it	eq
 8003304:	68ec      	ldreq	r4, [r5, #12]
 8003306:	e7e6      	b.n	80032d6 <__swsetup_r+0x1e>
 8003308:	0751      	lsls	r1, r2, #29
 800330a:	d512      	bpl.n	8003332 <__swsetup_r+0x7a>
 800330c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800330e:	b141      	cbz	r1, 8003322 <__swsetup_r+0x6a>
 8003310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003314:	4299      	cmp	r1, r3
 8003316:	d002      	beq.n	800331e <__swsetup_r+0x66>
 8003318:	4630      	mov	r0, r6
 800331a:	f000 fa19 	bl	8003750 <_free_r>
 800331e:	2300      	movs	r3, #0
 8003320:	6363      	str	r3, [r4, #52]	; 0x34
 8003322:	89a3      	ldrh	r3, [r4, #12]
 8003324:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003328:	81a3      	strh	r3, [r4, #12]
 800332a:	2300      	movs	r3, #0
 800332c:	6063      	str	r3, [r4, #4]
 800332e:	6923      	ldr	r3, [r4, #16]
 8003330:	6023      	str	r3, [r4, #0]
 8003332:	89a3      	ldrh	r3, [r4, #12]
 8003334:	f043 0308 	orr.w	r3, r3, #8
 8003338:	81a3      	strh	r3, [r4, #12]
 800333a:	6923      	ldr	r3, [r4, #16]
 800333c:	b94b      	cbnz	r3, 8003352 <__swsetup_r+0x9a>
 800333e:	89a3      	ldrh	r3, [r4, #12]
 8003340:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003348:	d003      	beq.n	8003352 <__swsetup_r+0x9a>
 800334a:	4621      	mov	r1, r4
 800334c:	4630      	mov	r0, r6
 800334e:	f000 f9bf 	bl	80036d0 <__smakebuf_r>
 8003352:	89a2      	ldrh	r2, [r4, #12]
 8003354:	f012 0301 	ands.w	r3, r2, #1
 8003358:	d00c      	beq.n	8003374 <__swsetup_r+0xbc>
 800335a:	2300      	movs	r3, #0
 800335c:	60a3      	str	r3, [r4, #8]
 800335e:	6963      	ldr	r3, [r4, #20]
 8003360:	425b      	negs	r3, r3
 8003362:	61a3      	str	r3, [r4, #24]
 8003364:	6923      	ldr	r3, [r4, #16]
 8003366:	b953      	cbnz	r3, 800337e <__swsetup_r+0xc6>
 8003368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800336c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003370:	d1ba      	bne.n	80032e8 <__swsetup_r+0x30>
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	0792      	lsls	r2, r2, #30
 8003376:	bf58      	it	pl
 8003378:	6963      	ldrpl	r3, [r4, #20]
 800337a:	60a3      	str	r3, [r4, #8]
 800337c:	e7f2      	b.n	8003364 <__swsetup_r+0xac>
 800337e:	2000      	movs	r0, #0
 8003380:	e7f7      	b.n	8003372 <__swsetup_r+0xba>
 8003382:	bf00      	nop
 8003384:	20000010 	.word	0x20000010
 8003388:	08004058 	.word	0x08004058
 800338c:	08004078 	.word	0x08004078
 8003390:	08004038 	.word	0x08004038

08003394 <__sflush_r>:
 8003394:	898a      	ldrh	r2, [r1, #12]
 8003396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800339a:	4605      	mov	r5, r0
 800339c:	0710      	lsls	r0, r2, #28
 800339e:	460c      	mov	r4, r1
 80033a0:	d458      	bmi.n	8003454 <__sflush_r+0xc0>
 80033a2:	684b      	ldr	r3, [r1, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	dc05      	bgt.n	80033b4 <__sflush_r+0x20>
 80033a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	dc02      	bgt.n	80033b4 <__sflush_r+0x20>
 80033ae:	2000      	movs	r0, #0
 80033b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033b6:	2e00      	cmp	r6, #0
 80033b8:	d0f9      	beq.n	80033ae <__sflush_r+0x1a>
 80033ba:	2300      	movs	r3, #0
 80033bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033c0:	682f      	ldr	r7, [r5, #0]
 80033c2:	6a21      	ldr	r1, [r4, #32]
 80033c4:	602b      	str	r3, [r5, #0]
 80033c6:	d032      	beq.n	800342e <__sflush_r+0x9a>
 80033c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033ca:	89a3      	ldrh	r3, [r4, #12]
 80033cc:	075a      	lsls	r2, r3, #29
 80033ce:	d505      	bpl.n	80033dc <__sflush_r+0x48>
 80033d0:	6863      	ldr	r3, [r4, #4]
 80033d2:	1ac0      	subs	r0, r0, r3
 80033d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033d6:	b10b      	cbz	r3, 80033dc <__sflush_r+0x48>
 80033d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033da:	1ac0      	subs	r0, r0, r3
 80033dc:	2300      	movs	r3, #0
 80033de:	4602      	mov	r2, r0
 80033e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033e2:	6a21      	ldr	r1, [r4, #32]
 80033e4:	4628      	mov	r0, r5
 80033e6:	47b0      	blx	r6
 80033e8:	1c43      	adds	r3, r0, #1
 80033ea:	89a3      	ldrh	r3, [r4, #12]
 80033ec:	d106      	bne.n	80033fc <__sflush_r+0x68>
 80033ee:	6829      	ldr	r1, [r5, #0]
 80033f0:	291d      	cmp	r1, #29
 80033f2:	d848      	bhi.n	8003486 <__sflush_r+0xf2>
 80033f4:	4a29      	ldr	r2, [pc, #164]	; (800349c <__sflush_r+0x108>)
 80033f6:	40ca      	lsrs	r2, r1
 80033f8:	07d6      	lsls	r6, r2, #31
 80033fa:	d544      	bpl.n	8003486 <__sflush_r+0xf2>
 80033fc:	2200      	movs	r2, #0
 80033fe:	6062      	str	r2, [r4, #4]
 8003400:	04d9      	lsls	r1, r3, #19
 8003402:	6922      	ldr	r2, [r4, #16]
 8003404:	6022      	str	r2, [r4, #0]
 8003406:	d504      	bpl.n	8003412 <__sflush_r+0x7e>
 8003408:	1c42      	adds	r2, r0, #1
 800340a:	d101      	bne.n	8003410 <__sflush_r+0x7c>
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	b903      	cbnz	r3, 8003412 <__sflush_r+0x7e>
 8003410:	6560      	str	r0, [r4, #84]	; 0x54
 8003412:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003414:	602f      	str	r7, [r5, #0]
 8003416:	2900      	cmp	r1, #0
 8003418:	d0c9      	beq.n	80033ae <__sflush_r+0x1a>
 800341a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800341e:	4299      	cmp	r1, r3
 8003420:	d002      	beq.n	8003428 <__sflush_r+0x94>
 8003422:	4628      	mov	r0, r5
 8003424:	f000 f994 	bl	8003750 <_free_r>
 8003428:	2000      	movs	r0, #0
 800342a:	6360      	str	r0, [r4, #52]	; 0x34
 800342c:	e7c0      	b.n	80033b0 <__sflush_r+0x1c>
 800342e:	2301      	movs	r3, #1
 8003430:	4628      	mov	r0, r5
 8003432:	47b0      	blx	r6
 8003434:	1c41      	adds	r1, r0, #1
 8003436:	d1c8      	bne.n	80033ca <__sflush_r+0x36>
 8003438:	682b      	ldr	r3, [r5, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0c5      	beq.n	80033ca <__sflush_r+0x36>
 800343e:	2b1d      	cmp	r3, #29
 8003440:	d001      	beq.n	8003446 <__sflush_r+0xb2>
 8003442:	2b16      	cmp	r3, #22
 8003444:	d101      	bne.n	800344a <__sflush_r+0xb6>
 8003446:	602f      	str	r7, [r5, #0]
 8003448:	e7b1      	b.n	80033ae <__sflush_r+0x1a>
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003450:	81a3      	strh	r3, [r4, #12]
 8003452:	e7ad      	b.n	80033b0 <__sflush_r+0x1c>
 8003454:	690f      	ldr	r7, [r1, #16]
 8003456:	2f00      	cmp	r7, #0
 8003458:	d0a9      	beq.n	80033ae <__sflush_r+0x1a>
 800345a:	0793      	lsls	r3, r2, #30
 800345c:	680e      	ldr	r6, [r1, #0]
 800345e:	bf08      	it	eq
 8003460:	694b      	ldreq	r3, [r1, #20]
 8003462:	600f      	str	r7, [r1, #0]
 8003464:	bf18      	it	ne
 8003466:	2300      	movne	r3, #0
 8003468:	eba6 0807 	sub.w	r8, r6, r7
 800346c:	608b      	str	r3, [r1, #8]
 800346e:	f1b8 0f00 	cmp.w	r8, #0
 8003472:	dd9c      	ble.n	80033ae <__sflush_r+0x1a>
 8003474:	4643      	mov	r3, r8
 8003476:	463a      	mov	r2, r7
 8003478:	6a21      	ldr	r1, [r4, #32]
 800347a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800347c:	4628      	mov	r0, r5
 800347e:	47b0      	blx	r6
 8003480:	2800      	cmp	r0, #0
 8003482:	dc06      	bgt.n	8003492 <__sflush_r+0xfe>
 8003484:	89a3      	ldrh	r3, [r4, #12]
 8003486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800348a:	81a3      	strh	r3, [r4, #12]
 800348c:	f04f 30ff 	mov.w	r0, #4294967295
 8003490:	e78e      	b.n	80033b0 <__sflush_r+0x1c>
 8003492:	4407      	add	r7, r0
 8003494:	eba8 0800 	sub.w	r8, r8, r0
 8003498:	e7e9      	b.n	800346e <__sflush_r+0xda>
 800349a:	bf00      	nop
 800349c:	20400001 	.word	0x20400001

080034a0 <_fflush_r>:
 80034a0:	b538      	push	{r3, r4, r5, lr}
 80034a2:	690b      	ldr	r3, [r1, #16]
 80034a4:	4605      	mov	r5, r0
 80034a6:	460c      	mov	r4, r1
 80034a8:	b1db      	cbz	r3, 80034e2 <_fflush_r+0x42>
 80034aa:	b118      	cbz	r0, 80034b4 <_fflush_r+0x14>
 80034ac:	6983      	ldr	r3, [r0, #24]
 80034ae:	b90b      	cbnz	r3, 80034b4 <_fflush_r+0x14>
 80034b0:	f000 f860 	bl	8003574 <__sinit>
 80034b4:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <_fflush_r+0x48>)
 80034b6:	429c      	cmp	r4, r3
 80034b8:	d109      	bne.n	80034ce <_fflush_r+0x2e>
 80034ba:	686c      	ldr	r4, [r5, #4]
 80034bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034c0:	b17b      	cbz	r3, 80034e2 <_fflush_r+0x42>
 80034c2:	4621      	mov	r1, r4
 80034c4:	4628      	mov	r0, r5
 80034c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034ca:	f7ff bf63 	b.w	8003394 <__sflush_r>
 80034ce:	4b07      	ldr	r3, [pc, #28]	; (80034ec <_fflush_r+0x4c>)
 80034d0:	429c      	cmp	r4, r3
 80034d2:	d101      	bne.n	80034d8 <_fflush_r+0x38>
 80034d4:	68ac      	ldr	r4, [r5, #8]
 80034d6:	e7f1      	b.n	80034bc <_fflush_r+0x1c>
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <_fflush_r+0x50>)
 80034da:	429c      	cmp	r4, r3
 80034dc:	bf08      	it	eq
 80034de:	68ec      	ldreq	r4, [r5, #12]
 80034e0:	e7ec      	b.n	80034bc <_fflush_r+0x1c>
 80034e2:	2000      	movs	r0, #0
 80034e4:	bd38      	pop	{r3, r4, r5, pc}
 80034e6:	bf00      	nop
 80034e8:	08004058 	.word	0x08004058
 80034ec:	08004078 	.word	0x08004078
 80034f0:	08004038 	.word	0x08004038

080034f4 <std>:
 80034f4:	2300      	movs	r3, #0
 80034f6:	b510      	push	{r4, lr}
 80034f8:	4604      	mov	r4, r0
 80034fa:	e9c0 3300 	strd	r3, r3, [r0]
 80034fe:	6083      	str	r3, [r0, #8]
 8003500:	8181      	strh	r1, [r0, #12]
 8003502:	6643      	str	r3, [r0, #100]	; 0x64
 8003504:	81c2      	strh	r2, [r0, #14]
 8003506:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800350a:	6183      	str	r3, [r0, #24]
 800350c:	4619      	mov	r1, r3
 800350e:	2208      	movs	r2, #8
 8003510:	305c      	adds	r0, #92	; 0x5c
 8003512:	f7ff fdfb 	bl	800310c <memset>
 8003516:	4b05      	ldr	r3, [pc, #20]	; (800352c <std+0x38>)
 8003518:	6263      	str	r3, [r4, #36]	; 0x24
 800351a:	4b05      	ldr	r3, [pc, #20]	; (8003530 <std+0x3c>)
 800351c:	62a3      	str	r3, [r4, #40]	; 0x28
 800351e:	4b05      	ldr	r3, [pc, #20]	; (8003534 <std+0x40>)
 8003520:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003522:	4b05      	ldr	r3, [pc, #20]	; (8003538 <std+0x44>)
 8003524:	6224      	str	r4, [r4, #32]
 8003526:	6323      	str	r3, [r4, #48]	; 0x30
 8003528:	bd10      	pop	{r4, pc}
 800352a:	bf00      	nop
 800352c:	08003e51 	.word	0x08003e51
 8003530:	08003e73 	.word	0x08003e73
 8003534:	08003eab 	.word	0x08003eab
 8003538:	08003ecf 	.word	0x08003ecf

0800353c <_cleanup_r>:
 800353c:	4901      	ldr	r1, [pc, #4]	; (8003544 <_cleanup_r+0x8>)
 800353e:	f000 b885 	b.w	800364c <_fwalk_reent>
 8003542:	bf00      	nop
 8003544:	080034a1 	.word	0x080034a1

08003548 <__sfmoreglue>:
 8003548:	b570      	push	{r4, r5, r6, lr}
 800354a:	1e4a      	subs	r2, r1, #1
 800354c:	2568      	movs	r5, #104	; 0x68
 800354e:	4355      	muls	r5, r2
 8003550:	460e      	mov	r6, r1
 8003552:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003556:	f000 f949 	bl	80037ec <_malloc_r>
 800355a:	4604      	mov	r4, r0
 800355c:	b140      	cbz	r0, 8003570 <__sfmoreglue+0x28>
 800355e:	2100      	movs	r1, #0
 8003560:	e9c0 1600 	strd	r1, r6, [r0]
 8003564:	300c      	adds	r0, #12
 8003566:	60a0      	str	r0, [r4, #8]
 8003568:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800356c:	f7ff fdce 	bl	800310c <memset>
 8003570:	4620      	mov	r0, r4
 8003572:	bd70      	pop	{r4, r5, r6, pc}

08003574 <__sinit>:
 8003574:	6983      	ldr	r3, [r0, #24]
 8003576:	b510      	push	{r4, lr}
 8003578:	4604      	mov	r4, r0
 800357a:	bb33      	cbnz	r3, 80035ca <__sinit+0x56>
 800357c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003580:	6503      	str	r3, [r0, #80]	; 0x50
 8003582:	4b12      	ldr	r3, [pc, #72]	; (80035cc <__sinit+0x58>)
 8003584:	4a12      	ldr	r2, [pc, #72]	; (80035d0 <__sinit+0x5c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6282      	str	r2, [r0, #40]	; 0x28
 800358a:	4298      	cmp	r0, r3
 800358c:	bf04      	itt	eq
 800358e:	2301      	moveq	r3, #1
 8003590:	6183      	streq	r3, [r0, #24]
 8003592:	f000 f81f 	bl	80035d4 <__sfp>
 8003596:	6060      	str	r0, [r4, #4]
 8003598:	4620      	mov	r0, r4
 800359a:	f000 f81b 	bl	80035d4 <__sfp>
 800359e:	60a0      	str	r0, [r4, #8]
 80035a0:	4620      	mov	r0, r4
 80035a2:	f000 f817 	bl	80035d4 <__sfp>
 80035a6:	2200      	movs	r2, #0
 80035a8:	60e0      	str	r0, [r4, #12]
 80035aa:	2104      	movs	r1, #4
 80035ac:	6860      	ldr	r0, [r4, #4]
 80035ae:	f7ff ffa1 	bl	80034f4 <std>
 80035b2:	2201      	movs	r2, #1
 80035b4:	2109      	movs	r1, #9
 80035b6:	68a0      	ldr	r0, [r4, #8]
 80035b8:	f7ff ff9c 	bl	80034f4 <std>
 80035bc:	2202      	movs	r2, #2
 80035be:	2112      	movs	r1, #18
 80035c0:	68e0      	ldr	r0, [r4, #12]
 80035c2:	f7ff ff97 	bl	80034f4 <std>
 80035c6:	2301      	movs	r3, #1
 80035c8:	61a3      	str	r3, [r4, #24]
 80035ca:	bd10      	pop	{r4, pc}
 80035cc:	08004034 	.word	0x08004034
 80035d0:	0800353d 	.word	0x0800353d

080035d4 <__sfp>:
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <__sfp+0x70>)
 80035d8:	681e      	ldr	r6, [r3, #0]
 80035da:	69b3      	ldr	r3, [r6, #24]
 80035dc:	4607      	mov	r7, r0
 80035de:	b913      	cbnz	r3, 80035e6 <__sfp+0x12>
 80035e0:	4630      	mov	r0, r6
 80035e2:	f7ff ffc7 	bl	8003574 <__sinit>
 80035e6:	3648      	adds	r6, #72	; 0x48
 80035e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	d503      	bpl.n	80035f8 <__sfp+0x24>
 80035f0:	6833      	ldr	r3, [r6, #0]
 80035f2:	b133      	cbz	r3, 8003602 <__sfp+0x2e>
 80035f4:	6836      	ldr	r6, [r6, #0]
 80035f6:	e7f7      	b.n	80035e8 <__sfp+0x14>
 80035f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035fc:	b16d      	cbz	r5, 800361a <__sfp+0x46>
 80035fe:	3468      	adds	r4, #104	; 0x68
 8003600:	e7f4      	b.n	80035ec <__sfp+0x18>
 8003602:	2104      	movs	r1, #4
 8003604:	4638      	mov	r0, r7
 8003606:	f7ff ff9f 	bl	8003548 <__sfmoreglue>
 800360a:	6030      	str	r0, [r6, #0]
 800360c:	2800      	cmp	r0, #0
 800360e:	d1f1      	bne.n	80035f4 <__sfp+0x20>
 8003610:	230c      	movs	r3, #12
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	4604      	mov	r4, r0
 8003616:	4620      	mov	r0, r4
 8003618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800361a:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <__sfp+0x74>)
 800361c:	6665      	str	r5, [r4, #100]	; 0x64
 800361e:	e9c4 5500 	strd	r5, r5, [r4]
 8003622:	60a5      	str	r5, [r4, #8]
 8003624:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003628:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800362c:	2208      	movs	r2, #8
 800362e:	4629      	mov	r1, r5
 8003630:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003634:	f7ff fd6a 	bl	800310c <memset>
 8003638:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800363c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003640:	e7e9      	b.n	8003616 <__sfp+0x42>
 8003642:	bf00      	nop
 8003644:	08004034 	.word	0x08004034
 8003648:	ffff0001 	.word	0xffff0001

0800364c <_fwalk_reent>:
 800364c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003650:	4680      	mov	r8, r0
 8003652:	4689      	mov	r9, r1
 8003654:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003658:	2600      	movs	r6, #0
 800365a:	b914      	cbnz	r4, 8003662 <_fwalk_reent+0x16>
 800365c:	4630      	mov	r0, r6
 800365e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003662:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003666:	3f01      	subs	r7, #1
 8003668:	d501      	bpl.n	800366e <_fwalk_reent+0x22>
 800366a:	6824      	ldr	r4, [r4, #0]
 800366c:	e7f5      	b.n	800365a <_fwalk_reent+0xe>
 800366e:	89ab      	ldrh	r3, [r5, #12]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d907      	bls.n	8003684 <_fwalk_reent+0x38>
 8003674:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003678:	3301      	adds	r3, #1
 800367a:	d003      	beq.n	8003684 <_fwalk_reent+0x38>
 800367c:	4629      	mov	r1, r5
 800367e:	4640      	mov	r0, r8
 8003680:	47c8      	blx	r9
 8003682:	4306      	orrs	r6, r0
 8003684:	3568      	adds	r5, #104	; 0x68
 8003686:	e7ee      	b.n	8003666 <_fwalk_reent+0x1a>

08003688 <__swhatbuf_r>:
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	460e      	mov	r6, r1
 800368c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003690:	2900      	cmp	r1, #0
 8003692:	b096      	sub	sp, #88	; 0x58
 8003694:	4614      	mov	r4, r2
 8003696:	461d      	mov	r5, r3
 8003698:	da07      	bge.n	80036aa <__swhatbuf_r+0x22>
 800369a:	2300      	movs	r3, #0
 800369c:	602b      	str	r3, [r5, #0]
 800369e:	89b3      	ldrh	r3, [r6, #12]
 80036a0:	061a      	lsls	r2, r3, #24
 80036a2:	d410      	bmi.n	80036c6 <__swhatbuf_r+0x3e>
 80036a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a8:	e00e      	b.n	80036c8 <__swhatbuf_r+0x40>
 80036aa:	466a      	mov	r2, sp
 80036ac:	f000 fc36 	bl	8003f1c <_fstat_r>
 80036b0:	2800      	cmp	r0, #0
 80036b2:	dbf2      	blt.n	800369a <__swhatbuf_r+0x12>
 80036b4:	9a01      	ldr	r2, [sp, #4]
 80036b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036be:	425a      	negs	r2, r3
 80036c0:	415a      	adcs	r2, r3
 80036c2:	602a      	str	r2, [r5, #0]
 80036c4:	e7ee      	b.n	80036a4 <__swhatbuf_r+0x1c>
 80036c6:	2340      	movs	r3, #64	; 0x40
 80036c8:	2000      	movs	r0, #0
 80036ca:	6023      	str	r3, [r4, #0]
 80036cc:	b016      	add	sp, #88	; 0x58
 80036ce:	bd70      	pop	{r4, r5, r6, pc}

080036d0 <__smakebuf_r>:
 80036d0:	898b      	ldrh	r3, [r1, #12]
 80036d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036d4:	079d      	lsls	r5, r3, #30
 80036d6:	4606      	mov	r6, r0
 80036d8:	460c      	mov	r4, r1
 80036da:	d507      	bpl.n	80036ec <__smakebuf_r+0x1c>
 80036dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	6123      	str	r3, [r4, #16]
 80036e4:	2301      	movs	r3, #1
 80036e6:	6163      	str	r3, [r4, #20]
 80036e8:	b002      	add	sp, #8
 80036ea:	bd70      	pop	{r4, r5, r6, pc}
 80036ec:	ab01      	add	r3, sp, #4
 80036ee:	466a      	mov	r2, sp
 80036f0:	f7ff ffca 	bl	8003688 <__swhatbuf_r>
 80036f4:	9900      	ldr	r1, [sp, #0]
 80036f6:	4605      	mov	r5, r0
 80036f8:	4630      	mov	r0, r6
 80036fa:	f000 f877 	bl	80037ec <_malloc_r>
 80036fe:	b948      	cbnz	r0, 8003714 <__smakebuf_r+0x44>
 8003700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003704:	059a      	lsls	r2, r3, #22
 8003706:	d4ef      	bmi.n	80036e8 <__smakebuf_r+0x18>
 8003708:	f023 0303 	bic.w	r3, r3, #3
 800370c:	f043 0302 	orr.w	r3, r3, #2
 8003710:	81a3      	strh	r3, [r4, #12]
 8003712:	e7e3      	b.n	80036dc <__smakebuf_r+0xc>
 8003714:	4b0d      	ldr	r3, [pc, #52]	; (800374c <__smakebuf_r+0x7c>)
 8003716:	62b3      	str	r3, [r6, #40]	; 0x28
 8003718:	89a3      	ldrh	r3, [r4, #12]
 800371a:	6020      	str	r0, [r4, #0]
 800371c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003720:	81a3      	strh	r3, [r4, #12]
 8003722:	9b00      	ldr	r3, [sp, #0]
 8003724:	6163      	str	r3, [r4, #20]
 8003726:	9b01      	ldr	r3, [sp, #4]
 8003728:	6120      	str	r0, [r4, #16]
 800372a:	b15b      	cbz	r3, 8003744 <__smakebuf_r+0x74>
 800372c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003730:	4630      	mov	r0, r6
 8003732:	f000 fc05 	bl	8003f40 <_isatty_r>
 8003736:	b128      	cbz	r0, 8003744 <__smakebuf_r+0x74>
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	f023 0303 	bic.w	r3, r3, #3
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	81a3      	strh	r3, [r4, #12]
 8003744:	89a3      	ldrh	r3, [r4, #12]
 8003746:	431d      	orrs	r5, r3
 8003748:	81a5      	strh	r5, [r4, #12]
 800374a:	e7cd      	b.n	80036e8 <__smakebuf_r+0x18>
 800374c:	0800353d 	.word	0x0800353d

08003750 <_free_r>:
 8003750:	b538      	push	{r3, r4, r5, lr}
 8003752:	4605      	mov	r5, r0
 8003754:	2900      	cmp	r1, #0
 8003756:	d045      	beq.n	80037e4 <_free_r+0x94>
 8003758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800375c:	1f0c      	subs	r4, r1, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	bfb8      	it	lt
 8003762:	18e4      	addlt	r4, r4, r3
 8003764:	f000 fc0e 	bl	8003f84 <__malloc_lock>
 8003768:	4a1f      	ldr	r2, [pc, #124]	; (80037e8 <_free_r+0x98>)
 800376a:	6813      	ldr	r3, [r2, #0]
 800376c:	4610      	mov	r0, r2
 800376e:	b933      	cbnz	r3, 800377e <_free_r+0x2e>
 8003770:	6063      	str	r3, [r4, #4]
 8003772:	6014      	str	r4, [r2, #0]
 8003774:	4628      	mov	r0, r5
 8003776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800377a:	f000 bc04 	b.w	8003f86 <__malloc_unlock>
 800377e:	42a3      	cmp	r3, r4
 8003780:	d90c      	bls.n	800379c <_free_r+0x4c>
 8003782:	6821      	ldr	r1, [r4, #0]
 8003784:	1862      	adds	r2, r4, r1
 8003786:	4293      	cmp	r3, r2
 8003788:	bf04      	itt	eq
 800378a:	681a      	ldreq	r2, [r3, #0]
 800378c:	685b      	ldreq	r3, [r3, #4]
 800378e:	6063      	str	r3, [r4, #4]
 8003790:	bf04      	itt	eq
 8003792:	1852      	addeq	r2, r2, r1
 8003794:	6022      	streq	r2, [r4, #0]
 8003796:	6004      	str	r4, [r0, #0]
 8003798:	e7ec      	b.n	8003774 <_free_r+0x24>
 800379a:	4613      	mov	r3, r2
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	b10a      	cbz	r2, 80037a4 <_free_r+0x54>
 80037a0:	42a2      	cmp	r2, r4
 80037a2:	d9fa      	bls.n	800379a <_free_r+0x4a>
 80037a4:	6819      	ldr	r1, [r3, #0]
 80037a6:	1858      	adds	r0, r3, r1
 80037a8:	42a0      	cmp	r0, r4
 80037aa:	d10b      	bne.n	80037c4 <_free_r+0x74>
 80037ac:	6820      	ldr	r0, [r4, #0]
 80037ae:	4401      	add	r1, r0
 80037b0:	1858      	adds	r0, r3, r1
 80037b2:	4282      	cmp	r2, r0
 80037b4:	6019      	str	r1, [r3, #0]
 80037b6:	d1dd      	bne.n	8003774 <_free_r+0x24>
 80037b8:	6810      	ldr	r0, [r2, #0]
 80037ba:	6852      	ldr	r2, [r2, #4]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	4401      	add	r1, r0
 80037c0:	6019      	str	r1, [r3, #0]
 80037c2:	e7d7      	b.n	8003774 <_free_r+0x24>
 80037c4:	d902      	bls.n	80037cc <_free_r+0x7c>
 80037c6:	230c      	movs	r3, #12
 80037c8:	602b      	str	r3, [r5, #0]
 80037ca:	e7d3      	b.n	8003774 <_free_r+0x24>
 80037cc:	6820      	ldr	r0, [r4, #0]
 80037ce:	1821      	adds	r1, r4, r0
 80037d0:	428a      	cmp	r2, r1
 80037d2:	bf04      	itt	eq
 80037d4:	6811      	ldreq	r1, [r2, #0]
 80037d6:	6852      	ldreq	r2, [r2, #4]
 80037d8:	6062      	str	r2, [r4, #4]
 80037da:	bf04      	itt	eq
 80037dc:	1809      	addeq	r1, r1, r0
 80037de:	6021      	streq	r1, [r4, #0]
 80037e0:	605c      	str	r4, [r3, #4]
 80037e2:	e7c7      	b.n	8003774 <_free_r+0x24>
 80037e4:	bd38      	pop	{r3, r4, r5, pc}
 80037e6:	bf00      	nop
 80037e8:	20000098 	.word	0x20000098

080037ec <_malloc_r>:
 80037ec:	b570      	push	{r4, r5, r6, lr}
 80037ee:	1ccd      	adds	r5, r1, #3
 80037f0:	f025 0503 	bic.w	r5, r5, #3
 80037f4:	3508      	adds	r5, #8
 80037f6:	2d0c      	cmp	r5, #12
 80037f8:	bf38      	it	cc
 80037fa:	250c      	movcc	r5, #12
 80037fc:	2d00      	cmp	r5, #0
 80037fe:	4606      	mov	r6, r0
 8003800:	db01      	blt.n	8003806 <_malloc_r+0x1a>
 8003802:	42a9      	cmp	r1, r5
 8003804:	d903      	bls.n	800380e <_malloc_r+0x22>
 8003806:	230c      	movs	r3, #12
 8003808:	6033      	str	r3, [r6, #0]
 800380a:	2000      	movs	r0, #0
 800380c:	bd70      	pop	{r4, r5, r6, pc}
 800380e:	f000 fbb9 	bl	8003f84 <__malloc_lock>
 8003812:	4a21      	ldr	r2, [pc, #132]	; (8003898 <_malloc_r+0xac>)
 8003814:	6814      	ldr	r4, [r2, #0]
 8003816:	4621      	mov	r1, r4
 8003818:	b991      	cbnz	r1, 8003840 <_malloc_r+0x54>
 800381a:	4c20      	ldr	r4, [pc, #128]	; (800389c <_malloc_r+0xb0>)
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	b91b      	cbnz	r3, 8003828 <_malloc_r+0x3c>
 8003820:	4630      	mov	r0, r6
 8003822:	f000 fb05 	bl	8003e30 <_sbrk_r>
 8003826:	6020      	str	r0, [r4, #0]
 8003828:	4629      	mov	r1, r5
 800382a:	4630      	mov	r0, r6
 800382c:	f000 fb00 	bl	8003e30 <_sbrk_r>
 8003830:	1c43      	adds	r3, r0, #1
 8003832:	d124      	bne.n	800387e <_malloc_r+0x92>
 8003834:	230c      	movs	r3, #12
 8003836:	6033      	str	r3, [r6, #0]
 8003838:	4630      	mov	r0, r6
 800383a:	f000 fba4 	bl	8003f86 <__malloc_unlock>
 800383e:	e7e4      	b.n	800380a <_malloc_r+0x1e>
 8003840:	680b      	ldr	r3, [r1, #0]
 8003842:	1b5b      	subs	r3, r3, r5
 8003844:	d418      	bmi.n	8003878 <_malloc_r+0x8c>
 8003846:	2b0b      	cmp	r3, #11
 8003848:	d90f      	bls.n	800386a <_malloc_r+0x7e>
 800384a:	600b      	str	r3, [r1, #0]
 800384c:	50cd      	str	r5, [r1, r3]
 800384e:	18cc      	adds	r4, r1, r3
 8003850:	4630      	mov	r0, r6
 8003852:	f000 fb98 	bl	8003f86 <__malloc_unlock>
 8003856:	f104 000b 	add.w	r0, r4, #11
 800385a:	1d23      	adds	r3, r4, #4
 800385c:	f020 0007 	bic.w	r0, r0, #7
 8003860:	1ac3      	subs	r3, r0, r3
 8003862:	d0d3      	beq.n	800380c <_malloc_r+0x20>
 8003864:	425a      	negs	r2, r3
 8003866:	50e2      	str	r2, [r4, r3]
 8003868:	e7d0      	b.n	800380c <_malloc_r+0x20>
 800386a:	428c      	cmp	r4, r1
 800386c:	684b      	ldr	r3, [r1, #4]
 800386e:	bf16      	itet	ne
 8003870:	6063      	strne	r3, [r4, #4]
 8003872:	6013      	streq	r3, [r2, #0]
 8003874:	460c      	movne	r4, r1
 8003876:	e7eb      	b.n	8003850 <_malloc_r+0x64>
 8003878:	460c      	mov	r4, r1
 800387a:	6849      	ldr	r1, [r1, #4]
 800387c:	e7cc      	b.n	8003818 <_malloc_r+0x2c>
 800387e:	1cc4      	adds	r4, r0, #3
 8003880:	f024 0403 	bic.w	r4, r4, #3
 8003884:	42a0      	cmp	r0, r4
 8003886:	d005      	beq.n	8003894 <_malloc_r+0xa8>
 8003888:	1a21      	subs	r1, r4, r0
 800388a:	4630      	mov	r0, r6
 800388c:	f000 fad0 	bl	8003e30 <_sbrk_r>
 8003890:	3001      	adds	r0, #1
 8003892:	d0cf      	beq.n	8003834 <_malloc_r+0x48>
 8003894:	6025      	str	r5, [r4, #0]
 8003896:	e7db      	b.n	8003850 <_malloc_r+0x64>
 8003898:	20000098 	.word	0x20000098
 800389c:	2000009c 	.word	0x2000009c

080038a0 <__sfputc_r>:
 80038a0:	6893      	ldr	r3, [r2, #8]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	b410      	push	{r4}
 80038a8:	6093      	str	r3, [r2, #8]
 80038aa:	da08      	bge.n	80038be <__sfputc_r+0x1e>
 80038ac:	6994      	ldr	r4, [r2, #24]
 80038ae:	42a3      	cmp	r3, r4
 80038b0:	db01      	blt.n	80038b6 <__sfputc_r+0x16>
 80038b2:	290a      	cmp	r1, #10
 80038b4:	d103      	bne.n	80038be <__sfputc_r+0x1e>
 80038b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038ba:	f7ff bcab 	b.w	8003214 <__swbuf_r>
 80038be:	6813      	ldr	r3, [r2, #0]
 80038c0:	1c58      	adds	r0, r3, #1
 80038c2:	6010      	str	r0, [r2, #0]
 80038c4:	7019      	strb	r1, [r3, #0]
 80038c6:	4608      	mov	r0, r1
 80038c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <__sfputs_r>:
 80038ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d0:	4606      	mov	r6, r0
 80038d2:	460f      	mov	r7, r1
 80038d4:	4614      	mov	r4, r2
 80038d6:	18d5      	adds	r5, r2, r3
 80038d8:	42ac      	cmp	r4, r5
 80038da:	d101      	bne.n	80038e0 <__sfputs_r+0x12>
 80038dc:	2000      	movs	r0, #0
 80038de:	e007      	b.n	80038f0 <__sfputs_r+0x22>
 80038e0:	463a      	mov	r2, r7
 80038e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038e6:	4630      	mov	r0, r6
 80038e8:	f7ff ffda 	bl	80038a0 <__sfputc_r>
 80038ec:	1c43      	adds	r3, r0, #1
 80038ee:	d1f3      	bne.n	80038d8 <__sfputs_r+0xa>
 80038f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038f4 <_vfiprintf_r>:
 80038f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f8:	460c      	mov	r4, r1
 80038fa:	b09d      	sub	sp, #116	; 0x74
 80038fc:	4617      	mov	r7, r2
 80038fe:	461d      	mov	r5, r3
 8003900:	4606      	mov	r6, r0
 8003902:	b118      	cbz	r0, 800390c <_vfiprintf_r+0x18>
 8003904:	6983      	ldr	r3, [r0, #24]
 8003906:	b90b      	cbnz	r3, 800390c <_vfiprintf_r+0x18>
 8003908:	f7ff fe34 	bl	8003574 <__sinit>
 800390c:	4b7c      	ldr	r3, [pc, #496]	; (8003b00 <_vfiprintf_r+0x20c>)
 800390e:	429c      	cmp	r4, r3
 8003910:	d158      	bne.n	80039c4 <_vfiprintf_r+0xd0>
 8003912:	6874      	ldr	r4, [r6, #4]
 8003914:	89a3      	ldrh	r3, [r4, #12]
 8003916:	0718      	lsls	r0, r3, #28
 8003918:	d55e      	bpl.n	80039d8 <_vfiprintf_r+0xe4>
 800391a:	6923      	ldr	r3, [r4, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d05b      	beq.n	80039d8 <_vfiprintf_r+0xe4>
 8003920:	2300      	movs	r3, #0
 8003922:	9309      	str	r3, [sp, #36]	; 0x24
 8003924:	2320      	movs	r3, #32
 8003926:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800392a:	2330      	movs	r3, #48	; 0x30
 800392c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003930:	9503      	str	r5, [sp, #12]
 8003932:	f04f 0b01 	mov.w	fp, #1
 8003936:	46b8      	mov	r8, r7
 8003938:	4645      	mov	r5, r8
 800393a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800393e:	b10b      	cbz	r3, 8003944 <_vfiprintf_r+0x50>
 8003940:	2b25      	cmp	r3, #37	; 0x25
 8003942:	d154      	bne.n	80039ee <_vfiprintf_r+0xfa>
 8003944:	ebb8 0a07 	subs.w	sl, r8, r7
 8003948:	d00b      	beq.n	8003962 <_vfiprintf_r+0x6e>
 800394a:	4653      	mov	r3, sl
 800394c:	463a      	mov	r2, r7
 800394e:	4621      	mov	r1, r4
 8003950:	4630      	mov	r0, r6
 8003952:	f7ff ffbc 	bl	80038ce <__sfputs_r>
 8003956:	3001      	adds	r0, #1
 8003958:	f000 80c2 	beq.w	8003ae0 <_vfiprintf_r+0x1ec>
 800395c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800395e:	4453      	add	r3, sl
 8003960:	9309      	str	r3, [sp, #36]	; 0x24
 8003962:	f898 3000 	ldrb.w	r3, [r8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80ba 	beq.w	8003ae0 <_vfiprintf_r+0x1ec>
 800396c:	2300      	movs	r3, #0
 800396e:	f04f 32ff 	mov.w	r2, #4294967295
 8003972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003976:	9304      	str	r3, [sp, #16]
 8003978:	9307      	str	r3, [sp, #28]
 800397a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800397e:	931a      	str	r3, [sp, #104]	; 0x68
 8003980:	46a8      	mov	r8, r5
 8003982:	2205      	movs	r2, #5
 8003984:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003988:	485e      	ldr	r0, [pc, #376]	; (8003b04 <_vfiprintf_r+0x210>)
 800398a:	f7fc fc29 	bl	80001e0 <memchr>
 800398e:	9b04      	ldr	r3, [sp, #16]
 8003990:	bb78      	cbnz	r0, 80039f2 <_vfiprintf_r+0xfe>
 8003992:	06d9      	lsls	r1, r3, #27
 8003994:	bf44      	itt	mi
 8003996:	2220      	movmi	r2, #32
 8003998:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800399c:	071a      	lsls	r2, r3, #28
 800399e:	bf44      	itt	mi
 80039a0:	222b      	movmi	r2, #43	; 0x2b
 80039a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039a6:	782a      	ldrb	r2, [r5, #0]
 80039a8:	2a2a      	cmp	r2, #42	; 0x2a
 80039aa:	d02a      	beq.n	8003a02 <_vfiprintf_r+0x10e>
 80039ac:	9a07      	ldr	r2, [sp, #28]
 80039ae:	46a8      	mov	r8, r5
 80039b0:	2000      	movs	r0, #0
 80039b2:	250a      	movs	r5, #10
 80039b4:	4641      	mov	r1, r8
 80039b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039ba:	3b30      	subs	r3, #48	; 0x30
 80039bc:	2b09      	cmp	r3, #9
 80039be:	d969      	bls.n	8003a94 <_vfiprintf_r+0x1a0>
 80039c0:	b360      	cbz	r0, 8003a1c <_vfiprintf_r+0x128>
 80039c2:	e024      	b.n	8003a0e <_vfiprintf_r+0x11a>
 80039c4:	4b50      	ldr	r3, [pc, #320]	; (8003b08 <_vfiprintf_r+0x214>)
 80039c6:	429c      	cmp	r4, r3
 80039c8:	d101      	bne.n	80039ce <_vfiprintf_r+0xda>
 80039ca:	68b4      	ldr	r4, [r6, #8]
 80039cc:	e7a2      	b.n	8003914 <_vfiprintf_r+0x20>
 80039ce:	4b4f      	ldr	r3, [pc, #316]	; (8003b0c <_vfiprintf_r+0x218>)
 80039d0:	429c      	cmp	r4, r3
 80039d2:	bf08      	it	eq
 80039d4:	68f4      	ldreq	r4, [r6, #12]
 80039d6:	e79d      	b.n	8003914 <_vfiprintf_r+0x20>
 80039d8:	4621      	mov	r1, r4
 80039da:	4630      	mov	r0, r6
 80039dc:	f7ff fc6c 	bl	80032b8 <__swsetup_r>
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d09d      	beq.n	8003920 <_vfiprintf_r+0x2c>
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295
 80039e8:	b01d      	add	sp, #116	; 0x74
 80039ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ee:	46a8      	mov	r8, r5
 80039f0:	e7a2      	b.n	8003938 <_vfiprintf_r+0x44>
 80039f2:	4a44      	ldr	r2, [pc, #272]	; (8003b04 <_vfiprintf_r+0x210>)
 80039f4:	1a80      	subs	r0, r0, r2
 80039f6:	fa0b f000 	lsl.w	r0, fp, r0
 80039fa:	4318      	orrs	r0, r3
 80039fc:	9004      	str	r0, [sp, #16]
 80039fe:	4645      	mov	r5, r8
 8003a00:	e7be      	b.n	8003980 <_vfiprintf_r+0x8c>
 8003a02:	9a03      	ldr	r2, [sp, #12]
 8003a04:	1d11      	adds	r1, r2, #4
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	9103      	str	r1, [sp, #12]
 8003a0a:	2a00      	cmp	r2, #0
 8003a0c:	db01      	blt.n	8003a12 <_vfiprintf_r+0x11e>
 8003a0e:	9207      	str	r2, [sp, #28]
 8003a10:	e004      	b.n	8003a1c <_vfiprintf_r+0x128>
 8003a12:	4252      	negs	r2, r2
 8003a14:	f043 0302 	orr.w	r3, r3, #2
 8003a18:	9207      	str	r2, [sp, #28]
 8003a1a:	9304      	str	r3, [sp, #16]
 8003a1c:	f898 3000 	ldrb.w	r3, [r8]
 8003a20:	2b2e      	cmp	r3, #46	; 0x2e
 8003a22:	d10e      	bne.n	8003a42 <_vfiprintf_r+0x14e>
 8003a24:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003a28:	2b2a      	cmp	r3, #42	; 0x2a
 8003a2a:	d138      	bne.n	8003a9e <_vfiprintf_r+0x1aa>
 8003a2c:	9b03      	ldr	r3, [sp, #12]
 8003a2e:	1d1a      	adds	r2, r3, #4
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	9203      	str	r2, [sp, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bfb8      	it	lt
 8003a38:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a3c:	f108 0802 	add.w	r8, r8, #2
 8003a40:	9305      	str	r3, [sp, #20]
 8003a42:	4d33      	ldr	r5, [pc, #204]	; (8003b10 <_vfiprintf_r+0x21c>)
 8003a44:	f898 1000 	ldrb.w	r1, [r8]
 8003a48:	2203      	movs	r2, #3
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	f7fc fbc8 	bl	80001e0 <memchr>
 8003a50:	b140      	cbz	r0, 8003a64 <_vfiprintf_r+0x170>
 8003a52:	2340      	movs	r3, #64	; 0x40
 8003a54:	1b40      	subs	r0, r0, r5
 8003a56:	fa03 f000 	lsl.w	r0, r3, r0
 8003a5a:	9b04      	ldr	r3, [sp, #16]
 8003a5c:	4303      	orrs	r3, r0
 8003a5e:	f108 0801 	add.w	r8, r8, #1
 8003a62:	9304      	str	r3, [sp, #16]
 8003a64:	f898 1000 	ldrb.w	r1, [r8]
 8003a68:	482a      	ldr	r0, [pc, #168]	; (8003b14 <_vfiprintf_r+0x220>)
 8003a6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a6e:	2206      	movs	r2, #6
 8003a70:	f108 0701 	add.w	r7, r8, #1
 8003a74:	f7fc fbb4 	bl	80001e0 <memchr>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d037      	beq.n	8003aec <_vfiprintf_r+0x1f8>
 8003a7c:	4b26      	ldr	r3, [pc, #152]	; (8003b18 <_vfiprintf_r+0x224>)
 8003a7e:	bb1b      	cbnz	r3, 8003ac8 <_vfiprintf_r+0x1d4>
 8003a80:	9b03      	ldr	r3, [sp, #12]
 8003a82:	3307      	adds	r3, #7
 8003a84:	f023 0307 	bic.w	r3, r3, #7
 8003a88:	3308      	adds	r3, #8
 8003a8a:	9303      	str	r3, [sp, #12]
 8003a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a8e:	444b      	add	r3, r9
 8003a90:	9309      	str	r3, [sp, #36]	; 0x24
 8003a92:	e750      	b.n	8003936 <_vfiprintf_r+0x42>
 8003a94:	fb05 3202 	mla	r2, r5, r2, r3
 8003a98:	2001      	movs	r0, #1
 8003a9a:	4688      	mov	r8, r1
 8003a9c:	e78a      	b.n	80039b4 <_vfiprintf_r+0xc0>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f108 0801 	add.w	r8, r8, #1
 8003aa4:	9305      	str	r3, [sp, #20]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	250a      	movs	r5, #10
 8003aaa:	4640      	mov	r0, r8
 8003aac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ab0:	3a30      	subs	r2, #48	; 0x30
 8003ab2:	2a09      	cmp	r2, #9
 8003ab4:	d903      	bls.n	8003abe <_vfiprintf_r+0x1ca>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0c3      	beq.n	8003a42 <_vfiprintf_r+0x14e>
 8003aba:	9105      	str	r1, [sp, #20]
 8003abc:	e7c1      	b.n	8003a42 <_vfiprintf_r+0x14e>
 8003abe:	fb05 2101 	mla	r1, r5, r1, r2
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	4680      	mov	r8, r0
 8003ac6:	e7f0      	b.n	8003aaa <_vfiprintf_r+0x1b6>
 8003ac8:	ab03      	add	r3, sp, #12
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	4622      	mov	r2, r4
 8003ace:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <_vfiprintf_r+0x228>)
 8003ad0:	a904      	add	r1, sp, #16
 8003ad2:	4630      	mov	r0, r6
 8003ad4:	f3af 8000 	nop.w
 8003ad8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003adc:	4681      	mov	r9, r0
 8003ade:	d1d5      	bne.n	8003a8c <_vfiprintf_r+0x198>
 8003ae0:	89a3      	ldrh	r3, [r4, #12]
 8003ae2:	065b      	lsls	r3, r3, #25
 8003ae4:	f53f af7e 	bmi.w	80039e4 <_vfiprintf_r+0xf0>
 8003ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003aea:	e77d      	b.n	80039e8 <_vfiprintf_r+0xf4>
 8003aec:	ab03      	add	r3, sp, #12
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	4622      	mov	r2, r4
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <_vfiprintf_r+0x228>)
 8003af4:	a904      	add	r1, sp, #16
 8003af6:	4630      	mov	r0, r6
 8003af8:	f000 f888 	bl	8003c0c <_printf_i>
 8003afc:	e7ec      	b.n	8003ad8 <_vfiprintf_r+0x1e4>
 8003afe:	bf00      	nop
 8003b00:	08004058 	.word	0x08004058
 8003b04:	08004098 	.word	0x08004098
 8003b08:	08004078 	.word	0x08004078
 8003b0c:	08004038 	.word	0x08004038
 8003b10:	0800409e 	.word	0x0800409e
 8003b14:	080040a2 	.word	0x080040a2
 8003b18:	00000000 	.word	0x00000000
 8003b1c:	080038cf 	.word	0x080038cf

08003b20 <_printf_common>:
 8003b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b24:	4691      	mov	r9, r2
 8003b26:	461f      	mov	r7, r3
 8003b28:	688a      	ldr	r2, [r1, #8]
 8003b2a:	690b      	ldr	r3, [r1, #16]
 8003b2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b30:	4293      	cmp	r3, r2
 8003b32:	bfb8      	it	lt
 8003b34:	4613      	movlt	r3, r2
 8003b36:	f8c9 3000 	str.w	r3, [r9]
 8003b3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b3e:	4606      	mov	r6, r0
 8003b40:	460c      	mov	r4, r1
 8003b42:	b112      	cbz	r2, 8003b4a <_printf_common+0x2a>
 8003b44:	3301      	adds	r3, #1
 8003b46:	f8c9 3000 	str.w	r3, [r9]
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	0699      	lsls	r1, r3, #26
 8003b4e:	bf42      	ittt	mi
 8003b50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b54:	3302      	addmi	r3, #2
 8003b56:	f8c9 3000 	strmi.w	r3, [r9]
 8003b5a:	6825      	ldr	r5, [r4, #0]
 8003b5c:	f015 0506 	ands.w	r5, r5, #6
 8003b60:	d107      	bne.n	8003b72 <_printf_common+0x52>
 8003b62:	f104 0a19 	add.w	sl, r4, #25
 8003b66:	68e3      	ldr	r3, [r4, #12]
 8003b68:	f8d9 2000 	ldr.w	r2, [r9]
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	42ab      	cmp	r3, r5
 8003b70:	dc28      	bgt.n	8003bc4 <_printf_common+0xa4>
 8003b72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b76:	6822      	ldr	r2, [r4, #0]
 8003b78:	3300      	adds	r3, #0
 8003b7a:	bf18      	it	ne
 8003b7c:	2301      	movne	r3, #1
 8003b7e:	0692      	lsls	r2, r2, #26
 8003b80:	d42d      	bmi.n	8003bde <_printf_common+0xbe>
 8003b82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b86:	4639      	mov	r1, r7
 8003b88:	4630      	mov	r0, r6
 8003b8a:	47c0      	blx	r8
 8003b8c:	3001      	adds	r0, #1
 8003b8e:	d020      	beq.n	8003bd2 <_printf_common+0xb2>
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	68e5      	ldr	r5, [r4, #12]
 8003b94:	f8d9 2000 	ldr.w	r2, [r9]
 8003b98:	f003 0306 	and.w	r3, r3, #6
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	bf08      	it	eq
 8003ba0:	1aad      	subeq	r5, r5, r2
 8003ba2:	68a3      	ldr	r3, [r4, #8]
 8003ba4:	6922      	ldr	r2, [r4, #16]
 8003ba6:	bf0c      	ite	eq
 8003ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bac:	2500      	movne	r5, #0
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	bfc4      	itt	gt
 8003bb2:	1a9b      	subgt	r3, r3, r2
 8003bb4:	18ed      	addgt	r5, r5, r3
 8003bb6:	f04f 0900 	mov.w	r9, #0
 8003bba:	341a      	adds	r4, #26
 8003bbc:	454d      	cmp	r5, r9
 8003bbe:	d11a      	bne.n	8003bf6 <_printf_common+0xd6>
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	e008      	b.n	8003bd6 <_printf_common+0xb6>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	4652      	mov	r2, sl
 8003bc8:	4639      	mov	r1, r7
 8003bca:	4630      	mov	r0, r6
 8003bcc:	47c0      	blx	r8
 8003bce:	3001      	adds	r0, #1
 8003bd0:	d103      	bne.n	8003bda <_printf_common+0xba>
 8003bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bda:	3501      	adds	r5, #1
 8003bdc:	e7c3      	b.n	8003b66 <_printf_common+0x46>
 8003bde:	18e1      	adds	r1, r4, r3
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	2030      	movs	r0, #48	; 0x30
 8003be4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003be8:	4422      	add	r2, r4
 8003bea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bf2:	3302      	adds	r3, #2
 8003bf4:	e7c5      	b.n	8003b82 <_printf_common+0x62>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	4622      	mov	r2, r4
 8003bfa:	4639      	mov	r1, r7
 8003bfc:	4630      	mov	r0, r6
 8003bfe:	47c0      	blx	r8
 8003c00:	3001      	adds	r0, #1
 8003c02:	d0e6      	beq.n	8003bd2 <_printf_common+0xb2>
 8003c04:	f109 0901 	add.w	r9, r9, #1
 8003c08:	e7d8      	b.n	8003bbc <_printf_common+0x9c>
	...

08003c0c <_printf_i>:
 8003c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003c14:	460c      	mov	r4, r1
 8003c16:	7e09      	ldrb	r1, [r1, #24]
 8003c18:	b085      	sub	sp, #20
 8003c1a:	296e      	cmp	r1, #110	; 0x6e
 8003c1c:	4617      	mov	r7, r2
 8003c1e:	4606      	mov	r6, r0
 8003c20:	4698      	mov	r8, r3
 8003c22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c24:	f000 80b3 	beq.w	8003d8e <_printf_i+0x182>
 8003c28:	d822      	bhi.n	8003c70 <_printf_i+0x64>
 8003c2a:	2963      	cmp	r1, #99	; 0x63
 8003c2c:	d036      	beq.n	8003c9c <_printf_i+0x90>
 8003c2e:	d80a      	bhi.n	8003c46 <_printf_i+0x3a>
 8003c30:	2900      	cmp	r1, #0
 8003c32:	f000 80b9 	beq.w	8003da8 <_printf_i+0x19c>
 8003c36:	2958      	cmp	r1, #88	; 0x58
 8003c38:	f000 8083 	beq.w	8003d42 <_printf_i+0x136>
 8003c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003c44:	e032      	b.n	8003cac <_printf_i+0xa0>
 8003c46:	2964      	cmp	r1, #100	; 0x64
 8003c48:	d001      	beq.n	8003c4e <_printf_i+0x42>
 8003c4a:	2969      	cmp	r1, #105	; 0x69
 8003c4c:	d1f6      	bne.n	8003c3c <_printf_i+0x30>
 8003c4e:	6820      	ldr	r0, [r4, #0]
 8003c50:	6813      	ldr	r3, [r2, #0]
 8003c52:	0605      	lsls	r5, r0, #24
 8003c54:	f103 0104 	add.w	r1, r3, #4
 8003c58:	d52a      	bpl.n	8003cb0 <_printf_i+0xa4>
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6011      	str	r1, [r2, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	da03      	bge.n	8003c6a <_printf_i+0x5e>
 8003c62:	222d      	movs	r2, #45	; 0x2d
 8003c64:	425b      	negs	r3, r3
 8003c66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c6a:	486f      	ldr	r0, [pc, #444]	; (8003e28 <_printf_i+0x21c>)
 8003c6c:	220a      	movs	r2, #10
 8003c6e:	e039      	b.n	8003ce4 <_printf_i+0xd8>
 8003c70:	2973      	cmp	r1, #115	; 0x73
 8003c72:	f000 809d 	beq.w	8003db0 <_printf_i+0x1a4>
 8003c76:	d808      	bhi.n	8003c8a <_printf_i+0x7e>
 8003c78:	296f      	cmp	r1, #111	; 0x6f
 8003c7a:	d020      	beq.n	8003cbe <_printf_i+0xb2>
 8003c7c:	2970      	cmp	r1, #112	; 0x70
 8003c7e:	d1dd      	bne.n	8003c3c <_printf_i+0x30>
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	f043 0320 	orr.w	r3, r3, #32
 8003c86:	6023      	str	r3, [r4, #0]
 8003c88:	e003      	b.n	8003c92 <_printf_i+0x86>
 8003c8a:	2975      	cmp	r1, #117	; 0x75
 8003c8c:	d017      	beq.n	8003cbe <_printf_i+0xb2>
 8003c8e:	2978      	cmp	r1, #120	; 0x78
 8003c90:	d1d4      	bne.n	8003c3c <_printf_i+0x30>
 8003c92:	2378      	movs	r3, #120	; 0x78
 8003c94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c98:	4864      	ldr	r0, [pc, #400]	; (8003e2c <_printf_i+0x220>)
 8003c9a:	e055      	b.n	8003d48 <_printf_i+0x13c>
 8003c9c:	6813      	ldr	r3, [r2, #0]
 8003c9e:	1d19      	adds	r1, r3, #4
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6011      	str	r1, [r2, #0]
 8003ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cac:	2301      	movs	r3, #1
 8003cae:	e08c      	b.n	8003dca <_printf_i+0x1be>
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6011      	str	r1, [r2, #0]
 8003cb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cb8:	bf18      	it	ne
 8003cba:	b21b      	sxthne	r3, r3
 8003cbc:	e7cf      	b.n	8003c5e <_printf_i+0x52>
 8003cbe:	6813      	ldr	r3, [r2, #0]
 8003cc0:	6825      	ldr	r5, [r4, #0]
 8003cc2:	1d18      	adds	r0, r3, #4
 8003cc4:	6010      	str	r0, [r2, #0]
 8003cc6:	0628      	lsls	r0, r5, #24
 8003cc8:	d501      	bpl.n	8003cce <_printf_i+0xc2>
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	e002      	b.n	8003cd4 <_printf_i+0xc8>
 8003cce:	0668      	lsls	r0, r5, #25
 8003cd0:	d5fb      	bpl.n	8003cca <_printf_i+0xbe>
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	4854      	ldr	r0, [pc, #336]	; (8003e28 <_printf_i+0x21c>)
 8003cd6:	296f      	cmp	r1, #111	; 0x6f
 8003cd8:	bf14      	ite	ne
 8003cda:	220a      	movne	r2, #10
 8003cdc:	2208      	moveq	r2, #8
 8003cde:	2100      	movs	r1, #0
 8003ce0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ce4:	6865      	ldr	r5, [r4, #4]
 8003ce6:	60a5      	str	r5, [r4, #8]
 8003ce8:	2d00      	cmp	r5, #0
 8003cea:	f2c0 8095 	blt.w	8003e18 <_printf_i+0x20c>
 8003cee:	6821      	ldr	r1, [r4, #0]
 8003cf0:	f021 0104 	bic.w	r1, r1, #4
 8003cf4:	6021      	str	r1, [r4, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d13d      	bne.n	8003d76 <_printf_i+0x16a>
 8003cfa:	2d00      	cmp	r5, #0
 8003cfc:	f040 808e 	bne.w	8003e1c <_printf_i+0x210>
 8003d00:	4665      	mov	r5, ip
 8003d02:	2a08      	cmp	r2, #8
 8003d04:	d10b      	bne.n	8003d1e <_printf_i+0x112>
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	07db      	lsls	r3, r3, #31
 8003d0a:	d508      	bpl.n	8003d1e <_printf_i+0x112>
 8003d0c:	6923      	ldr	r3, [r4, #16]
 8003d0e:	6862      	ldr	r2, [r4, #4]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	bfde      	ittt	le
 8003d14:	2330      	movle	r3, #48	; 0x30
 8003d16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d1e:	ebac 0305 	sub.w	r3, ip, r5
 8003d22:	6123      	str	r3, [r4, #16]
 8003d24:	f8cd 8000 	str.w	r8, [sp]
 8003d28:	463b      	mov	r3, r7
 8003d2a:	aa03      	add	r2, sp, #12
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	4630      	mov	r0, r6
 8003d30:	f7ff fef6 	bl	8003b20 <_printf_common>
 8003d34:	3001      	adds	r0, #1
 8003d36:	d14d      	bne.n	8003dd4 <_printf_i+0x1c8>
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3c:	b005      	add	sp, #20
 8003d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d42:	4839      	ldr	r0, [pc, #228]	; (8003e28 <_printf_i+0x21c>)
 8003d44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003d48:	6813      	ldr	r3, [r2, #0]
 8003d4a:	6821      	ldr	r1, [r4, #0]
 8003d4c:	1d1d      	adds	r5, r3, #4
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6015      	str	r5, [r2, #0]
 8003d52:	060a      	lsls	r2, r1, #24
 8003d54:	d50b      	bpl.n	8003d6e <_printf_i+0x162>
 8003d56:	07ca      	lsls	r2, r1, #31
 8003d58:	bf44      	itt	mi
 8003d5a:	f041 0120 	orrmi.w	r1, r1, #32
 8003d5e:	6021      	strmi	r1, [r4, #0]
 8003d60:	b91b      	cbnz	r3, 8003d6a <_printf_i+0x15e>
 8003d62:	6822      	ldr	r2, [r4, #0]
 8003d64:	f022 0220 	bic.w	r2, r2, #32
 8003d68:	6022      	str	r2, [r4, #0]
 8003d6a:	2210      	movs	r2, #16
 8003d6c:	e7b7      	b.n	8003cde <_printf_i+0xd2>
 8003d6e:	064d      	lsls	r5, r1, #25
 8003d70:	bf48      	it	mi
 8003d72:	b29b      	uxthmi	r3, r3
 8003d74:	e7ef      	b.n	8003d56 <_printf_i+0x14a>
 8003d76:	4665      	mov	r5, ip
 8003d78:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d7c:	fb02 3311 	mls	r3, r2, r1, r3
 8003d80:	5cc3      	ldrb	r3, [r0, r3]
 8003d82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d86:	460b      	mov	r3, r1
 8003d88:	2900      	cmp	r1, #0
 8003d8a:	d1f5      	bne.n	8003d78 <_printf_i+0x16c>
 8003d8c:	e7b9      	b.n	8003d02 <_printf_i+0xf6>
 8003d8e:	6813      	ldr	r3, [r2, #0]
 8003d90:	6825      	ldr	r5, [r4, #0]
 8003d92:	6961      	ldr	r1, [r4, #20]
 8003d94:	1d18      	adds	r0, r3, #4
 8003d96:	6010      	str	r0, [r2, #0]
 8003d98:	0628      	lsls	r0, r5, #24
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	d501      	bpl.n	8003da2 <_printf_i+0x196>
 8003d9e:	6019      	str	r1, [r3, #0]
 8003da0:	e002      	b.n	8003da8 <_printf_i+0x19c>
 8003da2:	066a      	lsls	r2, r5, #25
 8003da4:	d5fb      	bpl.n	8003d9e <_printf_i+0x192>
 8003da6:	8019      	strh	r1, [r3, #0]
 8003da8:	2300      	movs	r3, #0
 8003daa:	6123      	str	r3, [r4, #16]
 8003dac:	4665      	mov	r5, ip
 8003dae:	e7b9      	b.n	8003d24 <_printf_i+0x118>
 8003db0:	6813      	ldr	r3, [r2, #0]
 8003db2:	1d19      	adds	r1, r3, #4
 8003db4:	6011      	str	r1, [r2, #0]
 8003db6:	681d      	ldr	r5, [r3, #0]
 8003db8:	6862      	ldr	r2, [r4, #4]
 8003dba:	2100      	movs	r1, #0
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f7fc fa0f 	bl	80001e0 <memchr>
 8003dc2:	b108      	cbz	r0, 8003dc8 <_printf_i+0x1bc>
 8003dc4:	1b40      	subs	r0, r0, r5
 8003dc6:	6060      	str	r0, [r4, #4]
 8003dc8:	6863      	ldr	r3, [r4, #4]
 8003dca:	6123      	str	r3, [r4, #16]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dd2:	e7a7      	b.n	8003d24 <_printf_i+0x118>
 8003dd4:	6923      	ldr	r3, [r4, #16]
 8003dd6:	462a      	mov	r2, r5
 8003dd8:	4639      	mov	r1, r7
 8003dda:	4630      	mov	r0, r6
 8003ddc:	47c0      	blx	r8
 8003dde:	3001      	adds	r0, #1
 8003de0:	d0aa      	beq.n	8003d38 <_printf_i+0x12c>
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	079b      	lsls	r3, r3, #30
 8003de6:	d413      	bmi.n	8003e10 <_printf_i+0x204>
 8003de8:	68e0      	ldr	r0, [r4, #12]
 8003dea:	9b03      	ldr	r3, [sp, #12]
 8003dec:	4298      	cmp	r0, r3
 8003dee:	bfb8      	it	lt
 8003df0:	4618      	movlt	r0, r3
 8003df2:	e7a3      	b.n	8003d3c <_printf_i+0x130>
 8003df4:	2301      	movs	r3, #1
 8003df6:	464a      	mov	r2, r9
 8003df8:	4639      	mov	r1, r7
 8003dfa:	4630      	mov	r0, r6
 8003dfc:	47c0      	blx	r8
 8003dfe:	3001      	adds	r0, #1
 8003e00:	d09a      	beq.n	8003d38 <_printf_i+0x12c>
 8003e02:	3501      	adds	r5, #1
 8003e04:	68e3      	ldr	r3, [r4, #12]
 8003e06:	9a03      	ldr	r2, [sp, #12]
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	42ab      	cmp	r3, r5
 8003e0c:	dcf2      	bgt.n	8003df4 <_printf_i+0x1e8>
 8003e0e:	e7eb      	b.n	8003de8 <_printf_i+0x1dc>
 8003e10:	2500      	movs	r5, #0
 8003e12:	f104 0919 	add.w	r9, r4, #25
 8003e16:	e7f5      	b.n	8003e04 <_printf_i+0x1f8>
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1ac      	bne.n	8003d76 <_printf_i+0x16a>
 8003e1c:	7803      	ldrb	r3, [r0, #0]
 8003e1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e26:	e76c      	b.n	8003d02 <_printf_i+0xf6>
 8003e28:	080040a9 	.word	0x080040a9
 8003e2c:	080040ba 	.word	0x080040ba

08003e30 <_sbrk_r>:
 8003e30:	b538      	push	{r3, r4, r5, lr}
 8003e32:	4c06      	ldr	r4, [pc, #24]	; (8003e4c <_sbrk_r+0x1c>)
 8003e34:	2300      	movs	r3, #0
 8003e36:	4605      	mov	r5, r0
 8003e38:	4608      	mov	r0, r1
 8003e3a:	6023      	str	r3, [r4, #0]
 8003e3c:	f7fc ffc0 	bl	8000dc0 <_sbrk>
 8003e40:	1c43      	adds	r3, r0, #1
 8003e42:	d102      	bne.n	8003e4a <_sbrk_r+0x1a>
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	b103      	cbz	r3, 8003e4a <_sbrk_r+0x1a>
 8003e48:	602b      	str	r3, [r5, #0]
 8003e4a:	bd38      	pop	{r3, r4, r5, pc}
 8003e4c:	20000124 	.word	0x20000124

08003e50 <__sread>:
 8003e50:	b510      	push	{r4, lr}
 8003e52:	460c      	mov	r4, r1
 8003e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e58:	f000 f896 	bl	8003f88 <_read_r>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	bfab      	itete	ge
 8003e60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e62:	89a3      	ldrhlt	r3, [r4, #12]
 8003e64:	181b      	addge	r3, r3, r0
 8003e66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e6a:	bfac      	ite	ge
 8003e6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e6e:	81a3      	strhlt	r3, [r4, #12]
 8003e70:	bd10      	pop	{r4, pc}

08003e72 <__swrite>:
 8003e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e76:	461f      	mov	r7, r3
 8003e78:	898b      	ldrh	r3, [r1, #12]
 8003e7a:	05db      	lsls	r3, r3, #23
 8003e7c:	4605      	mov	r5, r0
 8003e7e:	460c      	mov	r4, r1
 8003e80:	4616      	mov	r6, r2
 8003e82:	d505      	bpl.n	8003e90 <__swrite+0x1e>
 8003e84:	2302      	movs	r3, #2
 8003e86:	2200      	movs	r2, #0
 8003e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e8c:	f000 f868 	bl	8003f60 <_lseek_r>
 8003e90:	89a3      	ldrh	r3, [r4, #12]
 8003e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e9a:	81a3      	strh	r3, [r4, #12]
 8003e9c:	4632      	mov	r2, r6
 8003e9e:	463b      	mov	r3, r7
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea6:	f000 b817 	b.w	8003ed8 <_write_r>

08003eaa <__sseek>:
 8003eaa:	b510      	push	{r4, lr}
 8003eac:	460c      	mov	r4, r1
 8003eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb2:	f000 f855 	bl	8003f60 <_lseek_r>
 8003eb6:	1c43      	adds	r3, r0, #1
 8003eb8:	89a3      	ldrh	r3, [r4, #12]
 8003eba:	bf15      	itete	ne
 8003ebc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ebe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ec2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ec6:	81a3      	strheq	r3, [r4, #12]
 8003ec8:	bf18      	it	ne
 8003eca:	81a3      	strhne	r3, [r4, #12]
 8003ecc:	bd10      	pop	{r4, pc}

08003ece <__sclose>:
 8003ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed2:	f000 b813 	b.w	8003efc <_close_r>
	...

08003ed8 <_write_r>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	4c07      	ldr	r4, [pc, #28]	; (8003ef8 <_write_r+0x20>)
 8003edc:	4605      	mov	r5, r0
 8003ede:	4608      	mov	r0, r1
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	6022      	str	r2, [r4, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f7fc ff19 	bl	8000d1e <_write>
 8003eec:	1c43      	adds	r3, r0, #1
 8003eee:	d102      	bne.n	8003ef6 <_write_r+0x1e>
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	b103      	cbz	r3, 8003ef6 <_write_r+0x1e>
 8003ef4:	602b      	str	r3, [r5, #0]
 8003ef6:	bd38      	pop	{r3, r4, r5, pc}
 8003ef8:	20000124 	.word	0x20000124

08003efc <_close_r>:
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	4c06      	ldr	r4, [pc, #24]	; (8003f18 <_close_r+0x1c>)
 8003f00:	2300      	movs	r3, #0
 8003f02:	4605      	mov	r5, r0
 8003f04:	4608      	mov	r0, r1
 8003f06:	6023      	str	r3, [r4, #0]
 8003f08:	f7fc ff25 	bl	8000d56 <_close>
 8003f0c:	1c43      	adds	r3, r0, #1
 8003f0e:	d102      	bne.n	8003f16 <_close_r+0x1a>
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	b103      	cbz	r3, 8003f16 <_close_r+0x1a>
 8003f14:	602b      	str	r3, [r5, #0]
 8003f16:	bd38      	pop	{r3, r4, r5, pc}
 8003f18:	20000124 	.word	0x20000124

08003f1c <_fstat_r>:
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	4c07      	ldr	r4, [pc, #28]	; (8003f3c <_fstat_r+0x20>)
 8003f20:	2300      	movs	r3, #0
 8003f22:	4605      	mov	r5, r0
 8003f24:	4608      	mov	r0, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	6023      	str	r3, [r4, #0]
 8003f2a:	f7fc ff20 	bl	8000d6e <_fstat>
 8003f2e:	1c43      	adds	r3, r0, #1
 8003f30:	d102      	bne.n	8003f38 <_fstat_r+0x1c>
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	b103      	cbz	r3, 8003f38 <_fstat_r+0x1c>
 8003f36:	602b      	str	r3, [r5, #0]
 8003f38:	bd38      	pop	{r3, r4, r5, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000124 	.word	0x20000124

08003f40 <_isatty_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	4c06      	ldr	r4, [pc, #24]	; (8003f5c <_isatty_r+0x1c>)
 8003f44:	2300      	movs	r3, #0
 8003f46:	4605      	mov	r5, r0
 8003f48:	4608      	mov	r0, r1
 8003f4a:	6023      	str	r3, [r4, #0]
 8003f4c:	f7fc ff1f 	bl	8000d8e <_isatty>
 8003f50:	1c43      	adds	r3, r0, #1
 8003f52:	d102      	bne.n	8003f5a <_isatty_r+0x1a>
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	b103      	cbz	r3, 8003f5a <_isatty_r+0x1a>
 8003f58:	602b      	str	r3, [r5, #0]
 8003f5a:	bd38      	pop	{r3, r4, r5, pc}
 8003f5c:	20000124 	.word	0x20000124

08003f60 <_lseek_r>:
 8003f60:	b538      	push	{r3, r4, r5, lr}
 8003f62:	4c07      	ldr	r4, [pc, #28]	; (8003f80 <_lseek_r+0x20>)
 8003f64:	4605      	mov	r5, r0
 8003f66:	4608      	mov	r0, r1
 8003f68:	4611      	mov	r1, r2
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	6022      	str	r2, [r4, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f7fc ff18 	bl	8000da4 <_lseek>
 8003f74:	1c43      	adds	r3, r0, #1
 8003f76:	d102      	bne.n	8003f7e <_lseek_r+0x1e>
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	b103      	cbz	r3, 8003f7e <_lseek_r+0x1e>
 8003f7c:	602b      	str	r3, [r5, #0]
 8003f7e:	bd38      	pop	{r3, r4, r5, pc}
 8003f80:	20000124 	.word	0x20000124

08003f84 <__malloc_lock>:
 8003f84:	4770      	bx	lr

08003f86 <__malloc_unlock>:
 8003f86:	4770      	bx	lr

08003f88 <_read_r>:
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	4c07      	ldr	r4, [pc, #28]	; (8003fa8 <_read_r+0x20>)
 8003f8c:	4605      	mov	r5, r0
 8003f8e:	4608      	mov	r0, r1
 8003f90:	4611      	mov	r1, r2
 8003f92:	2200      	movs	r2, #0
 8003f94:	6022      	str	r2, [r4, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	f7fc fea4 	bl	8000ce4 <_read>
 8003f9c:	1c43      	adds	r3, r0, #1
 8003f9e:	d102      	bne.n	8003fa6 <_read_r+0x1e>
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	b103      	cbz	r3, 8003fa6 <_read_r+0x1e>
 8003fa4:	602b      	str	r3, [r5, #0]
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}
 8003fa8:	20000124 	.word	0x20000124

08003fac <_init>:
 8003fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fae:	bf00      	nop
 8003fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fb2:	bc08      	pop	{r3}
 8003fb4:	469e      	mov	lr, r3
 8003fb6:	4770      	bx	lr

08003fb8 <_fini>:
 8003fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fba:	bf00      	nop
 8003fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fbe:	bc08      	pop	{r3}
 8003fc0:	469e      	mov	lr, r3
 8003fc2:	4770      	bx	lr
