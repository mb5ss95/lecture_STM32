
DMA_9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004168  08004168  00014168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004234  08004234  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004234  08004234  00014234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800423c  0800423c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004240  08004240  00014240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  080042b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  080042b4  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098d0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a07  00000000  00000000  00029970  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000850  00000000  00000000  0002b378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000778  00000000  00000000  0002bbc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016c22  00000000  00000000  0002c340  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000074eb  00000000  00000000  00042f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089e38  00000000  00000000  0004a44d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d4285  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d8  00000000  00000000  000d4300  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004150 	.word	0x08004150

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004150 	.word	0x08004150

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000588:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800058c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b00      	cmp	r3, #0
 8000596:	d013      	beq.n	80005c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000598:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800059c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00b      	beq.n	80005c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	e000      	b.n	80005ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80005aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0f9      	beq.n	80005aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c0:	687b      	ldr	r3, [r7, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fbf3 	bl	8000dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f827 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f957 	bl	8000890 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e2:	f000 f935 	bl	8000850 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005e6:	f000 f909 	bl	80007fc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005ea:	f000 f88b 	bl	8000704 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc_value, ADC_length);
 80005ee:	2204      	movs	r2, #4
 80005f0:	490b      	ldr	r1, [pc, #44]	; (8000620 <main+0x50>)
 80005f2:	480c      	ldr	r0, [pc, #48]	; (8000624 <main+0x54>)
 80005f4:	f000 fcbc 	bl	8000f70 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("%4d %4d %4d %4d\r\n", (int)adc_value[0],
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <main+0x50>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4619      	mov	r1, r3
						  		    (int)adc_value[1],
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <main+0x50>)
 8000600:	685b      	ldr	r3, [r3, #4]
	  printf("%4d %4d %4d %4d\r\n", (int)adc_value[0],
 8000602:	461a      	mov	r2, r3
						  		    (int)adc_value[2],
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <main+0x50>)
 8000606:	689b      	ldr	r3, [r3, #8]
	  printf("%4d %4d %4d %4d\r\n", (int)adc_value[0],
 8000608:	4618      	mov	r0, r3
						  		    (int) adc_value[3]);
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <main+0x50>)
 800060c:	68db      	ldr	r3, [r3, #12]
	  printf("%4d %4d %4d %4d\r\n", (int)adc_value[0],
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	4603      	mov	r3, r0
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <main+0x58>)
 8000614:	f002 feb8 	bl	8003388 <iprintf>
	  HAL_Delay(100);
 8000618:	2064      	movs	r0, #100	; 0x64
 800061a:	f000 fc43 	bl	8000ea4 <HAL_Delay>
	  printf("%4d %4d %4d %4d\r\n", (int)adc_value[0],
 800061e:	e7eb      	b.n	80005f8 <main+0x28>
 8000620:	20000098 	.word	0x20000098
 8000624:	200000a8 	.word	0x200000a8
 8000628:	08004168 	.word	0x08004168

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fe9c 	bl	8003378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b29      	ldr	r3, [pc, #164]	; (80006fc <SystemClock_Config+0xd0>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a28      	ldr	r2, [pc, #160]	; (80006fc <SystemClock_Config+0xd0>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b26      	ldr	r3, [pc, #152]	; (80006fc <SystemClock_Config+0xd0>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b23      	ldr	r3, [pc, #140]	; (8000700 <SystemClock_Config+0xd4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000678:	4a21      	ldr	r2, [pc, #132]	; (8000700 <SystemClock_Config+0xd4>)
 800067a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <SystemClock_Config+0xd4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006a0:	2310      	movs	r3, #16
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ae:	2307      	movs	r3, #7
 80006b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fe08 	bl	80022cc <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006c2:	f000 f962 	bl	800098a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2302      	movs	r3, #2
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2102      	movs	r1, #2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 f862 	bl	80027ac <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ee:	f000 f94c 	bl	800098a <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000716:	4b36      	ldr	r3, [pc, #216]	; (80007f0 <MX_ADC1_Init+0xec>)
 8000718:	4a36      	ldr	r2, [pc, #216]	; (80007f4 <MX_ADC1_Init+0xf0>)
 800071a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800071c:	4b34      	ldr	r3, [pc, #208]	; (80007f0 <MX_ADC1_Init+0xec>)
 800071e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000722:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000724:	4b32      	ldr	r3, [pc, #200]	; (80007f0 <MX_ADC1_Init+0xec>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800072a:	4b31      	ldr	r3, [pc, #196]	; (80007f0 <MX_ADC1_Init+0xec>)
 800072c:	2201      	movs	r2, #1
 800072e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000730:	4b2f      	ldr	r3, [pc, #188]	; (80007f0 <MX_ADC1_Init+0xec>)
 8000732:	2201      	movs	r2, #1
 8000734:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000736:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <MX_ADC1_Init+0xec>)
 8000738:	2200      	movs	r2, #0
 800073a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073e:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <MX_ADC1_Init+0xec>)
 8000740:	2200      	movs	r2, #0
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000744:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <MX_ADC1_Init+0xec>)
 8000746:	4a2c      	ldr	r2, [pc, #176]	; (80007f8 <MX_ADC1_Init+0xf4>)
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074a:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <MX_ADC1_Init+0xec>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000750:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <MX_ADC1_Init+0xec>)
 8000752:	2204      	movs	r2, #4
 8000754:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000756:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <MX_ADC1_Init+0xec>)
 8000758:	2201      	movs	r2, #1
 800075a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800075e:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <MX_ADC1_Init+0xec>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000764:	4822      	ldr	r0, [pc, #136]	; (80007f0 <MX_ADC1_Init+0xec>)
 8000766:	f000 fbbf 	bl	8000ee8 <HAL_ADC_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000770:	f000 f90b 	bl	800098a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000774:	2300      	movs	r3, #0
 8000776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000778:	2301      	movs	r3, #1
 800077a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800077c:	2305      	movs	r3, #5
 800077e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	4619      	mov	r1, r3
 8000784:	481a      	ldr	r0, [pc, #104]	; (80007f0 <MX_ADC1_Init+0xec>)
 8000786:	f000 fce5 	bl	8001154 <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000790:	f000 f8fb 	bl	800098a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000794:	2301      	movs	r3, #1
 8000796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000798:	2302      	movs	r3, #2
 800079a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079c:	463b      	mov	r3, r7
 800079e:	4619      	mov	r1, r3
 80007a0:	4813      	ldr	r0, [pc, #76]	; (80007f0 <MX_ADC1_Init+0xec>)
 80007a2:	f000 fcd7 	bl	8001154 <HAL_ADC_ConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007ac:	f000 f8ed 	bl	800098a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007b0:	2304      	movs	r3, #4
 80007b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80007b4:	2303      	movs	r3, #3
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480c      	ldr	r0, [pc, #48]	; (80007f0 <MX_ADC1_Init+0xec>)
 80007be:	f000 fcc9 	bl	8001154 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80007c8:	f000 f8df 	bl	800098a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007cc:	2308      	movs	r3, #8
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80007d0:	2304      	movs	r3, #4
 80007d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d4:	463b      	mov	r3, r7
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_ADC1_Init+0xec>)
 80007da:	f000 fcbb 	bl	8001154 <HAL_ADC_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80007e4:	f000 f8d1 	bl	800098a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200000a8 	.word	0x200000a8
 80007f4:	40012000 	.word	0x40012000
 80007f8:	0f000001 	.word	0x0f000001

080007fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000802:	4a12      	ldr	r2, [pc, #72]	; (800084c <MX_USART2_UART_Init+0x50>)
 8000804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000834:	f002 f9ac 	bl	8002b90 <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800083e:	f000 f8a4 	bl	800098a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000150 	.word	0x20000150
 800084c:	40004400 	.word	0x40004400

08000850 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_DMA_Init+0x3c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a0b      	ldr	r2, [pc, #44]	; (800088c <MX_DMA_Init+0x3c>)
 8000860:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_DMA_Init+0x3c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	2038      	movs	r0, #56	; 0x38
 8000878:	f000 ffe7 	bl	800184a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800087c:	2038      	movs	r0, #56	; 0x38
 800087e:	f001 f800 	bl	8001882 <HAL_NVIC_EnableIRQ>

}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <MX_GPIO_Init+0xd0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a2c      	ldr	r2, [pc, #176]	; (8000960 <MX_GPIO_Init+0xd0>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <MX_GPIO_Init+0xd0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b26      	ldr	r3, [pc, #152]	; (8000960 <MX_GPIO_Init+0xd0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a25      	ldr	r2, [pc, #148]	; (8000960 <MX_GPIO_Init+0xd0>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b23      	ldr	r3, [pc, #140]	; (8000960 <MX_GPIO_Init+0xd0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_GPIO_Init+0xd0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a1e      	ldr	r2, [pc, #120]	; (8000960 <MX_GPIO_Init+0xd0>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <MX_GPIO_Init+0xd0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_GPIO_Init+0xd0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a17      	ldr	r2, [pc, #92]	; (8000960 <MX_GPIO_Init+0xd0>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_GPIO_Init+0xd0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2120      	movs	r1, #32
 800091a:	4812      	ldr	r0, [pc, #72]	; (8000964 <MX_GPIO_Init+0xd4>)
 800091c:	f001 fcbc 	bl	8002298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_GPIO_Init+0xd8>)
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_GPIO_Init+0xdc>)
 8000936:	f001 fb2d 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800093a:	2320      	movs	r3, #32
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_GPIO_Init+0xd4>)
 8000952:	f001 fb1f 	bl	8001f94 <HAL_GPIO_Init>

}
 8000956:	bf00      	nop
 8000958:	3728      	adds	r7, #40	; 0x28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	40020000 	.word	0x40020000
 8000968:	10210000 	.word	0x10210000
 800096c:	40020800 	.word	0x40020800

08000970 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fe00 	bl	8000580 <ITM_SendChar>
	return 0;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009d6:	2007      	movs	r0, #7
 80009d8:	f000 ff2c 	bl	8001834 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800

080009e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a3b      	ldr	r2, [pc, #236]	; (8000af4 <HAL_ADC_MspInit+0x10c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d170      	bne.n	8000aec <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b3a      	ldr	r3, [pc, #232]	; (8000af8 <HAL_ADC_MspInit+0x110>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	4a39      	ldr	r2, [pc, #228]	; (8000af8 <HAL_ADC_MspInit+0x110>)
 8000a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a18:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1a:	4b37      	ldr	r3, [pc, #220]	; (8000af8 <HAL_ADC_MspInit+0x110>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b33      	ldr	r3, [pc, #204]	; (8000af8 <HAL_ADC_MspInit+0x110>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a32      	ldr	r2, [pc, #200]	; (8000af8 <HAL_ADC_MspInit+0x110>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b30      	ldr	r3, [pc, #192]	; (8000af8 <HAL_ADC_MspInit+0x110>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <HAL_ADC_MspInit+0x110>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a2b      	ldr	r2, [pc, #172]	; (8000af8 <HAL_ADC_MspInit+0x110>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <HAL_ADC_MspInit+0x110>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000a5e:	2313      	movs	r3, #19
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a62:	2303      	movs	r3, #3
 8000a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4822      	ldr	r0, [pc, #136]	; (8000afc <HAL_ADC_MspInit+0x114>)
 8000a72:	f001 fa8f 	bl	8001f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a76:	2301      	movs	r3, #1
 8000a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	481d      	ldr	r0, [pc, #116]	; (8000b00 <HAL_ADC_MspInit+0x118>)
 8000a8a:	f001 fa83 	bl	8001f94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <HAL_ADC_MspInit+0x11c>)
 8000a90:	4a1d      	ldr	r2, [pc, #116]	; (8000b08 <HAL_ADC_MspInit+0x120>)
 8000a92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <HAL_ADC_MspInit+0x11c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <HAL_ADC_MspInit+0x11c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <HAL_ADC_MspInit+0x11c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <HAL_ADC_MspInit+0x11c>)
 8000aa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_ADC_MspInit+0x11c>)
 8000ab0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ab4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <HAL_ADC_MspInit+0x11c>)
 8000ab8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000abc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_ADC_MspInit+0x11c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_ADC_MspInit+0x11c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_ADC_MspInit+0x11c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <HAL_ADC_MspInit+0x11c>)
 8000ad2:	f000 fef1 	bl	80018b8 <HAL_DMA_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000adc:	f7ff ff55 	bl	800098a <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_ADC_MspInit+0x11c>)
 8000ae4:	639a      	str	r2, [r3, #56]	; 0x38
 8000ae6:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <HAL_ADC_MspInit+0x11c>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40012000 	.word	0x40012000
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020000 	.word	0x40020000
 8000b00:	40020400 	.word	0x40020400
 8000b04:	200000f0 	.word	0x200000f0
 8000b08:	40026410 	.word	0x40026410

08000b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <HAL_UART_MspInit+0x84>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d12b      	bne.n	8000b86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b66:	230c      	movs	r3, #12
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b76:	2307      	movs	r3, #7
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <HAL_UART_MspInit+0x8c>)
 8000b82:	f001 fa07 	bl	8001f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40004400 	.word	0x40004400
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf0:	f000 f938 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <DMA2_Stream0_IRQHandler+0x10>)
 8000bfe:	f000 ff61 	bl	8001ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200000f0 	.word	0x200000f0

08000c0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	e00a      	b.n	8000c34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c1e:	f3af 8000 	nop.w
 8000c22:	4601      	mov	r1, r0
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	60ba      	str	r2, [r7, #8]
 8000c2a:	b2ca      	uxtb	r2, r1
 8000c2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3301      	adds	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	dbf0      	blt.n	8000c1e <_read+0x12>
	}

return len;
 8000c3c:	687b      	ldr	r3, [r7, #4]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	e009      	b.n	8000c6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	60ba      	str	r2, [r7, #8]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fe85 	bl	8000970 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dbf1      	blt.n	8000c58 <_write+0x12>
	}
	return len;
 8000c74:	687b      	ldr	r3, [r7, #4]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_close>:

int _close(int file)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
	return -1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <_isatty>:

int _isatty(int file)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
	return 1;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
	return 0;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <_sbrk+0x50>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x16>
		heap_end = &end;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <_sbrk+0x50>)
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <_sbrk+0x54>)
 8000cfc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <_sbrk+0x50>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <_sbrk+0x50>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	466a      	mov	r2, sp
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d907      	bls.n	8000d22 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d12:	f002 fb07 	bl	8003324 <__errno>
 8000d16:	4602      	mov	r2, r0
 8000d18:	230c      	movs	r3, #12
 8000d1a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	e006      	b.n	8000d30 <_sbrk+0x48>
	}

	heap_end += incr;
 8000d22:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <_sbrk+0x50>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a03      	ldr	r2, [pc, #12]	; (8000d38 <_sbrk+0x50>)
 8000d2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2000008c 	.word	0x2000008c
 8000d3c:	20000198 	.word	0x20000198

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <SystemInit+0x28>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4a:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <SystemInit+0x28>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SystemInit+0x28>)
 8000d56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d5a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d72:	e003      	b.n	8000d7c <LoopCopyDataInit>

08000d74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d7a:	3104      	adds	r1, #4

08000d7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d84:	d3f6      	bcc.n	8000d74 <CopyDataInit>
  ldr  r2, =_sbss
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d88:	e002      	b.n	8000d90 <LoopFillZerobss>

08000d8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d8c:	f842 3b04 	str.w	r3, [r2], #4

08000d90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d94:	d3f9      	bcc.n	8000d8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d96:	f7ff ffd3 	bl	8000d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f002 fac9 	bl	8003330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff fc17 	bl	80005d0 <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000da8:	08004244 	.word	0x08004244
  ldr  r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000db0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000db4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000db8:	20000198 	.word	0x20000198

08000dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <HAL_Init+0x40>)
 8000dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_Init+0x40>)
 8000dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_Init+0x40>)
 8000de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 fd23 	bl	8001834 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f000 f808 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff fdd0 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023c00 	.word	0x40023c00

08000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x54>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x58>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 fd3b 	bl	800189e <HAL_SYSTICK_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00e      	b.n	8000e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d80a      	bhi.n	8000e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f000 fd03 	bl	800184a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_InitTick+0x5c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000004 	.word	0x20000004

08000e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000190 	.word	0x20000190

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000190 	.word	0x20000190

08000ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff ffee 	bl	8000e8c <HAL_GetTick>
 8000eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebc:	d005      	beq.n	8000eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_Delay+0x40>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eca:	bf00      	nop
 8000ecc:	f7ff ffde 	bl	8000e8c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d8f7      	bhi.n	8000ecc <HAL_Delay+0x28>
  {
  }
}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000008 	.word	0x20000008

08000ee8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e033      	b.n	8000f66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d109      	bne.n	8000f1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff fd6e 	bl	80009e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d118      	bne.n	8000f58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f2e:	f023 0302 	bic.w	r3, r3, #2
 8000f32:	f043 0202 	orr.w	r2, r3, #2
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 fa2c 	bl	8001398 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f023 0303 	bic.w	r3, r3, #3
 8000f4e:	f043 0201 	orr.w	r2, r3, #1
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	641a      	str	r2, [r3, #64]	; 0x40
 8000f56:	e001      	b.n	8000f5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d101      	bne.n	8000f8e <HAL_ADC_Start_DMA+0x1e>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e0b1      	b.n	80010f2 <HAL_ADC_Start_DMA+0x182>
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2201      	movs	r2, #1
 8000f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d018      	beq.n	8000fd6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 0201 	orr.w	r2, r2, #1
 8000fb2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fb4:	4b51      	ldr	r3, [pc, #324]	; (80010fc <HAL_ADC_Start_DMA+0x18c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a51      	ldr	r2, [pc, #324]	; (8001100 <HAL_ADC_Start_DMA+0x190>)
 8000fba:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbe:	0c9a      	lsrs	r2, r3, #18
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000fc8:	e002      	b.n	8000fd0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f9      	bne.n	8000fca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	f040 8085 	bne.w	80010f0 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fee:	f023 0301 	bic.w	r3, r3, #1
 8000ff2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001004:	2b00      	cmp	r3, #0
 8001006:	d007      	beq.n	8001018 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001010:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001024:	d106      	bne.n	8001034 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f023 0206 	bic.w	r2, r3, #6
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	645a      	str	r2, [r3, #68]	; 0x44
 8001032:	e002      	b.n	800103a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2200      	movs	r2, #0
 8001038:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001042:	4b30      	ldr	r3, [pc, #192]	; (8001104 <HAL_ADC_Start_DMA+0x194>)
 8001044:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104a:	4a2f      	ldr	r2, [pc, #188]	; (8001108 <HAL_ADC_Start_DMA+0x198>)
 800104c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001052:	4a2e      	ldr	r2, [pc, #184]	; (800110c <HAL_ADC_Start_DMA+0x19c>)
 8001054:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105a:	4a2d      	ldr	r2, [pc, #180]	; (8001110 <HAL_ADC_Start_DMA+0x1a0>)
 800105c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001066:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001076:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001086:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	334c      	adds	r3, #76	; 0x4c
 8001092:	4619      	mov	r1, r3
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f000 fcbc 	bl	8001a14 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 031f 	and.w	r3, r3, #31
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10f      	bne.n	80010c8 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d11c      	bne.n	80010f0 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	e013      	b.n	80010f0 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a11      	ldr	r2, [pc, #68]	; (8001114 <HAL_ADC_Start_DMA+0x1a4>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d10e      	bne.n	80010f0 <HAL_ADC_Start_DMA+0x180>
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d107      	bne.n	80010f0 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010ee:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000000 	.word	0x20000000
 8001100:	431bde83 	.word	0x431bde83
 8001104:	40012300 	.word	0x40012300
 8001108:	08001591 	.word	0x08001591
 800110c:	0800164b 	.word	0x0800164b
 8001110:	08001667 	.word	0x08001667
 8001114:	40012000 	.word	0x40012000

08001118 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <HAL_ADC_ConfigChannel+0x1c>
 800116c:	2302      	movs	r3, #2
 800116e:	e105      	b.n	800137c <HAL_ADC_ConfigChannel+0x228>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b09      	cmp	r3, #9
 800117e:	d925      	bls.n	80011cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68d9      	ldr	r1, [r3, #12]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	461a      	mov	r2, r3
 800118e:	4613      	mov	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4413      	add	r3, r2
 8001194:	3b1e      	subs	r3, #30
 8001196:	2207      	movs	r2, #7
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43da      	mvns	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	400a      	ands	r2, r1
 80011a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68d9      	ldr	r1, [r3, #12]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	4603      	mov	r3, r0
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4403      	add	r3, r0
 80011be:	3b1e      	subs	r3, #30
 80011c0:	409a      	lsls	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	e022      	b.n	8001212 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6919      	ldr	r1, [r3, #16]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	2207      	movs	r2, #7
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	400a      	ands	r2, r1
 80011ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6919      	ldr	r1, [r3, #16]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	4618      	mov	r0, r3
 8001202:	4603      	mov	r3, r0
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4403      	add	r3, r0
 8001208:	409a      	lsls	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b06      	cmp	r3, #6
 8001218:	d824      	bhi.n	8001264 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	3b05      	subs	r3, #5
 800122c:	221f      	movs	r2, #31
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	400a      	ands	r2, r1
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	b29b      	uxth	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	3b05      	subs	r3, #5
 8001256:	fa00 f203 	lsl.w	r2, r0, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	635a      	str	r2, [r3, #52]	; 0x34
 8001262:	e04c      	b.n	80012fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b0c      	cmp	r3, #12
 800126a:	d824      	bhi.n	80012b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	3b23      	subs	r3, #35	; 0x23
 800127e:	221f      	movs	r2, #31
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43da      	mvns	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	400a      	ands	r2, r1
 800128c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	b29b      	uxth	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	3b23      	subs	r3, #35	; 0x23
 80012a8:	fa00 f203 	lsl.w	r2, r0, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	631a      	str	r2, [r3, #48]	; 0x30
 80012b4:	e023      	b.n	80012fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	3b41      	subs	r3, #65	; 0x41
 80012c8:	221f      	movs	r2, #31
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	400a      	ands	r2, r1
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	3b41      	subs	r3, #65	; 0x41
 80012f2:	fa00 f203 	lsl.w	r2, r0, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012fe:	4b22      	ldr	r3, [pc, #136]	; (8001388 <HAL_ADC_ConfigChannel+0x234>)
 8001300:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a21      	ldr	r2, [pc, #132]	; (800138c <HAL_ADC_ConfigChannel+0x238>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d109      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x1cc>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b12      	cmp	r3, #18
 8001312:	d105      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a19      	ldr	r2, [pc, #100]	; (800138c <HAL_ADC_ConfigChannel+0x238>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d123      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x21e>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b10      	cmp	r3, #16
 8001330:	d003      	beq.n	800133a <HAL_ADC_ConfigChannel+0x1e6>
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b11      	cmp	r3, #17
 8001338:	d11b      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b10      	cmp	r3, #16
 800134c:	d111      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <HAL_ADC_ConfigChannel+0x23c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a10      	ldr	r2, [pc, #64]	; (8001394 <HAL_ADC_ConfigChannel+0x240>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	0c9a      	lsrs	r2, r3, #18
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001364:	e002      	b.n	800136c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	3b01      	subs	r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f9      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	40012300 	.word	0x40012300
 800138c:	40012000 	.word	0x40012000
 8001390:	20000000 	.word	0x20000000
 8001394:	431bde83 	.word	0x431bde83

08001398 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013a0:	4b79      	ldr	r3, [pc, #484]	; (8001588 <ADC_Init+0x1f0>)
 80013a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	431a      	orrs	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6859      	ldr	r1, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	021a      	lsls	r2, r3, #8
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6859      	ldr	r1, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6899      	ldr	r1, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142a:	4a58      	ldr	r2, [pc, #352]	; (800158c <ADC_Init+0x1f4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d022      	beq.n	8001476 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800143e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6899      	ldr	r1, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6899      	ldr	r1, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	e00f      	b.n	8001496 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001484:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001494:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0202 	bic.w	r2, r2, #2
 80014a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6899      	ldr	r1, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7e1b      	ldrb	r3, [r3, #24]
 80014b0:	005a      	lsls	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d01b      	beq.n	80014fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6859      	ldr	r1, [r3, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	3b01      	subs	r3, #1
 80014f0:	035a      	lsls	r2, r3, #13
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	e007      	b.n	800150c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800150a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	3b01      	subs	r3, #1
 8001528:	051a      	lsls	r2, r3, #20
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001540:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6899      	ldr	r1, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800154e:	025a      	lsls	r2, r3, #9
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001566:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6899      	ldr	r1, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	029a      	lsls	r2, r3, #10
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	609a      	str	r2, [r3, #8]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40012300 	.word	0x40012300
 800158c:	0f000001 	.word	0x0f000001

08001590 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d13c      	bne.n	8001624 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d12b      	bne.n	800161c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d127      	bne.n	800161c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d006      	beq.n	80015e8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d119      	bne.n	800161c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0220 	bic.w	r2, r2, #32
 80015f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d105      	bne.n	800161c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f043 0201 	orr.w	r2, r3, #1
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff fd7b 	bl	8001118 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001622:	e00e      	b.n	8001642 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	f003 0310 	and.w	r3, r3, #16
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f7ff fd85 	bl	8001140 <HAL_ADC_ErrorCallback>
}
 8001636:	e004      	b.n	8001642 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	4798      	blx	r3
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001656:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f7ff fd67 	bl	800112c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001672:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2240      	movs	r2, #64	; 0x40
 8001678:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	f043 0204 	orr.w	r2, r3, #4
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f7ff fd5a 	bl	8001140 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <__NVIC_SetPriorityGrouping>:
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b0:	4013      	ands	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016c6:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	60d3      	str	r3, [r2, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_GetPriorityGrouping>:
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <__NVIC_GetPriorityGrouping+0x18>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	f003 0307 	and.w	r3, r3, #7
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_EnableIRQ>:
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	2b00      	cmp	r3, #0
 8001708:	db0b      	blt.n	8001722 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	f003 021f 	and.w	r2, r3, #31
 8001710:	4907      	ldr	r1, [pc, #28]	; (8001730 <__NVIC_EnableIRQ+0x38>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	2001      	movs	r0, #1
 800171a:	fa00 f202 	lsl.w	r2, r0, r2
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000e100 	.word	0xe000e100

08001734 <__NVIC_SetPriority>:
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	db0a      	blt.n	800175e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	b2da      	uxtb	r2, r3
 800174c:	490c      	ldr	r1, [pc, #48]	; (8001780 <__NVIC_SetPriority+0x4c>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	0112      	lsls	r2, r2, #4
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	440b      	add	r3, r1
 8001758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800175c:	e00a      	b.n	8001774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4908      	ldr	r1, [pc, #32]	; (8001784 <__NVIC_SetPriority+0x50>)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	3b04      	subs	r3, #4
 800176c:	0112      	lsls	r2, r2, #4
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	440b      	add	r3, r1
 8001772:	761a      	strb	r2, [r3, #24]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000e100 	.word	0xe000e100
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <NVIC_EncodePriority>:
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f1c3 0307 	rsb	r3, r3, #7
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	bf28      	it	cs
 80017a6:	2304      	movcs	r3, #4
 80017a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3304      	adds	r3, #4
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	d902      	bls.n	80017b8 <NVIC_EncodePriority+0x30>
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3b03      	subs	r3, #3
 80017b6:	e000      	b.n	80017ba <NVIC_EncodePriority+0x32>
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	401a      	ands	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43d9      	mvns	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	4313      	orrs	r3, r2
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3724      	adds	r7, #36	; 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <SysTick_Config>:
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001800:	d301      	bcc.n	8001806 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001802:	2301      	movs	r3, #1
 8001804:	e00f      	b.n	8001826 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <SysTick_Config+0x40>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180e:	210f      	movs	r1, #15
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f7ff ff8e 	bl	8001734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <SysTick_Config+0x40>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181e:	4b04      	ldr	r3, [pc, #16]	; (8001830 <SysTick_Config+0x40>)
 8001820:	2207      	movs	r2, #7
 8001822:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	e000e010 	.word	0xe000e010

08001834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ff29 	bl	8001694 <__NVIC_SetPriorityGrouping>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800185c:	f7ff ff3e 	bl	80016dc <__NVIC_GetPriorityGrouping>
 8001860:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	6978      	ldr	r0, [r7, #20]
 8001868:	f7ff ff8e 	bl	8001788 <NVIC_EncodePriority>
 800186c:	4602      	mov	r2, r0
 800186e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff5d 	bl	8001734 <__NVIC_SetPriority>
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800188c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff31 	bl	80016f8 <__NVIC_EnableIRQ>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ffa2 	bl	80017f0 <SysTick_Config>
 80018ac:	4603      	mov	r3, r0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018c4:	f7ff fae2 	bl	8000e8c <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e099      	b.n	8001a08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2202      	movs	r2, #2
 80018e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0201 	bic.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f4:	e00f      	b.n	8001916 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018f6:	f7ff fac9 	bl	8000e8c <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b05      	cmp	r3, #5
 8001902:	d908      	bls.n	8001916 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2220      	movs	r2, #32
 8001908:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2203      	movs	r2, #3
 800190e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e078      	b.n	8001a08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e8      	bne.n	80018f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	4b38      	ldr	r3, [pc, #224]	; (8001a10 <HAL_DMA_Init+0x158>)
 8001930:	4013      	ands	r3, r2
 8001932:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001942:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800194e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800195a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4313      	orrs	r3, r2
 8001966:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	2b04      	cmp	r3, #4
 800196e:	d107      	bne.n	8001980 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	4313      	orrs	r3, r2
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f023 0307 	bic.w	r3, r3, #7
 8001996:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	4313      	orrs	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d117      	bne.n	80019da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00e      	beq.n	80019da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 fa6f 	bl	8001ea0 <DMA_CheckFifoParam>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d008      	beq.n	80019da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2240      	movs	r2, #64	; 0x40
 80019cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019d6:	2301      	movs	r3, #1
 80019d8:	e016      	b.n	8001a08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 fa26 	bl	8001e34 <DMA_CalcBaseAndBitshift>
 80019e8:	4603      	mov	r3, r0
 80019ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f0:	223f      	movs	r2, #63	; 0x3f
 80019f2:	409a      	lsls	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	f010803f 	.word	0xf010803f

08001a14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_DMA_Start_IT+0x26>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e040      	b.n	8001abc <HAL_DMA_Start_IT+0xa8>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d12f      	bne.n	8001aae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2202      	movs	r2, #2
 8001a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f9b8 	bl	8001dd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6c:	223f      	movs	r2, #63	; 0x3f
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0216 	orr.w	r2, r2, #22
 8001a82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d007      	beq.n	8001a9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0208 	orr.w	r2, r2, #8
 8001a9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	e005      	b.n	8001aba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ad0:	4b92      	ldr	r3, [pc, #584]	; (8001d1c <HAL_DMA_IRQHandler+0x258>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a92      	ldr	r2, [pc, #584]	; (8001d20 <HAL_DMA_IRQHandler+0x25c>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	0a9b      	lsrs	r3, r3, #10
 8001adc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aee:	2208      	movs	r2, #8
 8001af0:	409a      	lsls	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d01a      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d013      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0204 	bic.w	r2, r2, #4
 8001b16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1c:	2208      	movs	r2, #8
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b34:	2201      	movs	r2, #1
 8001b36:	409a      	lsls	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d012      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00b      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b52:	2201      	movs	r2, #1
 8001b54:	409a      	lsls	r2, r3
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5e:	f043 0202 	orr.w	r2, r3, #2
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d012      	beq.n	8001b9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00b      	beq.n	8001b9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b88:	2204      	movs	r2, #4
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b94:	f043 0204 	orr.w	r2, r3, #4
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba0:	2210      	movs	r2, #16
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d043      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d03c      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d018      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d108      	bne.n	8001bf4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d024      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	4798      	blx	r3
 8001bf2:	e01f      	b.n	8001c34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01b      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
 8001c04:	e016      	b.n	8001c34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d107      	bne.n	8001c24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0208 	bic.w	r2, r2, #8
 8001c22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c38:	2220      	movs	r2, #32
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 808e 	beq.w	8001d62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 8086 	beq.w	8001d62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d136      	bne.n	8001cdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0216 	bic.w	r2, r2, #22
 8001c7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695a      	ldr	r2, [r3, #20]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d103      	bne.n	8001c9e <HAL_DMA_IRQHandler+0x1da>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0208 	bic.w	r2, r2, #8
 8001cac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb2:	223f      	movs	r2, #63	; 0x3f
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d07d      	beq.n	8001dce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	4798      	blx	r3
        }
        return;
 8001cda:	e078      	b.n	8001dce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d01c      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d108      	bne.n	8001d0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d030      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	4798      	blx	r3
 8001d08:	e02b      	b.n	8001d62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d027      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	4798      	blx	r3
 8001d1a:	e022      	b.n	8001d62 <HAL_DMA_IRQHandler+0x29e>
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10f      	bne.n	8001d52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0210 	bic.w	r2, r2, #16
 8001d40:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d032      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d022      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2205      	movs	r2, #5
 8001d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0201 	bic.w	r2, r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3301      	adds	r3, #1
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d307      	bcc.n	8001daa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f2      	bne.n	8001d8e <HAL_DMA_IRQHandler+0x2ca>
 8001da8:	e000      	b.n	8001dac <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001daa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	4798      	blx	r3
 8001dcc:	e000      	b.n	8001dd0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001dce:	bf00      	nop
    }
  }
}
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop

08001dd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001df4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b40      	cmp	r3, #64	; 0x40
 8001e04:	d108      	bne.n	8001e18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e16:	e007      	b.n	8001e28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	60da      	str	r2, [r3, #12]
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	3b10      	subs	r3, #16
 8001e44:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <DMA_CalcBaseAndBitshift+0x64>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e4e:	4a13      	ldr	r2, [pc, #76]	; (8001e9c <DMA_CalcBaseAndBitshift+0x68>)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d909      	bls.n	8001e76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e6a:	f023 0303 	bic.w	r3, r3, #3
 8001e6e:	1d1a      	adds	r2, r3, #4
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	659a      	str	r2, [r3, #88]	; 0x58
 8001e74:	e007      	b.n	8001e86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e7e:	f023 0303 	bic.w	r3, r3, #3
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	aaaaaaab 	.word	0xaaaaaaab
 8001e9c:	08004194 	.word	0x08004194

08001ea0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d11f      	bne.n	8001efa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d855      	bhi.n	8001f6c <DMA_CheckFifoParam+0xcc>
 8001ec0:	a201      	add	r2, pc, #4	; (adr r2, 8001ec8 <DMA_CheckFifoParam+0x28>)
 8001ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec6:	bf00      	nop
 8001ec8:	08001ed9 	.word	0x08001ed9
 8001ecc:	08001eeb 	.word	0x08001eeb
 8001ed0:	08001ed9 	.word	0x08001ed9
 8001ed4:	08001f6d 	.word	0x08001f6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d045      	beq.n	8001f70 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ee8:	e042      	b.n	8001f70 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ef2:	d13f      	bne.n	8001f74 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ef8:	e03c      	b.n	8001f74 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f02:	d121      	bne.n	8001f48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d836      	bhi.n	8001f78 <DMA_CheckFifoParam+0xd8>
 8001f0a:	a201      	add	r2, pc, #4	; (adr r2, 8001f10 <DMA_CheckFifoParam+0x70>)
 8001f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f10:	08001f21 	.word	0x08001f21
 8001f14:	08001f27 	.word	0x08001f27
 8001f18:	08001f21 	.word	0x08001f21
 8001f1c:	08001f39 	.word	0x08001f39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
      break;
 8001f24:	e02f      	b.n	8001f86 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d024      	beq.n	8001f7c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f36:	e021      	b.n	8001f7c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f40:	d11e      	bne.n	8001f80 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f46:	e01b      	b.n	8001f80 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d902      	bls.n	8001f54 <DMA_CheckFifoParam+0xb4>
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d003      	beq.n	8001f5a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f52:	e018      	b.n	8001f86 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
      break;
 8001f58:	e015      	b.n	8001f86 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00e      	beq.n	8001f84 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
      break;
 8001f6a:	e00b      	b.n	8001f84 <DMA_CheckFifoParam+0xe4>
      break;
 8001f6c:	bf00      	nop
 8001f6e:	e00a      	b.n	8001f86 <DMA_CheckFifoParam+0xe6>
      break;
 8001f70:	bf00      	nop
 8001f72:	e008      	b.n	8001f86 <DMA_CheckFifoParam+0xe6>
      break;
 8001f74:	bf00      	nop
 8001f76:	e006      	b.n	8001f86 <DMA_CheckFifoParam+0xe6>
      break;
 8001f78:	bf00      	nop
 8001f7a:	e004      	b.n	8001f86 <DMA_CheckFifoParam+0xe6>
      break;
 8001f7c:	bf00      	nop
 8001f7e:	e002      	b.n	8001f86 <DMA_CheckFifoParam+0xe6>
      break;   
 8001f80:	bf00      	nop
 8001f82:	e000      	b.n	8001f86 <DMA_CheckFifoParam+0xe6>
      break;
 8001f84:	bf00      	nop
    }
  } 
  
  return status; 
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	e159      	b.n	8002264 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	f040 8148 	bne.w	800225e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d00b      	beq.n	8001fee <HAL_GPIO_Init+0x5a>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d007      	beq.n	8001fee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fe2:	2b11      	cmp	r3, #17
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b12      	cmp	r3, #18
 8001fec:	d130      	bne.n	8002050 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002024:	2201      	movs	r2, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 0201 	and.w	r2, r3, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b02      	cmp	r3, #2
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0xfc>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b12      	cmp	r3, #18
 800208e:	d123      	bne.n	80020d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	08da      	lsrs	r2, r3, #3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3208      	adds	r2, #8
 8002098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	220f      	movs	r2, #15
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	08da      	lsrs	r2, r3, #3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3208      	adds	r2, #8
 80020d2:	69b9      	ldr	r1, [r7, #24]
 80020d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	2203      	movs	r2, #3
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0203 	and.w	r2, r3, #3
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80a2 	beq.w	800225e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	4b56      	ldr	r3, [pc, #344]	; (8002278 <HAL_GPIO_Init+0x2e4>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	4a55      	ldr	r2, [pc, #340]	; (8002278 <HAL_GPIO_Init+0x2e4>)
 8002124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002128:	6453      	str	r3, [r2, #68]	; 0x44
 800212a:	4b53      	ldr	r3, [pc, #332]	; (8002278 <HAL_GPIO_Init+0x2e4>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002136:	4a51      	ldr	r2, [pc, #324]	; (800227c <HAL_GPIO_Init+0x2e8>)
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	3302      	adds	r3, #2
 800213e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	220f      	movs	r2, #15
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a48      	ldr	r2, [pc, #288]	; (8002280 <HAL_GPIO_Init+0x2ec>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d019      	beq.n	8002196 <HAL_GPIO_Init+0x202>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a47      	ldr	r2, [pc, #284]	; (8002284 <HAL_GPIO_Init+0x2f0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d013      	beq.n	8002192 <HAL_GPIO_Init+0x1fe>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a46      	ldr	r2, [pc, #280]	; (8002288 <HAL_GPIO_Init+0x2f4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00d      	beq.n	800218e <HAL_GPIO_Init+0x1fa>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a45      	ldr	r2, [pc, #276]	; (800228c <HAL_GPIO_Init+0x2f8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d007      	beq.n	800218a <HAL_GPIO_Init+0x1f6>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a44      	ldr	r2, [pc, #272]	; (8002290 <HAL_GPIO_Init+0x2fc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d101      	bne.n	8002186 <HAL_GPIO_Init+0x1f2>
 8002182:	2304      	movs	r3, #4
 8002184:	e008      	b.n	8002198 <HAL_GPIO_Init+0x204>
 8002186:	2307      	movs	r3, #7
 8002188:	e006      	b.n	8002198 <HAL_GPIO_Init+0x204>
 800218a:	2303      	movs	r3, #3
 800218c:	e004      	b.n	8002198 <HAL_GPIO_Init+0x204>
 800218e:	2302      	movs	r3, #2
 8002190:	e002      	b.n	8002198 <HAL_GPIO_Init+0x204>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <HAL_GPIO_Init+0x204>
 8002196:	2300      	movs	r3, #0
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	f002 0203 	and.w	r2, r2, #3
 800219e:	0092      	lsls	r2, r2, #2
 80021a0:	4093      	lsls	r3, r2
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a8:	4934      	ldr	r1, [pc, #208]	; (800227c <HAL_GPIO_Init+0x2e8>)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	3302      	adds	r3, #2
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021b6:	4b37      	ldr	r3, [pc, #220]	; (8002294 <HAL_GPIO_Init+0x300>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021da:	4a2e      	ldr	r2, [pc, #184]	; (8002294 <HAL_GPIO_Init+0x300>)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021e0:	4b2c      	ldr	r3, [pc, #176]	; (8002294 <HAL_GPIO_Init+0x300>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002204:	4a23      	ldr	r2, [pc, #140]	; (8002294 <HAL_GPIO_Init+0x300>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800220a:	4b22      	ldr	r3, [pc, #136]	; (8002294 <HAL_GPIO_Init+0x300>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800222e:	4a19      	ldr	r2, [pc, #100]	; (8002294 <HAL_GPIO_Init+0x300>)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002234:	4b17      	ldr	r3, [pc, #92]	; (8002294 <HAL_GPIO_Init+0x300>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002258:	4a0e      	ldr	r2, [pc, #56]	; (8002294 <HAL_GPIO_Init+0x300>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3301      	adds	r3, #1
 8002262:	61fb      	str	r3, [r7, #28]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	2b0f      	cmp	r3, #15
 8002268:	f67f aea2 	bls.w	8001fb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800226c:	bf00      	nop
 800226e:	3724      	adds	r7, #36	; 0x24
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	40023800 	.word	0x40023800
 800227c:	40013800 	.word	0x40013800
 8002280:	40020000 	.word	0x40020000
 8002284:	40020400 	.word	0x40020400
 8002288:	40020800 	.word	0x40020800
 800228c:	40020c00 	.word	0x40020c00
 8002290:	40021000 	.word	0x40021000
 8002294:	40013c00 	.word	0x40013c00

08002298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	807b      	strh	r3, [r7, #2]
 80022a4:	4613      	mov	r3, r2
 80022a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a8:	787b      	ldrb	r3, [r7, #1]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ae:	887a      	ldrh	r2, [r7, #2]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022b4:	e003      	b.n	80022be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022b6:	887b      	ldrh	r3, [r7, #2]
 80022b8:	041a      	lsls	r2, r3, #16
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	619a      	str	r2, [r3, #24]
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e25b      	b.n	8002796 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d075      	beq.n	80023d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ea:	4ba3      	ldr	r3, [pc, #652]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d00c      	beq.n	8002310 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f6:	4ba0      	ldr	r3, [pc, #640]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d112      	bne.n	8002328 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002302:	4b9d      	ldr	r3, [pc, #628]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800230e:	d10b      	bne.n	8002328 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002310:	4b99      	ldr	r3, [pc, #612]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d05b      	beq.n	80023d4 <HAL_RCC_OscConfig+0x108>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d157      	bne.n	80023d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e236      	b.n	8002796 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002330:	d106      	bne.n	8002340 <HAL_RCC_OscConfig+0x74>
 8002332:	4b91      	ldr	r3, [pc, #580]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a90      	ldr	r2, [pc, #576]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 8002338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e01d      	b.n	800237c <HAL_RCC_OscConfig+0xb0>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0x98>
 800234a:	4b8b      	ldr	r3, [pc, #556]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a8a      	ldr	r2, [pc, #552]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	4b88      	ldr	r3, [pc, #544]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a87      	ldr	r2, [pc, #540]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e00b      	b.n	800237c <HAL_RCC_OscConfig+0xb0>
 8002364:	4b84      	ldr	r3, [pc, #528]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a83      	ldr	r2, [pc, #524]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 800236a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	4b81      	ldr	r3, [pc, #516]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a80      	ldr	r2, [pc, #512]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 8002376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800237a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d013      	beq.n	80023ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7fe fd82 	bl	8000e8c <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800238c:	f7fe fd7e 	bl	8000e8c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	; 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1fb      	b.n	8002796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	4b76      	ldr	r3, [pc, #472]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0xc0>
 80023aa:	e014      	b.n	80023d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7fe fd6e 	bl	8000e8c <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b4:	f7fe fd6a 	bl	8000e8c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	; 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e1e7      	b.n	8002796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	4b6c      	ldr	r3, [pc, #432]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0xe8>
 80023d2:	e000      	b.n	80023d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d063      	beq.n	80024aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023e2:	4b65      	ldr	r3, [pc, #404]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00b      	beq.n	8002406 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ee:	4b62      	ldr	r3, [pc, #392]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d11c      	bne.n	8002434 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023fa:	4b5f      	ldr	r3, [pc, #380]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d116      	bne.n	8002434 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002406:	4b5c      	ldr	r3, [pc, #368]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_RCC_OscConfig+0x152>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d001      	beq.n	800241e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e1bb      	b.n	8002796 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241e:	4b56      	ldr	r3, [pc, #344]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4952      	ldr	r1, [pc, #328]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002432:	e03a      	b.n	80024aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d020      	beq.n	800247e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800243c:	4b4f      	ldr	r3, [pc, #316]	; (800257c <HAL_RCC_OscConfig+0x2b0>)
 800243e:	2201      	movs	r2, #1
 8002440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002442:	f7fe fd23 	bl	8000e8c <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800244a:	f7fe fd1f 	bl	8000e8c <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e19c      	b.n	8002796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245c:	4b46      	ldr	r3, [pc, #280]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002468:	4b43      	ldr	r3, [pc, #268]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4940      	ldr	r1, [pc, #256]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
 800247c:	e015      	b.n	80024aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247e:	4b3f      	ldr	r3, [pc, #252]	; (800257c <HAL_RCC_OscConfig+0x2b0>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe fd02 	bl	8000e8c <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248c:	f7fe fcfe 	bl	8000e8c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e17b      	b.n	8002796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	4b36      	ldr	r3, [pc, #216]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d030      	beq.n	8002518 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d016      	beq.n	80024ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024be:	4b30      	ldr	r3, [pc, #192]	; (8002580 <HAL_RCC_OscConfig+0x2b4>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c4:	f7fe fce2 	bl	8000e8c <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024cc:	f7fe fcde 	bl	8000e8c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e15b      	b.n	8002796 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024de:	4b26      	ldr	r3, [pc, #152]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x200>
 80024ea:	e015      	b.n	8002518 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ec:	4b24      	ldr	r3, [pc, #144]	; (8002580 <HAL_RCC_OscConfig+0x2b4>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f2:	f7fe fccb 	bl	8000e8c <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024fa:	f7fe fcc7 	bl	8000e8c <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e144      	b.n	8002796 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250c:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 800250e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f0      	bne.n	80024fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80a0 	beq.w	8002666 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002526:	2300      	movs	r3, #0
 8002528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10f      	bne.n	8002556 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	4a0e      	ldr	r2, [pc, #56]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 8002540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002544:	6413      	str	r3, [r2, #64]	; 0x40
 8002546:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002552:	2301      	movs	r3, #1
 8002554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_RCC_OscConfig+0x2b8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d121      	bne.n	80025a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002562:	4b08      	ldr	r3, [pc, #32]	; (8002584 <HAL_RCC_OscConfig+0x2b8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a07      	ldr	r2, [pc, #28]	; (8002584 <HAL_RCC_OscConfig+0x2b8>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256e:	f7fe fc8d 	bl	8000e8c <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002574:	e011      	b.n	800259a <HAL_RCC_OscConfig+0x2ce>
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800
 800257c:	42470000 	.word	0x42470000
 8002580:	42470e80 	.word	0x42470e80
 8002584:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002588:	f7fe fc80 	bl	8000e8c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e0fd      	b.n	8002796 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259a:	4b81      	ldr	r3, [pc, #516]	; (80027a0 <HAL_RCC_OscConfig+0x4d4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d106      	bne.n	80025bc <HAL_RCC_OscConfig+0x2f0>
 80025ae:	4b7d      	ldr	r3, [pc, #500]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b2:	4a7c      	ldr	r2, [pc, #496]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ba:	e01c      	b.n	80025f6 <HAL_RCC_OscConfig+0x32a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b05      	cmp	r3, #5
 80025c2:	d10c      	bne.n	80025de <HAL_RCC_OscConfig+0x312>
 80025c4:	4b77      	ldr	r3, [pc, #476]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	4a76      	ldr	r2, [pc, #472]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 80025ca:	f043 0304 	orr.w	r3, r3, #4
 80025ce:	6713      	str	r3, [r2, #112]	; 0x70
 80025d0:	4b74      	ldr	r3, [pc, #464]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	4a73      	ldr	r2, [pc, #460]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6713      	str	r3, [r2, #112]	; 0x70
 80025dc:	e00b      	b.n	80025f6 <HAL_RCC_OscConfig+0x32a>
 80025de:	4b71      	ldr	r3, [pc, #452]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	4a70      	ldr	r2, [pc, #448]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ea:	4b6e      	ldr	r3, [pc, #440]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ee:	4a6d      	ldr	r2, [pc, #436]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 80025f0:	f023 0304 	bic.w	r3, r3, #4
 80025f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d015      	beq.n	800262a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fe:	f7fe fc45 	bl	8000e8c <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002604:	e00a      	b.n	800261c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002606:	f7fe fc41 	bl	8000e8c <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	f241 3288 	movw	r2, #5000	; 0x1388
 8002614:	4293      	cmp	r3, r2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e0bc      	b.n	8002796 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261c:	4b61      	ldr	r3, [pc, #388]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0ee      	beq.n	8002606 <HAL_RCC_OscConfig+0x33a>
 8002628:	e014      	b.n	8002654 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262a:	f7fe fc2f 	bl	8000e8c <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002630:	e00a      	b.n	8002648 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002632:	f7fe fc2b 	bl	8000e8c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002640:	4293      	cmp	r3, r2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e0a6      	b.n	8002796 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002648:	4b56      	ldr	r3, [pc, #344]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1ee      	bne.n	8002632 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002654:	7dfb      	ldrb	r3, [r7, #23]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d105      	bne.n	8002666 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265a:	4b52      	ldr	r3, [pc, #328]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a51      	ldr	r2, [pc, #324]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 8002660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 8092 	beq.w	8002794 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002670:	4b4c      	ldr	r3, [pc, #304]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	2b08      	cmp	r3, #8
 800267a:	d05c      	beq.n	8002736 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d141      	bne.n	8002708 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002684:	4b48      	ldr	r3, [pc, #288]	; (80027a8 <HAL_RCC_OscConfig+0x4dc>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7fe fbff 	bl	8000e8c <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002692:	f7fe fbfb 	bl	8000e8c <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e078      	b.n	8002796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a4:	4b3f      	ldr	r3, [pc, #252]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f0      	bne.n	8002692 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69da      	ldr	r2, [r3, #28]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	019b      	lsls	r3, r3, #6
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	085b      	lsrs	r3, r3, #1
 80026c8:	3b01      	subs	r3, #1
 80026ca:	041b      	lsls	r3, r3, #16
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	061b      	lsls	r3, r3, #24
 80026d4:	4933      	ldr	r1, [pc, #204]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026da:	4b33      	ldr	r3, [pc, #204]	; (80027a8 <HAL_RCC_OscConfig+0x4dc>)
 80026dc:	2201      	movs	r2, #1
 80026de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7fe fbd4 	bl	8000e8c <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e8:	f7fe fbd0 	bl	8000e8c <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e04d      	b.n	8002796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fa:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x41c>
 8002706:	e045      	b.n	8002794 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002708:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <HAL_RCC_OscConfig+0x4dc>)
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270e:	f7fe fbbd 	bl	8000e8c <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002716:	f7fe fbb9 	bl	8000e8c <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e036      	b.n	8002796 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002728:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f0      	bne.n	8002716 <HAL_RCC_OscConfig+0x44a>
 8002734:	e02e      	b.n	8002794 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e029      	b.n	8002796 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_RCC_OscConfig+0x4d8>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	429a      	cmp	r2, r3
 8002754:	d11c      	bne.n	8002790 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002760:	429a      	cmp	r2, r3
 8002762:	d115      	bne.n	8002790 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800276a:	4013      	ands	r3, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002770:	4293      	cmp	r3, r2
 8002772:	d10d      	bne.n	8002790 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800277e:	429a      	cmp	r2, r3
 8002780:	d106      	bne.n	8002790 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40007000 	.word	0x40007000
 80027a4:	40023800 	.word	0x40023800
 80027a8:	42470060 	.word	0x42470060

080027ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0cc      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c0:	4b68      	ldr	r3, [pc, #416]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d90c      	bls.n	80027e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b65      	ldr	r3, [pc, #404]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d6:	4b63      	ldr	r3, [pc, #396]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0b8      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002800:	4b59      	ldr	r3, [pc, #356]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a58      	ldr	r2, [pc, #352]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800280a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002818:	4b53      	ldr	r3, [pc, #332]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4a52      	ldr	r2, [pc, #328]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002824:	4b50      	ldr	r3, [pc, #320]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	494d      	ldr	r1, [pc, #308]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d044      	beq.n	80028cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d107      	bne.n	800285a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	4b47      	ldr	r3, [pc, #284]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d119      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e07f      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d003      	beq.n	800286a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002866:	2b03      	cmp	r3, #3
 8002868:	d107      	bne.n	800287a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286a:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e06f      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287a:	4b3b      	ldr	r3, [pc, #236]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e067      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288a:	4b37      	ldr	r3, [pc, #220]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f023 0203 	bic.w	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4934      	ldr	r1, [pc, #208]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	4313      	orrs	r3, r2
 800289a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800289c:	f7fe faf6 	bl	8000e8c <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a4:	f7fe faf2 	bl	8000e8c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e04f      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	4b2b      	ldr	r3, [pc, #172]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 020c 	and.w	r2, r3, #12
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d1eb      	bne.n	80028a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028cc:	4b25      	ldr	r3, [pc, #148]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d20c      	bcs.n	80028f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b22      	ldr	r3, [pc, #136]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	4b20      	ldr	r3, [pc, #128]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e032      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d008      	beq.n	8002912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	4916      	ldr	r1, [pc, #88]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	490e      	ldr	r1, [pc, #56]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	4313      	orrs	r3, r2
 8002930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002932:	f000 f821 	bl	8002978 <HAL_RCC_GetSysClockFreq>
 8002936:	4601      	mov	r1, r0
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	4a0a      	ldr	r2, [pc, #40]	; (800296c <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	5cd3      	ldrb	r3, [r2, r3]
 8002946:	fa21 f303 	lsr.w	r3, r1, r3
 800294a:	4a09      	ldr	r2, [pc, #36]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800294e:	4b09      	ldr	r3, [pc, #36]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe fa56 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40023c00 	.word	0x40023c00
 8002968:	40023800 	.word	0x40023800
 800296c:	0800417c 	.word	0x0800417c
 8002970:	20000000 	.word	0x20000000
 8002974:	20000004 	.word	0x20000004

08002978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	2300      	movs	r3, #0
 8002988:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800298e:	4b63      	ldr	r3, [pc, #396]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	2b04      	cmp	r3, #4
 8002998:	d007      	beq.n	80029aa <HAL_RCC_GetSysClockFreq+0x32>
 800299a:	2b08      	cmp	r3, #8
 800299c:	d008      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0x38>
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f040 80b4 	bne.w	8002b0c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029a4:	4b5e      	ldr	r3, [pc, #376]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029a6:	60bb      	str	r3, [r7, #8]
       break;
 80029a8:	e0b3      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029aa:	4b5e      	ldr	r3, [pc, #376]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80029ac:	60bb      	str	r3, [r7, #8]
      break;
 80029ae:	e0b0      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b0:	4b5a      	ldr	r3, [pc, #360]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ba:	4b58      	ldr	r3, [pc, #352]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d04a      	beq.n	8002a5c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c6:	4b55      	ldr	r3, [pc, #340]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	f04f 0400 	mov.w	r4, #0
 80029d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	ea03 0501 	and.w	r5, r3, r1
 80029dc:	ea04 0602 	and.w	r6, r4, r2
 80029e0:	4629      	mov	r1, r5
 80029e2:	4632      	mov	r2, r6
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	f04f 0400 	mov.w	r4, #0
 80029ec:	0154      	lsls	r4, r2, #5
 80029ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029f2:	014b      	lsls	r3, r1, #5
 80029f4:	4619      	mov	r1, r3
 80029f6:	4622      	mov	r2, r4
 80029f8:	1b49      	subs	r1, r1, r5
 80029fa:	eb62 0206 	sbc.w	r2, r2, r6
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	0194      	lsls	r4, r2, #6
 8002a08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a0c:	018b      	lsls	r3, r1, #6
 8002a0e:	1a5b      	subs	r3, r3, r1
 8002a10:	eb64 0402 	sbc.w	r4, r4, r2
 8002a14:	f04f 0100 	mov.w	r1, #0
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	00e2      	lsls	r2, r4, #3
 8002a1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a22:	00d9      	lsls	r1, r3, #3
 8002a24:	460b      	mov	r3, r1
 8002a26:	4614      	mov	r4, r2
 8002a28:	195b      	adds	r3, r3, r5
 8002a2a:	eb44 0406 	adc.w	r4, r4, r6
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	0262      	lsls	r2, r4, #9
 8002a38:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a3c:	0259      	lsls	r1, r3, #9
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4614      	mov	r4, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	4621      	mov	r1, r4
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f04f 0400 	mov.w	r4, #0
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4623      	mov	r3, r4
 8002a50:	f7fd fc16 	bl	8000280 <__aeabi_uldivmod>
 8002a54:	4603      	mov	r3, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	e049      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a5c:	4b2f      	ldr	r3, [pc, #188]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	099b      	lsrs	r3, r3, #6
 8002a62:	f04f 0400 	mov.w	r4, #0
 8002a66:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	ea03 0501 	and.w	r5, r3, r1
 8002a72:	ea04 0602 	and.w	r6, r4, r2
 8002a76:	4629      	mov	r1, r5
 8002a78:	4632      	mov	r2, r6
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	f04f 0400 	mov.w	r4, #0
 8002a82:	0154      	lsls	r4, r2, #5
 8002a84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a88:	014b      	lsls	r3, r1, #5
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4622      	mov	r2, r4
 8002a8e:	1b49      	subs	r1, r1, r5
 8002a90:	eb62 0206 	sbc.w	r2, r2, r6
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	f04f 0400 	mov.w	r4, #0
 8002a9c:	0194      	lsls	r4, r2, #6
 8002a9e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002aa2:	018b      	lsls	r3, r1, #6
 8002aa4:	1a5b      	subs	r3, r3, r1
 8002aa6:	eb64 0402 	sbc.w	r4, r4, r2
 8002aaa:	f04f 0100 	mov.w	r1, #0
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	00e2      	lsls	r2, r4, #3
 8002ab4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ab8:	00d9      	lsls	r1, r3, #3
 8002aba:	460b      	mov	r3, r1
 8002abc:	4614      	mov	r4, r2
 8002abe:	195b      	adds	r3, r3, r5
 8002ac0:	eb44 0406 	adc.w	r4, r4, r6
 8002ac4:	f04f 0100 	mov.w	r1, #0
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	02a2      	lsls	r2, r4, #10
 8002ace:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ad2:	0299      	lsls	r1, r3, #10
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4614      	mov	r4, r2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	4621      	mov	r1, r4
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f04f 0400 	mov.w	r4, #0
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	f7fd fbcb 	bl	8000280 <__aeabi_uldivmod>
 8002aea:	4603      	mov	r3, r0
 8002aec:	460c      	mov	r4, r1
 8002aee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002af0:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	0c1b      	lsrs	r3, r3, #16
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	3301      	adds	r3, #1
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b08:	60bb      	str	r3, [r7, #8]
      break;
 8002b0a:	e002      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b0e:	60bb      	str	r3, [r7, #8]
      break;
 8002b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b12:	68bb      	ldr	r3, [r7, #8]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	00f42400 	.word	0x00f42400
 8002b24:	007a1200 	.word	0x007a1200

08002b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b2c:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000000 	.word	0x20000000

08002b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b44:	f7ff fff0 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b48:	4601      	mov	r1, r0
 8002b4a:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	0a9b      	lsrs	r3, r3, #10
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	4a03      	ldr	r2, [pc, #12]	; (8002b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b56:	5cd3      	ldrb	r3, [r2, r3]
 8002b58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40023800 	.word	0x40023800
 8002b64:	0800418c 	.word	0x0800418c

08002b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b6c:	f7ff ffdc 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b70:	4601      	mov	r1, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	0b5b      	lsrs	r3, r3, #13
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4a03      	ldr	r2, [pc, #12]	; (8002b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	0800418c 	.word	0x0800418c

08002b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e03f      	b.n	8002c22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fd ffa8 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2224      	movs	r2, #36	; 0x24
 8002bc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f829 	bl	8002c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695a      	ldr	r2, [r3, #20]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c6e:	f023 030c 	bic.w	r3, r3, #12
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	68f9      	ldr	r1, [r7, #12]
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c9a:	f040 818b 	bne.w	8002fb4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4ac1      	ldr	r2, [pc, #772]	; (8002fa8 <UART_SetConfig+0x37c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d005      	beq.n	8002cb4 <UART_SetConfig+0x88>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4abf      	ldr	r2, [pc, #764]	; (8002fac <UART_SetConfig+0x380>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	f040 80bd 	bne.w	8002e2e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cb4:	f7ff ff58 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
 8002cb8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	461d      	mov	r5, r3
 8002cbe:	f04f 0600 	mov.w	r6, #0
 8002cc2:	46a8      	mov	r8, r5
 8002cc4:	46b1      	mov	r9, r6
 8002cc6:	eb18 0308 	adds.w	r3, r8, r8
 8002cca:	eb49 0409 	adc.w	r4, r9, r9
 8002cce:	4698      	mov	r8, r3
 8002cd0:	46a1      	mov	r9, r4
 8002cd2:	eb18 0805 	adds.w	r8, r8, r5
 8002cd6:	eb49 0906 	adc.w	r9, r9, r6
 8002cda:	f04f 0100 	mov.w	r1, #0
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ce6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002cea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002cee:	4688      	mov	r8, r1
 8002cf0:	4691      	mov	r9, r2
 8002cf2:	eb18 0005 	adds.w	r0, r8, r5
 8002cf6:	eb49 0106 	adc.w	r1, r9, r6
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	461d      	mov	r5, r3
 8002d00:	f04f 0600 	mov.w	r6, #0
 8002d04:	196b      	adds	r3, r5, r5
 8002d06:	eb46 0406 	adc.w	r4, r6, r6
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4623      	mov	r3, r4
 8002d0e:	f7fd fab7 	bl	8000280 <__aeabi_uldivmod>
 8002d12:	4603      	mov	r3, r0
 8002d14:	460c      	mov	r4, r1
 8002d16:	461a      	mov	r2, r3
 8002d18:	4ba5      	ldr	r3, [pc, #660]	; (8002fb0 <UART_SetConfig+0x384>)
 8002d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	461d      	mov	r5, r3
 8002d28:	f04f 0600 	mov.w	r6, #0
 8002d2c:	46a9      	mov	r9, r5
 8002d2e:	46b2      	mov	sl, r6
 8002d30:	eb19 0309 	adds.w	r3, r9, r9
 8002d34:	eb4a 040a 	adc.w	r4, sl, sl
 8002d38:	4699      	mov	r9, r3
 8002d3a:	46a2      	mov	sl, r4
 8002d3c:	eb19 0905 	adds.w	r9, r9, r5
 8002d40:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d44:	f04f 0100 	mov.w	r1, #0
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d58:	4689      	mov	r9, r1
 8002d5a:	4692      	mov	sl, r2
 8002d5c:	eb19 0005 	adds.w	r0, r9, r5
 8002d60:	eb4a 0106 	adc.w	r1, sl, r6
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	461d      	mov	r5, r3
 8002d6a:	f04f 0600 	mov.w	r6, #0
 8002d6e:	196b      	adds	r3, r5, r5
 8002d70:	eb46 0406 	adc.w	r4, r6, r6
 8002d74:	461a      	mov	r2, r3
 8002d76:	4623      	mov	r3, r4
 8002d78:	f7fd fa82 	bl	8000280 <__aeabi_uldivmod>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	460c      	mov	r4, r1
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b8b      	ldr	r3, [pc, #556]	; (8002fb0 <UART_SetConfig+0x384>)
 8002d84:	fba3 1302 	umull	r1, r3, r3, r2
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	2164      	movs	r1, #100	; 0x64
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	3332      	adds	r3, #50	; 0x32
 8002d96:	4a86      	ldr	r2, [pc, #536]	; (8002fb0 <UART_SetConfig+0x384>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002da4:	4498      	add	r8, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	461d      	mov	r5, r3
 8002daa:	f04f 0600 	mov.w	r6, #0
 8002dae:	46a9      	mov	r9, r5
 8002db0:	46b2      	mov	sl, r6
 8002db2:	eb19 0309 	adds.w	r3, r9, r9
 8002db6:	eb4a 040a 	adc.w	r4, sl, sl
 8002dba:	4699      	mov	r9, r3
 8002dbc:	46a2      	mov	sl, r4
 8002dbe:	eb19 0905 	adds.w	r9, r9, r5
 8002dc2:	eb4a 0a06 	adc.w	sl, sl, r6
 8002dc6:	f04f 0100 	mov.w	r1, #0
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dda:	4689      	mov	r9, r1
 8002ddc:	4692      	mov	sl, r2
 8002dde:	eb19 0005 	adds.w	r0, r9, r5
 8002de2:	eb4a 0106 	adc.w	r1, sl, r6
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	461d      	mov	r5, r3
 8002dec:	f04f 0600 	mov.w	r6, #0
 8002df0:	196b      	adds	r3, r5, r5
 8002df2:	eb46 0406 	adc.w	r4, r6, r6
 8002df6:	461a      	mov	r2, r3
 8002df8:	4623      	mov	r3, r4
 8002dfa:	f7fd fa41 	bl	8000280 <__aeabi_uldivmod>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	460c      	mov	r4, r1
 8002e02:	461a      	mov	r2, r3
 8002e04:	4b6a      	ldr	r3, [pc, #424]	; (8002fb0 <UART_SetConfig+0x384>)
 8002e06:	fba3 1302 	umull	r1, r3, r3, r2
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	2164      	movs	r1, #100	; 0x64
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	3332      	adds	r3, #50	; 0x32
 8002e18:	4a65      	ldr	r2, [pc, #404]	; (8002fb0 <UART_SetConfig+0x384>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	f003 0207 	and.w	r2, r3, #7
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4442      	add	r2, r8
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	e26f      	b.n	800330e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e2e:	f7ff fe87 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 8002e32:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	461d      	mov	r5, r3
 8002e38:	f04f 0600 	mov.w	r6, #0
 8002e3c:	46a8      	mov	r8, r5
 8002e3e:	46b1      	mov	r9, r6
 8002e40:	eb18 0308 	adds.w	r3, r8, r8
 8002e44:	eb49 0409 	adc.w	r4, r9, r9
 8002e48:	4698      	mov	r8, r3
 8002e4a:	46a1      	mov	r9, r4
 8002e4c:	eb18 0805 	adds.w	r8, r8, r5
 8002e50:	eb49 0906 	adc.w	r9, r9, r6
 8002e54:	f04f 0100 	mov.w	r1, #0
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e60:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e64:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e68:	4688      	mov	r8, r1
 8002e6a:	4691      	mov	r9, r2
 8002e6c:	eb18 0005 	adds.w	r0, r8, r5
 8002e70:	eb49 0106 	adc.w	r1, r9, r6
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	461d      	mov	r5, r3
 8002e7a:	f04f 0600 	mov.w	r6, #0
 8002e7e:	196b      	adds	r3, r5, r5
 8002e80:	eb46 0406 	adc.w	r4, r6, r6
 8002e84:	461a      	mov	r2, r3
 8002e86:	4623      	mov	r3, r4
 8002e88:	f7fd f9fa 	bl	8000280 <__aeabi_uldivmod>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	460c      	mov	r4, r1
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b47      	ldr	r3, [pc, #284]	; (8002fb0 <UART_SetConfig+0x384>)
 8002e94:	fba3 2302 	umull	r2, r3, r3, r2
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	461d      	mov	r5, r3
 8002ea2:	f04f 0600 	mov.w	r6, #0
 8002ea6:	46a9      	mov	r9, r5
 8002ea8:	46b2      	mov	sl, r6
 8002eaa:	eb19 0309 	adds.w	r3, r9, r9
 8002eae:	eb4a 040a 	adc.w	r4, sl, sl
 8002eb2:	4699      	mov	r9, r3
 8002eb4:	46a2      	mov	sl, r4
 8002eb6:	eb19 0905 	adds.w	r9, r9, r5
 8002eba:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ebe:	f04f 0100 	mov.w	r1, #0
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ece:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ed2:	4689      	mov	r9, r1
 8002ed4:	4692      	mov	sl, r2
 8002ed6:	eb19 0005 	adds.w	r0, r9, r5
 8002eda:	eb4a 0106 	adc.w	r1, sl, r6
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	461d      	mov	r5, r3
 8002ee4:	f04f 0600 	mov.w	r6, #0
 8002ee8:	196b      	adds	r3, r5, r5
 8002eea:	eb46 0406 	adc.w	r4, r6, r6
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4623      	mov	r3, r4
 8002ef2:	f7fd f9c5 	bl	8000280 <__aeabi_uldivmod>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	460c      	mov	r4, r1
 8002efa:	461a      	mov	r2, r3
 8002efc:	4b2c      	ldr	r3, [pc, #176]	; (8002fb0 <UART_SetConfig+0x384>)
 8002efe:	fba3 1302 	umull	r1, r3, r3, r2
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	2164      	movs	r1, #100	; 0x64
 8002f06:	fb01 f303 	mul.w	r3, r1, r3
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	3332      	adds	r3, #50	; 0x32
 8002f10:	4a27      	ldr	r2, [pc, #156]	; (8002fb0 <UART_SetConfig+0x384>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f1e:	4498      	add	r8, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	461d      	mov	r5, r3
 8002f24:	f04f 0600 	mov.w	r6, #0
 8002f28:	46a9      	mov	r9, r5
 8002f2a:	46b2      	mov	sl, r6
 8002f2c:	eb19 0309 	adds.w	r3, r9, r9
 8002f30:	eb4a 040a 	adc.w	r4, sl, sl
 8002f34:	4699      	mov	r9, r3
 8002f36:	46a2      	mov	sl, r4
 8002f38:	eb19 0905 	adds.w	r9, r9, r5
 8002f3c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f40:	f04f 0100 	mov.w	r1, #0
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f54:	4689      	mov	r9, r1
 8002f56:	4692      	mov	sl, r2
 8002f58:	eb19 0005 	adds.w	r0, r9, r5
 8002f5c:	eb4a 0106 	adc.w	r1, sl, r6
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	461d      	mov	r5, r3
 8002f66:	f04f 0600 	mov.w	r6, #0
 8002f6a:	196b      	adds	r3, r5, r5
 8002f6c:	eb46 0406 	adc.w	r4, r6, r6
 8002f70:	461a      	mov	r2, r3
 8002f72:	4623      	mov	r3, r4
 8002f74:	f7fd f984 	bl	8000280 <__aeabi_uldivmod>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	460c      	mov	r4, r1
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <UART_SetConfig+0x384>)
 8002f80:	fba3 1302 	umull	r1, r3, r3, r2
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	2164      	movs	r1, #100	; 0x64
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	3332      	adds	r3, #50	; 0x32
 8002f92:	4a07      	ldr	r2, [pc, #28]	; (8002fb0 <UART_SetConfig+0x384>)
 8002f94:	fba2 2303 	umull	r2, r3, r2, r3
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	f003 0207 	and.w	r2, r3, #7
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4442      	add	r2, r8
 8002fa4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002fa6:	e1b2      	b.n	800330e <UART_SetConfig+0x6e2>
 8002fa8:	40011000 	.word	0x40011000
 8002fac:	40011400 	.word	0x40011400
 8002fb0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4ad7      	ldr	r2, [pc, #860]	; (8003318 <UART_SetConfig+0x6ec>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d005      	beq.n	8002fca <UART_SetConfig+0x39e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4ad6      	ldr	r2, [pc, #856]	; (800331c <UART_SetConfig+0x6f0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	f040 80d1 	bne.w	800316c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fca:	f7ff fdcd 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
 8002fce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	469a      	mov	sl, r3
 8002fd4:	f04f 0b00 	mov.w	fp, #0
 8002fd8:	46d0      	mov	r8, sl
 8002fda:	46d9      	mov	r9, fp
 8002fdc:	eb18 0308 	adds.w	r3, r8, r8
 8002fe0:	eb49 0409 	adc.w	r4, r9, r9
 8002fe4:	4698      	mov	r8, r3
 8002fe6:	46a1      	mov	r9, r4
 8002fe8:	eb18 080a 	adds.w	r8, r8, sl
 8002fec:	eb49 090b 	adc.w	r9, r9, fp
 8002ff0:	f04f 0100 	mov.w	r1, #0
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ffc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003000:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003004:	4688      	mov	r8, r1
 8003006:	4691      	mov	r9, r2
 8003008:	eb1a 0508 	adds.w	r5, sl, r8
 800300c:	eb4b 0609 	adc.w	r6, fp, r9
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4619      	mov	r1, r3
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	f04f 0400 	mov.w	r4, #0
 8003022:	0094      	lsls	r4, r2, #2
 8003024:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003028:	008b      	lsls	r3, r1, #2
 800302a:	461a      	mov	r2, r3
 800302c:	4623      	mov	r3, r4
 800302e:	4628      	mov	r0, r5
 8003030:	4631      	mov	r1, r6
 8003032:	f7fd f925 	bl	8000280 <__aeabi_uldivmod>
 8003036:	4603      	mov	r3, r0
 8003038:	460c      	mov	r4, r1
 800303a:	461a      	mov	r2, r3
 800303c:	4bb8      	ldr	r3, [pc, #736]	; (8003320 <UART_SetConfig+0x6f4>)
 800303e:	fba3 2302 	umull	r2, r3, r3, r2
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	469b      	mov	fp, r3
 800304c:	f04f 0c00 	mov.w	ip, #0
 8003050:	46d9      	mov	r9, fp
 8003052:	46e2      	mov	sl, ip
 8003054:	eb19 0309 	adds.w	r3, r9, r9
 8003058:	eb4a 040a 	adc.w	r4, sl, sl
 800305c:	4699      	mov	r9, r3
 800305e:	46a2      	mov	sl, r4
 8003060:	eb19 090b 	adds.w	r9, r9, fp
 8003064:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003068:	f04f 0100 	mov.w	r1, #0
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003074:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003078:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800307c:	4689      	mov	r9, r1
 800307e:	4692      	mov	sl, r2
 8003080:	eb1b 0509 	adds.w	r5, fp, r9
 8003084:	eb4c 060a 	adc.w	r6, ip, sl
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4619      	mov	r1, r3
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	f04f 0400 	mov.w	r4, #0
 800309a:	0094      	lsls	r4, r2, #2
 800309c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030a0:	008b      	lsls	r3, r1, #2
 80030a2:	461a      	mov	r2, r3
 80030a4:	4623      	mov	r3, r4
 80030a6:	4628      	mov	r0, r5
 80030a8:	4631      	mov	r1, r6
 80030aa:	f7fd f8e9 	bl	8000280 <__aeabi_uldivmod>
 80030ae:	4603      	mov	r3, r0
 80030b0:	460c      	mov	r4, r1
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b9a      	ldr	r3, [pc, #616]	; (8003320 <UART_SetConfig+0x6f4>)
 80030b6:	fba3 1302 	umull	r1, r3, r3, r2
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2164      	movs	r1, #100	; 0x64
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	3332      	adds	r3, #50	; 0x32
 80030c8:	4a95      	ldr	r2, [pc, #596]	; (8003320 <UART_SetConfig+0x6f4>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030d4:	4498      	add	r8, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	469b      	mov	fp, r3
 80030da:	f04f 0c00 	mov.w	ip, #0
 80030de:	46d9      	mov	r9, fp
 80030e0:	46e2      	mov	sl, ip
 80030e2:	eb19 0309 	adds.w	r3, r9, r9
 80030e6:	eb4a 040a 	adc.w	r4, sl, sl
 80030ea:	4699      	mov	r9, r3
 80030ec:	46a2      	mov	sl, r4
 80030ee:	eb19 090b 	adds.w	r9, r9, fp
 80030f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030f6:	f04f 0100 	mov.w	r1, #0
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003102:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003106:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800310a:	4689      	mov	r9, r1
 800310c:	4692      	mov	sl, r2
 800310e:	eb1b 0509 	adds.w	r5, fp, r9
 8003112:	eb4c 060a 	adc.w	r6, ip, sl
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	f04f 0400 	mov.w	r4, #0
 8003128:	0094      	lsls	r4, r2, #2
 800312a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800312e:	008b      	lsls	r3, r1, #2
 8003130:	461a      	mov	r2, r3
 8003132:	4623      	mov	r3, r4
 8003134:	4628      	mov	r0, r5
 8003136:	4631      	mov	r1, r6
 8003138:	f7fd f8a2 	bl	8000280 <__aeabi_uldivmod>
 800313c:	4603      	mov	r3, r0
 800313e:	460c      	mov	r4, r1
 8003140:	461a      	mov	r2, r3
 8003142:	4b77      	ldr	r3, [pc, #476]	; (8003320 <UART_SetConfig+0x6f4>)
 8003144:	fba3 1302 	umull	r1, r3, r3, r2
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	2164      	movs	r1, #100	; 0x64
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	3332      	adds	r3, #50	; 0x32
 8003156:	4a72      	ldr	r2, [pc, #456]	; (8003320 <UART_SetConfig+0x6f4>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	f003 020f 	and.w	r2, r3, #15
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4442      	add	r2, r8
 8003168:	609a      	str	r2, [r3, #8]
 800316a:	e0d0      	b.n	800330e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800316c:	f7ff fce8 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 8003170:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	469a      	mov	sl, r3
 8003176:	f04f 0b00 	mov.w	fp, #0
 800317a:	46d0      	mov	r8, sl
 800317c:	46d9      	mov	r9, fp
 800317e:	eb18 0308 	adds.w	r3, r8, r8
 8003182:	eb49 0409 	adc.w	r4, r9, r9
 8003186:	4698      	mov	r8, r3
 8003188:	46a1      	mov	r9, r4
 800318a:	eb18 080a 	adds.w	r8, r8, sl
 800318e:	eb49 090b 	adc.w	r9, r9, fp
 8003192:	f04f 0100 	mov.w	r1, #0
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800319e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031a6:	4688      	mov	r8, r1
 80031a8:	4691      	mov	r9, r2
 80031aa:	eb1a 0508 	adds.w	r5, sl, r8
 80031ae:	eb4b 0609 	adc.w	r6, fp, r9
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	4619      	mov	r1, r3
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	f04f 0400 	mov.w	r4, #0
 80031c4:	0094      	lsls	r4, r2, #2
 80031c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031ca:	008b      	lsls	r3, r1, #2
 80031cc:	461a      	mov	r2, r3
 80031ce:	4623      	mov	r3, r4
 80031d0:	4628      	mov	r0, r5
 80031d2:	4631      	mov	r1, r6
 80031d4:	f7fd f854 	bl	8000280 <__aeabi_uldivmod>
 80031d8:	4603      	mov	r3, r0
 80031da:	460c      	mov	r4, r1
 80031dc:	461a      	mov	r2, r3
 80031de:	4b50      	ldr	r3, [pc, #320]	; (8003320 <UART_SetConfig+0x6f4>)
 80031e0:	fba3 2302 	umull	r2, r3, r3, r2
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	469b      	mov	fp, r3
 80031ee:	f04f 0c00 	mov.w	ip, #0
 80031f2:	46d9      	mov	r9, fp
 80031f4:	46e2      	mov	sl, ip
 80031f6:	eb19 0309 	adds.w	r3, r9, r9
 80031fa:	eb4a 040a 	adc.w	r4, sl, sl
 80031fe:	4699      	mov	r9, r3
 8003200:	46a2      	mov	sl, r4
 8003202:	eb19 090b 	adds.w	r9, r9, fp
 8003206:	eb4a 0a0c 	adc.w	sl, sl, ip
 800320a:	f04f 0100 	mov.w	r1, #0
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003216:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800321a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800321e:	4689      	mov	r9, r1
 8003220:	4692      	mov	sl, r2
 8003222:	eb1b 0509 	adds.w	r5, fp, r9
 8003226:	eb4c 060a 	adc.w	r6, ip, sl
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4619      	mov	r1, r3
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	f04f 0400 	mov.w	r4, #0
 800323c:	0094      	lsls	r4, r2, #2
 800323e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003242:	008b      	lsls	r3, r1, #2
 8003244:	461a      	mov	r2, r3
 8003246:	4623      	mov	r3, r4
 8003248:	4628      	mov	r0, r5
 800324a:	4631      	mov	r1, r6
 800324c:	f7fd f818 	bl	8000280 <__aeabi_uldivmod>
 8003250:	4603      	mov	r3, r0
 8003252:	460c      	mov	r4, r1
 8003254:	461a      	mov	r2, r3
 8003256:	4b32      	ldr	r3, [pc, #200]	; (8003320 <UART_SetConfig+0x6f4>)
 8003258:	fba3 1302 	umull	r1, r3, r3, r2
 800325c:	095b      	lsrs	r3, r3, #5
 800325e:	2164      	movs	r1, #100	; 0x64
 8003260:	fb01 f303 	mul.w	r3, r1, r3
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	3332      	adds	r3, #50	; 0x32
 800326a:	4a2d      	ldr	r2, [pc, #180]	; (8003320 <UART_SetConfig+0x6f4>)
 800326c:	fba2 2303 	umull	r2, r3, r2, r3
 8003270:	095b      	lsrs	r3, r3, #5
 8003272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003276:	4498      	add	r8, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	469b      	mov	fp, r3
 800327c:	f04f 0c00 	mov.w	ip, #0
 8003280:	46d9      	mov	r9, fp
 8003282:	46e2      	mov	sl, ip
 8003284:	eb19 0309 	adds.w	r3, r9, r9
 8003288:	eb4a 040a 	adc.w	r4, sl, sl
 800328c:	4699      	mov	r9, r3
 800328e:	46a2      	mov	sl, r4
 8003290:	eb19 090b 	adds.w	r9, r9, fp
 8003294:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003298:	f04f 0100 	mov.w	r1, #0
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032ac:	4689      	mov	r9, r1
 80032ae:	4692      	mov	sl, r2
 80032b0:	eb1b 0509 	adds.w	r5, fp, r9
 80032b4:	eb4c 060a 	adc.w	r6, ip, sl
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4619      	mov	r1, r3
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	f04f 0400 	mov.w	r4, #0
 80032ca:	0094      	lsls	r4, r2, #2
 80032cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032d0:	008b      	lsls	r3, r1, #2
 80032d2:	461a      	mov	r2, r3
 80032d4:	4623      	mov	r3, r4
 80032d6:	4628      	mov	r0, r5
 80032d8:	4631      	mov	r1, r6
 80032da:	f7fc ffd1 	bl	8000280 <__aeabi_uldivmod>
 80032de:	4603      	mov	r3, r0
 80032e0:	460c      	mov	r4, r1
 80032e2:	461a      	mov	r2, r3
 80032e4:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <UART_SetConfig+0x6f4>)
 80032e6:	fba3 1302 	umull	r1, r3, r3, r2
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	2164      	movs	r1, #100	; 0x64
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	3332      	adds	r3, #50	; 0x32
 80032f8:	4a09      	ldr	r2, [pc, #36]	; (8003320 <UART_SetConfig+0x6f4>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	f003 020f 	and.w	r2, r3, #15
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4442      	add	r2, r8
 800330a:	609a      	str	r2, [r3, #8]
}
 800330c:	e7ff      	b.n	800330e <UART_SetConfig+0x6e2>
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003318:	40011000 	.word	0x40011000
 800331c:	40011400 	.word	0x40011400
 8003320:	51eb851f 	.word	0x51eb851f

08003324 <__errno>:
 8003324:	4b01      	ldr	r3, [pc, #4]	; (800332c <__errno+0x8>)
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	2000000c 	.word	0x2000000c

08003330 <__libc_init_array>:
 8003330:	b570      	push	{r4, r5, r6, lr}
 8003332:	4e0d      	ldr	r6, [pc, #52]	; (8003368 <__libc_init_array+0x38>)
 8003334:	4c0d      	ldr	r4, [pc, #52]	; (800336c <__libc_init_array+0x3c>)
 8003336:	1ba4      	subs	r4, r4, r6
 8003338:	10a4      	asrs	r4, r4, #2
 800333a:	2500      	movs	r5, #0
 800333c:	42a5      	cmp	r5, r4
 800333e:	d109      	bne.n	8003354 <__libc_init_array+0x24>
 8003340:	4e0b      	ldr	r6, [pc, #44]	; (8003370 <__libc_init_array+0x40>)
 8003342:	4c0c      	ldr	r4, [pc, #48]	; (8003374 <__libc_init_array+0x44>)
 8003344:	f000 ff04 	bl	8004150 <_init>
 8003348:	1ba4      	subs	r4, r4, r6
 800334a:	10a4      	asrs	r4, r4, #2
 800334c:	2500      	movs	r5, #0
 800334e:	42a5      	cmp	r5, r4
 8003350:	d105      	bne.n	800335e <__libc_init_array+0x2e>
 8003352:	bd70      	pop	{r4, r5, r6, pc}
 8003354:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003358:	4798      	blx	r3
 800335a:	3501      	adds	r5, #1
 800335c:	e7ee      	b.n	800333c <__libc_init_array+0xc>
 800335e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003362:	4798      	blx	r3
 8003364:	3501      	adds	r5, #1
 8003366:	e7f2      	b.n	800334e <__libc_init_array+0x1e>
 8003368:	0800423c 	.word	0x0800423c
 800336c:	0800423c 	.word	0x0800423c
 8003370:	0800423c 	.word	0x0800423c
 8003374:	08004240 	.word	0x08004240

08003378 <memset>:
 8003378:	4402      	add	r2, r0
 800337a:	4603      	mov	r3, r0
 800337c:	4293      	cmp	r3, r2
 800337e:	d100      	bne.n	8003382 <memset+0xa>
 8003380:	4770      	bx	lr
 8003382:	f803 1b01 	strb.w	r1, [r3], #1
 8003386:	e7f9      	b.n	800337c <memset+0x4>

08003388 <iprintf>:
 8003388:	b40f      	push	{r0, r1, r2, r3}
 800338a:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <iprintf+0x2c>)
 800338c:	b513      	push	{r0, r1, r4, lr}
 800338e:	681c      	ldr	r4, [r3, #0]
 8003390:	b124      	cbz	r4, 800339c <iprintf+0x14>
 8003392:	69a3      	ldr	r3, [r4, #24]
 8003394:	b913      	cbnz	r3, 800339c <iprintf+0x14>
 8003396:	4620      	mov	r0, r4
 8003398:	f000 f84e 	bl	8003438 <__sinit>
 800339c:	ab05      	add	r3, sp, #20
 800339e:	9a04      	ldr	r2, [sp, #16]
 80033a0:	68a1      	ldr	r1, [r4, #8]
 80033a2:	9301      	str	r3, [sp, #4]
 80033a4:	4620      	mov	r0, r4
 80033a6:	f000 f955 	bl	8003654 <_vfiprintf_r>
 80033aa:	b002      	add	sp, #8
 80033ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033b0:	b004      	add	sp, #16
 80033b2:	4770      	bx	lr
 80033b4:	2000000c 	.word	0x2000000c

080033b8 <std>:
 80033b8:	2300      	movs	r3, #0
 80033ba:	b510      	push	{r4, lr}
 80033bc:	4604      	mov	r4, r0
 80033be:	e9c0 3300 	strd	r3, r3, [r0]
 80033c2:	6083      	str	r3, [r0, #8]
 80033c4:	8181      	strh	r1, [r0, #12]
 80033c6:	6643      	str	r3, [r0, #100]	; 0x64
 80033c8:	81c2      	strh	r2, [r0, #14]
 80033ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033ce:	6183      	str	r3, [r0, #24]
 80033d0:	4619      	mov	r1, r3
 80033d2:	2208      	movs	r2, #8
 80033d4:	305c      	adds	r0, #92	; 0x5c
 80033d6:	f7ff ffcf 	bl	8003378 <memset>
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <std+0x38>)
 80033dc:	6263      	str	r3, [r4, #36]	; 0x24
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <std+0x3c>)
 80033e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <std+0x40>)
 80033e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <std+0x44>)
 80033e8:	6224      	str	r4, [r4, #32]
 80033ea:	6323      	str	r3, [r4, #48]	; 0x30
 80033ec:	bd10      	pop	{r4, pc}
 80033ee:	bf00      	nop
 80033f0:	08003bb1 	.word	0x08003bb1
 80033f4:	08003bd3 	.word	0x08003bd3
 80033f8:	08003c0b 	.word	0x08003c0b
 80033fc:	08003c2f 	.word	0x08003c2f

08003400 <_cleanup_r>:
 8003400:	4901      	ldr	r1, [pc, #4]	; (8003408 <_cleanup_r+0x8>)
 8003402:	f000 b885 	b.w	8003510 <_fwalk_reent>
 8003406:	bf00      	nop
 8003408:	08003f09 	.word	0x08003f09

0800340c <__sfmoreglue>:
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	1e4a      	subs	r2, r1, #1
 8003410:	2568      	movs	r5, #104	; 0x68
 8003412:	4355      	muls	r5, r2
 8003414:	460e      	mov	r6, r1
 8003416:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800341a:	f000 f897 	bl	800354c <_malloc_r>
 800341e:	4604      	mov	r4, r0
 8003420:	b140      	cbz	r0, 8003434 <__sfmoreglue+0x28>
 8003422:	2100      	movs	r1, #0
 8003424:	e9c0 1600 	strd	r1, r6, [r0]
 8003428:	300c      	adds	r0, #12
 800342a:	60a0      	str	r0, [r4, #8]
 800342c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003430:	f7ff ffa2 	bl	8003378 <memset>
 8003434:	4620      	mov	r0, r4
 8003436:	bd70      	pop	{r4, r5, r6, pc}

08003438 <__sinit>:
 8003438:	6983      	ldr	r3, [r0, #24]
 800343a:	b510      	push	{r4, lr}
 800343c:	4604      	mov	r4, r0
 800343e:	bb33      	cbnz	r3, 800348e <__sinit+0x56>
 8003440:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003444:	6503      	str	r3, [r0, #80]	; 0x50
 8003446:	4b12      	ldr	r3, [pc, #72]	; (8003490 <__sinit+0x58>)
 8003448:	4a12      	ldr	r2, [pc, #72]	; (8003494 <__sinit+0x5c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6282      	str	r2, [r0, #40]	; 0x28
 800344e:	4298      	cmp	r0, r3
 8003450:	bf04      	itt	eq
 8003452:	2301      	moveq	r3, #1
 8003454:	6183      	streq	r3, [r0, #24]
 8003456:	f000 f81f 	bl	8003498 <__sfp>
 800345a:	6060      	str	r0, [r4, #4]
 800345c:	4620      	mov	r0, r4
 800345e:	f000 f81b 	bl	8003498 <__sfp>
 8003462:	60a0      	str	r0, [r4, #8]
 8003464:	4620      	mov	r0, r4
 8003466:	f000 f817 	bl	8003498 <__sfp>
 800346a:	2200      	movs	r2, #0
 800346c:	60e0      	str	r0, [r4, #12]
 800346e:	2104      	movs	r1, #4
 8003470:	6860      	ldr	r0, [r4, #4]
 8003472:	f7ff ffa1 	bl	80033b8 <std>
 8003476:	2201      	movs	r2, #1
 8003478:	2109      	movs	r1, #9
 800347a:	68a0      	ldr	r0, [r4, #8]
 800347c:	f7ff ff9c 	bl	80033b8 <std>
 8003480:	2202      	movs	r2, #2
 8003482:	2112      	movs	r1, #18
 8003484:	68e0      	ldr	r0, [r4, #12]
 8003486:	f7ff ff97 	bl	80033b8 <std>
 800348a:	2301      	movs	r3, #1
 800348c:	61a3      	str	r3, [r4, #24]
 800348e:	bd10      	pop	{r4, pc}
 8003490:	0800419c 	.word	0x0800419c
 8003494:	08003401 	.word	0x08003401

08003498 <__sfp>:
 8003498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800349a:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <__sfp+0x70>)
 800349c:	681e      	ldr	r6, [r3, #0]
 800349e:	69b3      	ldr	r3, [r6, #24]
 80034a0:	4607      	mov	r7, r0
 80034a2:	b913      	cbnz	r3, 80034aa <__sfp+0x12>
 80034a4:	4630      	mov	r0, r6
 80034a6:	f7ff ffc7 	bl	8003438 <__sinit>
 80034aa:	3648      	adds	r6, #72	; 0x48
 80034ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	d503      	bpl.n	80034bc <__sfp+0x24>
 80034b4:	6833      	ldr	r3, [r6, #0]
 80034b6:	b133      	cbz	r3, 80034c6 <__sfp+0x2e>
 80034b8:	6836      	ldr	r6, [r6, #0]
 80034ba:	e7f7      	b.n	80034ac <__sfp+0x14>
 80034bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80034c0:	b16d      	cbz	r5, 80034de <__sfp+0x46>
 80034c2:	3468      	adds	r4, #104	; 0x68
 80034c4:	e7f4      	b.n	80034b0 <__sfp+0x18>
 80034c6:	2104      	movs	r1, #4
 80034c8:	4638      	mov	r0, r7
 80034ca:	f7ff ff9f 	bl	800340c <__sfmoreglue>
 80034ce:	6030      	str	r0, [r6, #0]
 80034d0:	2800      	cmp	r0, #0
 80034d2:	d1f1      	bne.n	80034b8 <__sfp+0x20>
 80034d4:	230c      	movs	r3, #12
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	4604      	mov	r4, r0
 80034da:	4620      	mov	r0, r4
 80034dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034de:	4b0b      	ldr	r3, [pc, #44]	; (800350c <__sfp+0x74>)
 80034e0:	6665      	str	r5, [r4, #100]	; 0x64
 80034e2:	e9c4 5500 	strd	r5, r5, [r4]
 80034e6:	60a5      	str	r5, [r4, #8]
 80034e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80034ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80034f0:	2208      	movs	r2, #8
 80034f2:	4629      	mov	r1, r5
 80034f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80034f8:	f7ff ff3e 	bl	8003378 <memset>
 80034fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003500:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003504:	e7e9      	b.n	80034da <__sfp+0x42>
 8003506:	bf00      	nop
 8003508:	0800419c 	.word	0x0800419c
 800350c:	ffff0001 	.word	0xffff0001

08003510 <_fwalk_reent>:
 8003510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003514:	4680      	mov	r8, r0
 8003516:	4689      	mov	r9, r1
 8003518:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800351c:	2600      	movs	r6, #0
 800351e:	b914      	cbnz	r4, 8003526 <_fwalk_reent+0x16>
 8003520:	4630      	mov	r0, r6
 8003522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003526:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800352a:	3f01      	subs	r7, #1
 800352c:	d501      	bpl.n	8003532 <_fwalk_reent+0x22>
 800352e:	6824      	ldr	r4, [r4, #0]
 8003530:	e7f5      	b.n	800351e <_fwalk_reent+0xe>
 8003532:	89ab      	ldrh	r3, [r5, #12]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d907      	bls.n	8003548 <_fwalk_reent+0x38>
 8003538:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800353c:	3301      	adds	r3, #1
 800353e:	d003      	beq.n	8003548 <_fwalk_reent+0x38>
 8003540:	4629      	mov	r1, r5
 8003542:	4640      	mov	r0, r8
 8003544:	47c8      	blx	r9
 8003546:	4306      	orrs	r6, r0
 8003548:	3568      	adds	r5, #104	; 0x68
 800354a:	e7ee      	b.n	800352a <_fwalk_reent+0x1a>

0800354c <_malloc_r>:
 800354c:	b570      	push	{r4, r5, r6, lr}
 800354e:	1ccd      	adds	r5, r1, #3
 8003550:	f025 0503 	bic.w	r5, r5, #3
 8003554:	3508      	adds	r5, #8
 8003556:	2d0c      	cmp	r5, #12
 8003558:	bf38      	it	cc
 800355a:	250c      	movcc	r5, #12
 800355c:	2d00      	cmp	r5, #0
 800355e:	4606      	mov	r6, r0
 8003560:	db01      	blt.n	8003566 <_malloc_r+0x1a>
 8003562:	42a9      	cmp	r1, r5
 8003564:	d903      	bls.n	800356e <_malloc_r+0x22>
 8003566:	230c      	movs	r3, #12
 8003568:	6033      	str	r3, [r6, #0]
 800356a:	2000      	movs	r0, #0
 800356c:	bd70      	pop	{r4, r5, r6, pc}
 800356e:	f000 fd6b 	bl	8004048 <__malloc_lock>
 8003572:	4a21      	ldr	r2, [pc, #132]	; (80035f8 <_malloc_r+0xac>)
 8003574:	6814      	ldr	r4, [r2, #0]
 8003576:	4621      	mov	r1, r4
 8003578:	b991      	cbnz	r1, 80035a0 <_malloc_r+0x54>
 800357a:	4c20      	ldr	r4, [pc, #128]	; (80035fc <_malloc_r+0xb0>)
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	b91b      	cbnz	r3, 8003588 <_malloc_r+0x3c>
 8003580:	4630      	mov	r0, r6
 8003582:	f000 fb05 	bl	8003b90 <_sbrk_r>
 8003586:	6020      	str	r0, [r4, #0]
 8003588:	4629      	mov	r1, r5
 800358a:	4630      	mov	r0, r6
 800358c:	f000 fb00 	bl	8003b90 <_sbrk_r>
 8003590:	1c43      	adds	r3, r0, #1
 8003592:	d124      	bne.n	80035de <_malloc_r+0x92>
 8003594:	230c      	movs	r3, #12
 8003596:	6033      	str	r3, [r6, #0]
 8003598:	4630      	mov	r0, r6
 800359a:	f000 fd56 	bl	800404a <__malloc_unlock>
 800359e:	e7e4      	b.n	800356a <_malloc_r+0x1e>
 80035a0:	680b      	ldr	r3, [r1, #0]
 80035a2:	1b5b      	subs	r3, r3, r5
 80035a4:	d418      	bmi.n	80035d8 <_malloc_r+0x8c>
 80035a6:	2b0b      	cmp	r3, #11
 80035a8:	d90f      	bls.n	80035ca <_malloc_r+0x7e>
 80035aa:	600b      	str	r3, [r1, #0]
 80035ac:	50cd      	str	r5, [r1, r3]
 80035ae:	18cc      	adds	r4, r1, r3
 80035b0:	4630      	mov	r0, r6
 80035b2:	f000 fd4a 	bl	800404a <__malloc_unlock>
 80035b6:	f104 000b 	add.w	r0, r4, #11
 80035ba:	1d23      	adds	r3, r4, #4
 80035bc:	f020 0007 	bic.w	r0, r0, #7
 80035c0:	1ac3      	subs	r3, r0, r3
 80035c2:	d0d3      	beq.n	800356c <_malloc_r+0x20>
 80035c4:	425a      	negs	r2, r3
 80035c6:	50e2      	str	r2, [r4, r3]
 80035c8:	e7d0      	b.n	800356c <_malloc_r+0x20>
 80035ca:	428c      	cmp	r4, r1
 80035cc:	684b      	ldr	r3, [r1, #4]
 80035ce:	bf16      	itet	ne
 80035d0:	6063      	strne	r3, [r4, #4]
 80035d2:	6013      	streq	r3, [r2, #0]
 80035d4:	460c      	movne	r4, r1
 80035d6:	e7eb      	b.n	80035b0 <_malloc_r+0x64>
 80035d8:	460c      	mov	r4, r1
 80035da:	6849      	ldr	r1, [r1, #4]
 80035dc:	e7cc      	b.n	8003578 <_malloc_r+0x2c>
 80035de:	1cc4      	adds	r4, r0, #3
 80035e0:	f024 0403 	bic.w	r4, r4, #3
 80035e4:	42a0      	cmp	r0, r4
 80035e6:	d005      	beq.n	80035f4 <_malloc_r+0xa8>
 80035e8:	1a21      	subs	r1, r4, r0
 80035ea:	4630      	mov	r0, r6
 80035ec:	f000 fad0 	bl	8003b90 <_sbrk_r>
 80035f0:	3001      	adds	r0, #1
 80035f2:	d0cf      	beq.n	8003594 <_malloc_r+0x48>
 80035f4:	6025      	str	r5, [r4, #0]
 80035f6:	e7db      	b.n	80035b0 <_malloc_r+0x64>
 80035f8:	20000090 	.word	0x20000090
 80035fc:	20000094 	.word	0x20000094

08003600 <__sfputc_r>:
 8003600:	6893      	ldr	r3, [r2, #8]
 8003602:	3b01      	subs	r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	b410      	push	{r4}
 8003608:	6093      	str	r3, [r2, #8]
 800360a:	da08      	bge.n	800361e <__sfputc_r+0x1e>
 800360c:	6994      	ldr	r4, [r2, #24]
 800360e:	42a3      	cmp	r3, r4
 8003610:	db01      	blt.n	8003616 <__sfputc_r+0x16>
 8003612:	290a      	cmp	r1, #10
 8003614:	d103      	bne.n	800361e <__sfputc_r+0x1e>
 8003616:	f85d 4b04 	ldr.w	r4, [sp], #4
 800361a:	f000 bb0d 	b.w	8003c38 <__swbuf_r>
 800361e:	6813      	ldr	r3, [r2, #0]
 8003620:	1c58      	adds	r0, r3, #1
 8003622:	6010      	str	r0, [r2, #0]
 8003624:	7019      	strb	r1, [r3, #0]
 8003626:	4608      	mov	r0, r1
 8003628:	f85d 4b04 	ldr.w	r4, [sp], #4
 800362c:	4770      	bx	lr

0800362e <__sfputs_r>:
 800362e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003630:	4606      	mov	r6, r0
 8003632:	460f      	mov	r7, r1
 8003634:	4614      	mov	r4, r2
 8003636:	18d5      	adds	r5, r2, r3
 8003638:	42ac      	cmp	r4, r5
 800363a:	d101      	bne.n	8003640 <__sfputs_r+0x12>
 800363c:	2000      	movs	r0, #0
 800363e:	e007      	b.n	8003650 <__sfputs_r+0x22>
 8003640:	463a      	mov	r2, r7
 8003642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003646:	4630      	mov	r0, r6
 8003648:	f7ff ffda 	bl	8003600 <__sfputc_r>
 800364c:	1c43      	adds	r3, r0, #1
 800364e:	d1f3      	bne.n	8003638 <__sfputs_r+0xa>
 8003650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003654 <_vfiprintf_r>:
 8003654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003658:	460c      	mov	r4, r1
 800365a:	b09d      	sub	sp, #116	; 0x74
 800365c:	4617      	mov	r7, r2
 800365e:	461d      	mov	r5, r3
 8003660:	4606      	mov	r6, r0
 8003662:	b118      	cbz	r0, 800366c <_vfiprintf_r+0x18>
 8003664:	6983      	ldr	r3, [r0, #24]
 8003666:	b90b      	cbnz	r3, 800366c <_vfiprintf_r+0x18>
 8003668:	f7ff fee6 	bl	8003438 <__sinit>
 800366c:	4b7c      	ldr	r3, [pc, #496]	; (8003860 <_vfiprintf_r+0x20c>)
 800366e:	429c      	cmp	r4, r3
 8003670:	d158      	bne.n	8003724 <_vfiprintf_r+0xd0>
 8003672:	6874      	ldr	r4, [r6, #4]
 8003674:	89a3      	ldrh	r3, [r4, #12]
 8003676:	0718      	lsls	r0, r3, #28
 8003678:	d55e      	bpl.n	8003738 <_vfiprintf_r+0xe4>
 800367a:	6923      	ldr	r3, [r4, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d05b      	beq.n	8003738 <_vfiprintf_r+0xe4>
 8003680:	2300      	movs	r3, #0
 8003682:	9309      	str	r3, [sp, #36]	; 0x24
 8003684:	2320      	movs	r3, #32
 8003686:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800368a:	2330      	movs	r3, #48	; 0x30
 800368c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003690:	9503      	str	r5, [sp, #12]
 8003692:	f04f 0b01 	mov.w	fp, #1
 8003696:	46b8      	mov	r8, r7
 8003698:	4645      	mov	r5, r8
 800369a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800369e:	b10b      	cbz	r3, 80036a4 <_vfiprintf_r+0x50>
 80036a0:	2b25      	cmp	r3, #37	; 0x25
 80036a2:	d154      	bne.n	800374e <_vfiprintf_r+0xfa>
 80036a4:	ebb8 0a07 	subs.w	sl, r8, r7
 80036a8:	d00b      	beq.n	80036c2 <_vfiprintf_r+0x6e>
 80036aa:	4653      	mov	r3, sl
 80036ac:	463a      	mov	r2, r7
 80036ae:	4621      	mov	r1, r4
 80036b0:	4630      	mov	r0, r6
 80036b2:	f7ff ffbc 	bl	800362e <__sfputs_r>
 80036b6:	3001      	adds	r0, #1
 80036b8:	f000 80c2 	beq.w	8003840 <_vfiprintf_r+0x1ec>
 80036bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036be:	4453      	add	r3, sl
 80036c0:	9309      	str	r3, [sp, #36]	; 0x24
 80036c2:	f898 3000 	ldrb.w	r3, [r8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 80ba 	beq.w	8003840 <_vfiprintf_r+0x1ec>
 80036cc:	2300      	movs	r3, #0
 80036ce:	f04f 32ff 	mov.w	r2, #4294967295
 80036d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036d6:	9304      	str	r3, [sp, #16]
 80036d8:	9307      	str	r3, [sp, #28]
 80036da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036de:	931a      	str	r3, [sp, #104]	; 0x68
 80036e0:	46a8      	mov	r8, r5
 80036e2:	2205      	movs	r2, #5
 80036e4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80036e8:	485e      	ldr	r0, [pc, #376]	; (8003864 <_vfiprintf_r+0x210>)
 80036ea:	f7fc fd79 	bl	80001e0 <memchr>
 80036ee:	9b04      	ldr	r3, [sp, #16]
 80036f0:	bb78      	cbnz	r0, 8003752 <_vfiprintf_r+0xfe>
 80036f2:	06d9      	lsls	r1, r3, #27
 80036f4:	bf44      	itt	mi
 80036f6:	2220      	movmi	r2, #32
 80036f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036fc:	071a      	lsls	r2, r3, #28
 80036fe:	bf44      	itt	mi
 8003700:	222b      	movmi	r2, #43	; 0x2b
 8003702:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003706:	782a      	ldrb	r2, [r5, #0]
 8003708:	2a2a      	cmp	r2, #42	; 0x2a
 800370a:	d02a      	beq.n	8003762 <_vfiprintf_r+0x10e>
 800370c:	9a07      	ldr	r2, [sp, #28]
 800370e:	46a8      	mov	r8, r5
 8003710:	2000      	movs	r0, #0
 8003712:	250a      	movs	r5, #10
 8003714:	4641      	mov	r1, r8
 8003716:	f811 3b01 	ldrb.w	r3, [r1], #1
 800371a:	3b30      	subs	r3, #48	; 0x30
 800371c:	2b09      	cmp	r3, #9
 800371e:	d969      	bls.n	80037f4 <_vfiprintf_r+0x1a0>
 8003720:	b360      	cbz	r0, 800377c <_vfiprintf_r+0x128>
 8003722:	e024      	b.n	800376e <_vfiprintf_r+0x11a>
 8003724:	4b50      	ldr	r3, [pc, #320]	; (8003868 <_vfiprintf_r+0x214>)
 8003726:	429c      	cmp	r4, r3
 8003728:	d101      	bne.n	800372e <_vfiprintf_r+0xda>
 800372a:	68b4      	ldr	r4, [r6, #8]
 800372c:	e7a2      	b.n	8003674 <_vfiprintf_r+0x20>
 800372e:	4b4f      	ldr	r3, [pc, #316]	; (800386c <_vfiprintf_r+0x218>)
 8003730:	429c      	cmp	r4, r3
 8003732:	bf08      	it	eq
 8003734:	68f4      	ldreq	r4, [r6, #12]
 8003736:	e79d      	b.n	8003674 <_vfiprintf_r+0x20>
 8003738:	4621      	mov	r1, r4
 800373a:	4630      	mov	r0, r6
 800373c:	f000 fae0 	bl	8003d00 <__swsetup_r>
 8003740:	2800      	cmp	r0, #0
 8003742:	d09d      	beq.n	8003680 <_vfiprintf_r+0x2c>
 8003744:	f04f 30ff 	mov.w	r0, #4294967295
 8003748:	b01d      	add	sp, #116	; 0x74
 800374a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800374e:	46a8      	mov	r8, r5
 8003750:	e7a2      	b.n	8003698 <_vfiprintf_r+0x44>
 8003752:	4a44      	ldr	r2, [pc, #272]	; (8003864 <_vfiprintf_r+0x210>)
 8003754:	1a80      	subs	r0, r0, r2
 8003756:	fa0b f000 	lsl.w	r0, fp, r0
 800375a:	4318      	orrs	r0, r3
 800375c:	9004      	str	r0, [sp, #16]
 800375e:	4645      	mov	r5, r8
 8003760:	e7be      	b.n	80036e0 <_vfiprintf_r+0x8c>
 8003762:	9a03      	ldr	r2, [sp, #12]
 8003764:	1d11      	adds	r1, r2, #4
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	9103      	str	r1, [sp, #12]
 800376a:	2a00      	cmp	r2, #0
 800376c:	db01      	blt.n	8003772 <_vfiprintf_r+0x11e>
 800376e:	9207      	str	r2, [sp, #28]
 8003770:	e004      	b.n	800377c <_vfiprintf_r+0x128>
 8003772:	4252      	negs	r2, r2
 8003774:	f043 0302 	orr.w	r3, r3, #2
 8003778:	9207      	str	r2, [sp, #28]
 800377a:	9304      	str	r3, [sp, #16]
 800377c:	f898 3000 	ldrb.w	r3, [r8]
 8003780:	2b2e      	cmp	r3, #46	; 0x2e
 8003782:	d10e      	bne.n	80037a2 <_vfiprintf_r+0x14e>
 8003784:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003788:	2b2a      	cmp	r3, #42	; 0x2a
 800378a:	d138      	bne.n	80037fe <_vfiprintf_r+0x1aa>
 800378c:	9b03      	ldr	r3, [sp, #12]
 800378e:	1d1a      	adds	r2, r3, #4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	9203      	str	r2, [sp, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	bfb8      	it	lt
 8003798:	f04f 33ff 	movlt.w	r3, #4294967295
 800379c:	f108 0802 	add.w	r8, r8, #2
 80037a0:	9305      	str	r3, [sp, #20]
 80037a2:	4d33      	ldr	r5, [pc, #204]	; (8003870 <_vfiprintf_r+0x21c>)
 80037a4:	f898 1000 	ldrb.w	r1, [r8]
 80037a8:	2203      	movs	r2, #3
 80037aa:	4628      	mov	r0, r5
 80037ac:	f7fc fd18 	bl	80001e0 <memchr>
 80037b0:	b140      	cbz	r0, 80037c4 <_vfiprintf_r+0x170>
 80037b2:	2340      	movs	r3, #64	; 0x40
 80037b4:	1b40      	subs	r0, r0, r5
 80037b6:	fa03 f000 	lsl.w	r0, r3, r0
 80037ba:	9b04      	ldr	r3, [sp, #16]
 80037bc:	4303      	orrs	r3, r0
 80037be:	f108 0801 	add.w	r8, r8, #1
 80037c2:	9304      	str	r3, [sp, #16]
 80037c4:	f898 1000 	ldrb.w	r1, [r8]
 80037c8:	482a      	ldr	r0, [pc, #168]	; (8003874 <_vfiprintf_r+0x220>)
 80037ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037ce:	2206      	movs	r2, #6
 80037d0:	f108 0701 	add.w	r7, r8, #1
 80037d4:	f7fc fd04 	bl	80001e0 <memchr>
 80037d8:	2800      	cmp	r0, #0
 80037da:	d037      	beq.n	800384c <_vfiprintf_r+0x1f8>
 80037dc:	4b26      	ldr	r3, [pc, #152]	; (8003878 <_vfiprintf_r+0x224>)
 80037de:	bb1b      	cbnz	r3, 8003828 <_vfiprintf_r+0x1d4>
 80037e0:	9b03      	ldr	r3, [sp, #12]
 80037e2:	3307      	adds	r3, #7
 80037e4:	f023 0307 	bic.w	r3, r3, #7
 80037e8:	3308      	adds	r3, #8
 80037ea:	9303      	str	r3, [sp, #12]
 80037ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037ee:	444b      	add	r3, r9
 80037f0:	9309      	str	r3, [sp, #36]	; 0x24
 80037f2:	e750      	b.n	8003696 <_vfiprintf_r+0x42>
 80037f4:	fb05 3202 	mla	r2, r5, r2, r3
 80037f8:	2001      	movs	r0, #1
 80037fa:	4688      	mov	r8, r1
 80037fc:	e78a      	b.n	8003714 <_vfiprintf_r+0xc0>
 80037fe:	2300      	movs	r3, #0
 8003800:	f108 0801 	add.w	r8, r8, #1
 8003804:	9305      	str	r3, [sp, #20]
 8003806:	4619      	mov	r1, r3
 8003808:	250a      	movs	r5, #10
 800380a:	4640      	mov	r0, r8
 800380c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003810:	3a30      	subs	r2, #48	; 0x30
 8003812:	2a09      	cmp	r2, #9
 8003814:	d903      	bls.n	800381e <_vfiprintf_r+0x1ca>
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0c3      	beq.n	80037a2 <_vfiprintf_r+0x14e>
 800381a:	9105      	str	r1, [sp, #20]
 800381c:	e7c1      	b.n	80037a2 <_vfiprintf_r+0x14e>
 800381e:	fb05 2101 	mla	r1, r5, r1, r2
 8003822:	2301      	movs	r3, #1
 8003824:	4680      	mov	r8, r0
 8003826:	e7f0      	b.n	800380a <_vfiprintf_r+0x1b6>
 8003828:	ab03      	add	r3, sp, #12
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	4622      	mov	r2, r4
 800382e:	4b13      	ldr	r3, [pc, #76]	; (800387c <_vfiprintf_r+0x228>)
 8003830:	a904      	add	r1, sp, #16
 8003832:	4630      	mov	r0, r6
 8003834:	f3af 8000 	nop.w
 8003838:	f1b0 3fff 	cmp.w	r0, #4294967295
 800383c:	4681      	mov	r9, r0
 800383e:	d1d5      	bne.n	80037ec <_vfiprintf_r+0x198>
 8003840:	89a3      	ldrh	r3, [r4, #12]
 8003842:	065b      	lsls	r3, r3, #25
 8003844:	f53f af7e 	bmi.w	8003744 <_vfiprintf_r+0xf0>
 8003848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800384a:	e77d      	b.n	8003748 <_vfiprintf_r+0xf4>
 800384c:	ab03      	add	r3, sp, #12
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	4622      	mov	r2, r4
 8003852:	4b0a      	ldr	r3, [pc, #40]	; (800387c <_vfiprintf_r+0x228>)
 8003854:	a904      	add	r1, sp, #16
 8003856:	4630      	mov	r0, r6
 8003858:	f000 f888 	bl	800396c <_printf_i>
 800385c:	e7ec      	b.n	8003838 <_vfiprintf_r+0x1e4>
 800385e:	bf00      	nop
 8003860:	080041c0 	.word	0x080041c0
 8003864:	08004200 	.word	0x08004200
 8003868:	080041e0 	.word	0x080041e0
 800386c:	080041a0 	.word	0x080041a0
 8003870:	08004206 	.word	0x08004206
 8003874:	0800420a 	.word	0x0800420a
 8003878:	00000000 	.word	0x00000000
 800387c:	0800362f 	.word	0x0800362f

08003880 <_printf_common>:
 8003880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003884:	4691      	mov	r9, r2
 8003886:	461f      	mov	r7, r3
 8003888:	688a      	ldr	r2, [r1, #8]
 800388a:	690b      	ldr	r3, [r1, #16]
 800388c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003890:	4293      	cmp	r3, r2
 8003892:	bfb8      	it	lt
 8003894:	4613      	movlt	r3, r2
 8003896:	f8c9 3000 	str.w	r3, [r9]
 800389a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800389e:	4606      	mov	r6, r0
 80038a0:	460c      	mov	r4, r1
 80038a2:	b112      	cbz	r2, 80038aa <_printf_common+0x2a>
 80038a4:	3301      	adds	r3, #1
 80038a6:	f8c9 3000 	str.w	r3, [r9]
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	0699      	lsls	r1, r3, #26
 80038ae:	bf42      	ittt	mi
 80038b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80038b4:	3302      	addmi	r3, #2
 80038b6:	f8c9 3000 	strmi.w	r3, [r9]
 80038ba:	6825      	ldr	r5, [r4, #0]
 80038bc:	f015 0506 	ands.w	r5, r5, #6
 80038c0:	d107      	bne.n	80038d2 <_printf_common+0x52>
 80038c2:	f104 0a19 	add.w	sl, r4, #25
 80038c6:	68e3      	ldr	r3, [r4, #12]
 80038c8:	f8d9 2000 	ldr.w	r2, [r9]
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	42ab      	cmp	r3, r5
 80038d0:	dc28      	bgt.n	8003924 <_printf_common+0xa4>
 80038d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80038d6:	6822      	ldr	r2, [r4, #0]
 80038d8:	3300      	adds	r3, #0
 80038da:	bf18      	it	ne
 80038dc:	2301      	movne	r3, #1
 80038de:	0692      	lsls	r2, r2, #26
 80038e0:	d42d      	bmi.n	800393e <_printf_common+0xbe>
 80038e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038e6:	4639      	mov	r1, r7
 80038e8:	4630      	mov	r0, r6
 80038ea:	47c0      	blx	r8
 80038ec:	3001      	adds	r0, #1
 80038ee:	d020      	beq.n	8003932 <_printf_common+0xb2>
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	68e5      	ldr	r5, [r4, #12]
 80038f4:	f8d9 2000 	ldr.w	r2, [r9]
 80038f8:	f003 0306 	and.w	r3, r3, #6
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	bf08      	it	eq
 8003900:	1aad      	subeq	r5, r5, r2
 8003902:	68a3      	ldr	r3, [r4, #8]
 8003904:	6922      	ldr	r2, [r4, #16]
 8003906:	bf0c      	ite	eq
 8003908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800390c:	2500      	movne	r5, #0
 800390e:	4293      	cmp	r3, r2
 8003910:	bfc4      	itt	gt
 8003912:	1a9b      	subgt	r3, r3, r2
 8003914:	18ed      	addgt	r5, r5, r3
 8003916:	f04f 0900 	mov.w	r9, #0
 800391a:	341a      	adds	r4, #26
 800391c:	454d      	cmp	r5, r9
 800391e:	d11a      	bne.n	8003956 <_printf_common+0xd6>
 8003920:	2000      	movs	r0, #0
 8003922:	e008      	b.n	8003936 <_printf_common+0xb6>
 8003924:	2301      	movs	r3, #1
 8003926:	4652      	mov	r2, sl
 8003928:	4639      	mov	r1, r7
 800392a:	4630      	mov	r0, r6
 800392c:	47c0      	blx	r8
 800392e:	3001      	adds	r0, #1
 8003930:	d103      	bne.n	800393a <_printf_common+0xba>
 8003932:	f04f 30ff 	mov.w	r0, #4294967295
 8003936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800393a:	3501      	adds	r5, #1
 800393c:	e7c3      	b.n	80038c6 <_printf_common+0x46>
 800393e:	18e1      	adds	r1, r4, r3
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	2030      	movs	r0, #48	; 0x30
 8003944:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003948:	4422      	add	r2, r4
 800394a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800394e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003952:	3302      	adds	r3, #2
 8003954:	e7c5      	b.n	80038e2 <_printf_common+0x62>
 8003956:	2301      	movs	r3, #1
 8003958:	4622      	mov	r2, r4
 800395a:	4639      	mov	r1, r7
 800395c:	4630      	mov	r0, r6
 800395e:	47c0      	blx	r8
 8003960:	3001      	adds	r0, #1
 8003962:	d0e6      	beq.n	8003932 <_printf_common+0xb2>
 8003964:	f109 0901 	add.w	r9, r9, #1
 8003968:	e7d8      	b.n	800391c <_printf_common+0x9c>
	...

0800396c <_printf_i>:
 800396c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003970:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003974:	460c      	mov	r4, r1
 8003976:	7e09      	ldrb	r1, [r1, #24]
 8003978:	b085      	sub	sp, #20
 800397a:	296e      	cmp	r1, #110	; 0x6e
 800397c:	4617      	mov	r7, r2
 800397e:	4606      	mov	r6, r0
 8003980:	4698      	mov	r8, r3
 8003982:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003984:	f000 80b3 	beq.w	8003aee <_printf_i+0x182>
 8003988:	d822      	bhi.n	80039d0 <_printf_i+0x64>
 800398a:	2963      	cmp	r1, #99	; 0x63
 800398c:	d036      	beq.n	80039fc <_printf_i+0x90>
 800398e:	d80a      	bhi.n	80039a6 <_printf_i+0x3a>
 8003990:	2900      	cmp	r1, #0
 8003992:	f000 80b9 	beq.w	8003b08 <_printf_i+0x19c>
 8003996:	2958      	cmp	r1, #88	; 0x58
 8003998:	f000 8083 	beq.w	8003aa2 <_printf_i+0x136>
 800399c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80039a4:	e032      	b.n	8003a0c <_printf_i+0xa0>
 80039a6:	2964      	cmp	r1, #100	; 0x64
 80039a8:	d001      	beq.n	80039ae <_printf_i+0x42>
 80039aa:	2969      	cmp	r1, #105	; 0x69
 80039ac:	d1f6      	bne.n	800399c <_printf_i+0x30>
 80039ae:	6820      	ldr	r0, [r4, #0]
 80039b0:	6813      	ldr	r3, [r2, #0]
 80039b2:	0605      	lsls	r5, r0, #24
 80039b4:	f103 0104 	add.w	r1, r3, #4
 80039b8:	d52a      	bpl.n	8003a10 <_printf_i+0xa4>
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6011      	str	r1, [r2, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	da03      	bge.n	80039ca <_printf_i+0x5e>
 80039c2:	222d      	movs	r2, #45	; 0x2d
 80039c4:	425b      	negs	r3, r3
 80039c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80039ca:	486f      	ldr	r0, [pc, #444]	; (8003b88 <_printf_i+0x21c>)
 80039cc:	220a      	movs	r2, #10
 80039ce:	e039      	b.n	8003a44 <_printf_i+0xd8>
 80039d0:	2973      	cmp	r1, #115	; 0x73
 80039d2:	f000 809d 	beq.w	8003b10 <_printf_i+0x1a4>
 80039d6:	d808      	bhi.n	80039ea <_printf_i+0x7e>
 80039d8:	296f      	cmp	r1, #111	; 0x6f
 80039da:	d020      	beq.n	8003a1e <_printf_i+0xb2>
 80039dc:	2970      	cmp	r1, #112	; 0x70
 80039de:	d1dd      	bne.n	800399c <_printf_i+0x30>
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	f043 0320 	orr.w	r3, r3, #32
 80039e6:	6023      	str	r3, [r4, #0]
 80039e8:	e003      	b.n	80039f2 <_printf_i+0x86>
 80039ea:	2975      	cmp	r1, #117	; 0x75
 80039ec:	d017      	beq.n	8003a1e <_printf_i+0xb2>
 80039ee:	2978      	cmp	r1, #120	; 0x78
 80039f0:	d1d4      	bne.n	800399c <_printf_i+0x30>
 80039f2:	2378      	movs	r3, #120	; 0x78
 80039f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039f8:	4864      	ldr	r0, [pc, #400]	; (8003b8c <_printf_i+0x220>)
 80039fa:	e055      	b.n	8003aa8 <_printf_i+0x13c>
 80039fc:	6813      	ldr	r3, [r2, #0]
 80039fe:	1d19      	adds	r1, r3, #4
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6011      	str	r1, [r2, #0]
 8003a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e08c      	b.n	8003b2a <_printf_i+0x1be>
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6011      	str	r1, [r2, #0]
 8003a14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a18:	bf18      	it	ne
 8003a1a:	b21b      	sxthne	r3, r3
 8003a1c:	e7cf      	b.n	80039be <_printf_i+0x52>
 8003a1e:	6813      	ldr	r3, [r2, #0]
 8003a20:	6825      	ldr	r5, [r4, #0]
 8003a22:	1d18      	adds	r0, r3, #4
 8003a24:	6010      	str	r0, [r2, #0]
 8003a26:	0628      	lsls	r0, r5, #24
 8003a28:	d501      	bpl.n	8003a2e <_printf_i+0xc2>
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	e002      	b.n	8003a34 <_printf_i+0xc8>
 8003a2e:	0668      	lsls	r0, r5, #25
 8003a30:	d5fb      	bpl.n	8003a2a <_printf_i+0xbe>
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	4854      	ldr	r0, [pc, #336]	; (8003b88 <_printf_i+0x21c>)
 8003a36:	296f      	cmp	r1, #111	; 0x6f
 8003a38:	bf14      	ite	ne
 8003a3a:	220a      	movne	r2, #10
 8003a3c:	2208      	moveq	r2, #8
 8003a3e:	2100      	movs	r1, #0
 8003a40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a44:	6865      	ldr	r5, [r4, #4]
 8003a46:	60a5      	str	r5, [r4, #8]
 8003a48:	2d00      	cmp	r5, #0
 8003a4a:	f2c0 8095 	blt.w	8003b78 <_printf_i+0x20c>
 8003a4e:	6821      	ldr	r1, [r4, #0]
 8003a50:	f021 0104 	bic.w	r1, r1, #4
 8003a54:	6021      	str	r1, [r4, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d13d      	bne.n	8003ad6 <_printf_i+0x16a>
 8003a5a:	2d00      	cmp	r5, #0
 8003a5c:	f040 808e 	bne.w	8003b7c <_printf_i+0x210>
 8003a60:	4665      	mov	r5, ip
 8003a62:	2a08      	cmp	r2, #8
 8003a64:	d10b      	bne.n	8003a7e <_printf_i+0x112>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	07db      	lsls	r3, r3, #31
 8003a6a:	d508      	bpl.n	8003a7e <_printf_i+0x112>
 8003a6c:	6923      	ldr	r3, [r4, #16]
 8003a6e:	6862      	ldr	r2, [r4, #4]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	bfde      	ittt	le
 8003a74:	2330      	movle	r3, #48	; 0x30
 8003a76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a7e:	ebac 0305 	sub.w	r3, ip, r5
 8003a82:	6123      	str	r3, [r4, #16]
 8003a84:	f8cd 8000 	str.w	r8, [sp]
 8003a88:	463b      	mov	r3, r7
 8003a8a:	aa03      	add	r2, sp, #12
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	4630      	mov	r0, r6
 8003a90:	f7ff fef6 	bl	8003880 <_printf_common>
 8003a94:	3001      	adds	r0, #1
 8003a96:	d14d      	bne.n	8003b34 <_printf_i+0x1c8>
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9c:	b005      	add	sp, #20
 8003a9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003aa2:	4839      	ldr	r0, [pc, #228]	; (8003b88 <_printf_i+0x21c>)
 8003aa4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003aa8:	6813      	ldr	r3, [r2, #0]
 8003aaa:	6821      	ldr	r1, [r4, #0]
 8003aac:	1d1d      	adds	r5, r3, #4
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6015      	str	r5, [r2, #0]
 8003ab2:	060a      	lsls	r2, r1, #24
 8003ab4:	d50b      	bpl.n	8003ace <_printf_i+0x162>
 8003ab6:	07ca      	lsls	r2, r1, #31
 8003ab8:	bf44      	itt	mi
 8003aba:	f041 0120 	orrmi.w	r1, r1, #32
 8003abe:	6021      	strmi	r1, [r4, #0]
 8003ac0:	b91b      	cbnz	r3, 8003aca <_printf_i+0x15e>
 8003ac2:	6822      	ldr	r2, [r4, #0]
 8003ac4:	f022 0220 	bic.w	r2, r2, #32
 8003ac8:	6022      	str	r2, [r4, #0]
 8003aca:	2210      	movs	r2, #16
 8003acc:	e7b7      	b.n	8003a3e <_printf_i+0xd2>
 8003ace:	064d      	lsls	r5, r1, #25
 8003ad0:	bf48      	it	mi
 8003ad2:	b29b      	uxthmi	r3, r3
 8003ad4:	e7ef      	b.n	8003ab6 <_printf_i+0x14a>
 8003ad6:	4665      	mov	r5, ip
 8003ad8:	fbb3 f1f2 	udiv	r1, r3, r2
 8003adc:	fb02 3311 	mls	r3, r2, r1, r3
 8003ae0:	5cc3      	ldrb	r3, [r0, r3]
 8003ae2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	2900      	cmp	r1, #0
 8003aea:	d1f5      	bne.n	8003ad8 <_printf_i+0x16c>
 8003aec:	e7b9      	b.n	8003a62 <_printf_i+0xf6>
 8003aee:	6813      	ldr	r3, [r2, #0]
 8003af0:	6825      	ldr	r5, [r4, #0]
 8003af2:	6961      	ldr	r1, [r4, #20]
 8003af4:	1d18      	adds	r0, r3, #4
 8003af6:	6010      	str	r0, [r2, #0]
 8003af8:	0628      	lsls	r0, r5, #24
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	d501      	bpl.n	8003b02 <_printf_i+0x196>
 8003afe:	6019      	str	r1, [r3, #0]
 8003b00:	e002      	b.n	8003b08 <_printf_i+0x19c>
 8003b02:	066a      	lsls	r2, r5, #25
 8003b04:	d5fb      	bpl.n	8003afe <_printf_i+0x192>
 8003b06:	8019      	strh	r1, [r3, #0]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	6123      	str	r3, [r4, #16]
 8003b0c:	4665      	mov	r5, ip
 8003b0e:	e7b9      	b.n	8003a84 <_printf_i+0x118>
 8003b10:	6813      	ldr	r3, [r2, #0]
 8003b12:	1d19      	adds	r1, r3, #4
 8003b14:	6011      	str	r1, [r2, #0]
 8003b16:	681d      	ldr	r5, [r3, #0]
 8003b18:	6862      	ldr	r2, [r4, #4]
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	f7fc fb5f 	bl	80001e0 <memchr>
 8003b22:	b108      	cbz	r0, 8003b28 <_printf_i+0x1bc>
 8003b24:	1b40      	subs	r0, r0, r5
 8003b26:	6060      	str	r0, [r4, #4]
 8003b28:	6863      	ldr	r3, [r4, #4]
 8003b2a:	6123      	str	r3, [r4, #16]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b32:	e7a7      	b.n	8003a84 <_printf_i+0x118>
 8003b34:	6923      	ldr	r3, [r4, #16]
 8003b36:	462a      	mov	r2, r5
 8003b38:	4639      	mov	r1, r7
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	47c0      	blx	r8
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d0aa      	beq.n	8003a98 <_printf_i+0x12c>
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	079b      	lsls	r3, r3, #30
 8003b46:	d413      	bmi.n	8003b70 <_printf_i+0x204>
 8003b48:	68e0      	ldr	r0, [r4, #12]
 8003b4a:	9b03      	ldr	r3, [sp, #12]
 8003b4c:	4298      	cmp	r0, r3
 8003b4e:	bfb8      	it	lt
 8003b50:	4618      	movlt	r0, r3
 8003b52:	e7a3      	b.n	8003a9c <_printf_i+0x130>
 8003b54:	2301      	movs	r3, #1
 8003b56:	464a      	mov	r2, r9
 8003b58:	4639      	mov	r1, r7
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	47c0      	blx	r8
 8003b5e:	3001      	adds	r0, #1
 8003b60:	d09a      	beq.n	8003a98 <_printf_i+0x12c>
 8003b62:	3501      	adds	r5, #1
 8003b64:	68e3      	ldr	r3, [r4, #12]
 8003b66:	9a03      	ldr	r2, [sp, #12]
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	42ab      	cmp	r3, r5
 8003b6c:	dcf2      	bgt.n	8003b54 <_printf_i+0x1e8>
 8003b6e:	e7eb      	b.n	8003b48 <_printf_i+0x1dc>
 8003b70:	2500      	movs	r5, #0
 8003b72:	f104 0919 	add.w	r9, r4, #25
 8003b76:	e7f5      	b.n	8003b64 <_printf_i+0x1f8>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1ac      	bne.n	8003ad6 <_printf_i+0x16a>
 8003b7c:	7803      	ldrb	r3, [r0, #0]
 8003b7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b86:	e76c      	b.n	8003a62 <_printf_i+0xf6>
 8003b88:	08004211 	.word	0x08004211
 8003b8c:	08004222 	.word	0x08004222

08003b90 <_sbrk_r>:
 8003b90:	b538      	push	{r3, r4, r5, lr}
 8003b92:	4c06      	ldr	r4, [pc, #24]	; (8003bac <_sbrk_r+0x1c>)
 8003b94:	2300      	movs	r3, #0
 8003b96:	4605      	mov	r5, r0
 8003b98:	4608      	mov	r0, r1
 8003b9a:	6023      	str	r3, [r4, #0]
 8003b9c:	f7fd f8a4 	bl	8000ce8 <_sbrk>
 8003ba0:	1c43      	adds	r3, r0, #1
 8003ba2:	d102      	bne.n	8003baa <_sbrk_r+0x1a>
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	b103      	cbz	r3, 8003baa <_sbrk_r+0x1a>
 8003ba8:	602b      	str	r3, [r5, #0]
 8003baa:	bd38      	pop	{r3, r4, r5, pc}
 8003bac:	20000194 	.word	0x20000194

08003bb0 <__sread>:
 8003bb0:	b510      	push	{r4, lr}
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb8:	f000 fa96 	bl	80040e8 <_read_r>
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	bfab      	itete	ge
 8003bc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8003bc4:	181b      	addge	r3, r3, r0
 8003bc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bca:	bfac      	ite	ge
 8003bcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8003bce:	81a3      	strhlt	r3, [r4, #12]
 8003bd0:	bd10      	pop	{r4, pc}

08003bd2 <__swrite>:
 8003bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd6:	461f      	mov	r7, r3
 8003bd8:	898b      	ldrh	r3, [r1, #12]
 8003bda:	05db      	lsls	r3, r3, #23
 8003bdc:	4605      	mov	r5, r0
 8003bde:	460c      	mov	r4, r1
 8003be0:	4616      	mov	r6, r2
 8003be2:	d505      	bpl.n	8003bf0 <__swrite+0x1e>
 8003be4:	2302      	movs	r3, #2
 8003be6:	2200      	movs	r2, #0
 8003be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bec:	f000 f9b6 	bl	8003f5c <_lseek_r>
 8003bf0:	89a3      	ldrh	r3, [r4, #12]
 8003bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bfa:	81a3      	strh	r3, [r4, #12]
 8003bfc:	4632      	mov	r2, r6
 8003bfe:	463b      	mov	r3, r7
 8003c00:	4628      	mov	r0, r5
 8003c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c06:	f000 b869 	b.w	8003cdc <_write_r>

08003c0a <__sseek>:
 8003c0a:	b510      	push	{r4, lr}
 8003c0c:	460c      	mov	r4, r1
 8003c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c12:	f000 f9a3 	bl	8003f5c <_lseek_r>
 8003c16:	1c43      	adds	r3, r0, #1
 8003c18:	89a3      	ldrh	r3, [r4, #12]
 8003c1a:	bf15      	itete	ne
 8003c1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c26:	81a3      	strheq	r3, [r4, #12]
 8003c28:	bf18      	it	ne
 8003c2a:	81a3      	strhne	r3, [r4, #12]
 8003c2c:	bd10      	pop	{r4, pc}

08003c2e <__sclose>:
 8003c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c32:	f000 b8d3 	b.w	8003ddc <_close_r>
	...

08003c38 <__swbuf_r>:
 8003c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3a:	460e      	mov	r6, r1
 8003c3c:	4614      	mov	r4, r2
 8003c3e:	4605      	mov	r5, r0
 8003c40:	b118      	cbz	r0, 8003c4a <__swbuf_r+0x12>
 8003c42:	6983      	ldr	r3, [r0, #24]
 8003c44:	b90b      	cbnz	r3, 8003c4a <__swbuf_r+0x12>
 8003c46:	f7ff fbf7 	bl	8003438 <__sinit>
 8003c4a:	4b21      	ldr	r3, [pc, #132]	; (8003cd0 <__swbuf_r+0x98>)
 8003c4c:	429c      	cmp	r4, r3
 8003c4e:	d12a      	bne.n	8003ca6 <__swbuf_r+0x6e>
 8003c50:	686c      	ldr	r4, [r5, #4]
 8003c52:	69a3      	ldr	r3, [r4, #24]
 8003c54:	60a3      	str	r3, [r4, #8]
 8003c56:	89a3      	ldrh	r3, [r4, #12]
 8003c58:	071a      	lsls	r2, r3, #28
 8003c5a:	d52e      	bpl.n	8003cba <__swbuf_r+0x82>
 8003c5c:	6923      	ldr	r3, [r4, #16]
 8003c5e:	b363      	cbz	r3, 8003cba <__swbuf_r+0x82>
 8003c60:	6923      	ldr	r3, [r4, #16]
 8003c62:	6820      	ldr	r0, [r4, #0]
 8003c64:	1ac0      	subs	r0, r0, r3
 8003c66:	6963      	ldr	r3, [r4, #20]
 8003c68:	b2f6      	uxtb	r6, r6
 8003c6a:	4283      	cmp	r3, r0
 8003c6c:	4637      	mov	r7, r6
 8003c6e:	dc04      	bgt.n	8003c7a <__swbuf_r+0x42>
 8003c70:	4621      	mov	r1, r4
 8003c72:	4628      	mov	r0, r5
 8003c74:	f000 f948 	bl	8003f08 <_fflush_r>
 8003c78:	bb28      	cbnz	r0, 8003cc6 <__swbuf_r+0x8e>
 8003c7a:	68a3      	ldr	r3, [r4, #8]
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	60a3      	str	r3, [r4, #8]
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	6022      	str	r2, [r4, #0]
 8003c86:	701e      	strb	r6, [r3, #0]
 8003c88:	6963      	ldr	r3, [r4, #20]
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	4283      	cmp	r3, r0
 8003c8e:	d004      	beq.n	8003c9a <__swbuf_r+0x62>
 8003c90:	89a3      	ldrh	r3, [r4, #12]
 8003c92:	07db      	lsls	r3, r3, #31
 8003c94:	d519      	bpl.n	8003cca <__swbuf_r+0x92>
 8003c96:	2e0a      	cmp	r6, #10
 8003c98:	d117      	bne.n	8003cca <__swbuf_r+0x92>
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	f000 f933 	bl	8003f08 <_fflush_r>
 8003ca2:	b190      	cbz	r0, 8003cca <__swbuf_r+0x92>
 8003ca4:	e00f      	b.n	8003cc6 <__swbuf_r+0x8e>
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <__swbuf_r+0x9c>)
 8003ca8:	429c      	cmp	r4, r3
 8003caa:	d101      	bne.n	8003cb0 <__swbuf_r+0x78>
 8003cac:	68ac      	ldr	r4, [r5, #8]
 8003cae:	e7d0      	b.n	8003c52 <__swbuf_r+0x1a>
 8003cb0:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <__swbuf_r+0xa0>)
 8003cb2:	429c      	cmp	r4, r3
 8003cb4:	bf08      	it	eq
 8003cb6:	68ec      	ldreq	r4, [r5, #12]
 8003cb8:	e7cb      	b.n	8003c52 <__swbuf_r+0x1a>
 8003cba:	4621      	mov	r1, r4
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	f000 f81f 	bl	8003d00 <__swsetup_r>
 8003cc2:	2800      	cmp	r0, #0
 8003cc4:	d0cc      	beq.n	8003c60 <__swbuf_r+0x28>
 8003cc6:	f04f 37ff 	mov.w	r7, #4294967295
 8003cca:	4638      	mov	r0, r7
 8003ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	080041c0 	.word	0x080041c0
 8003cd4:	080041e0 	.word	0x080041e0
 8003cd8:	080041a0 	.word	0x080041a0

08003cdc <_write_r>:
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	4c07      	ldr	r4, [pc, #28]	; (8003cfc <_write_r+0x20>)
 8003ce0:	4605      	mov	r5, r0
 8003ce2:	4608      	mov	r0, r1
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	6022      	str	r2, [r4, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	f7fc ffab 	bl	8000c46 <_write>
 8003cf0:	1c43      	adds	r3, r0, #1
 8003cf2:	d102      	bne.n	8003cfa <_write_r+0x1e>
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	b103      	cbz	r3, 8003cfa <_write_r+0x1e>
 8003cf8:	602b      	str	r3, [r5, #0]
 8003cfa:	bd38      	pop	{r3, r4, r5, pc}
 8003cfc:	20000194 	.word	0x20000194

08003d00 <__swsetup_r>:
 8003d00:	4b32      	ldr	r3, [pc, #200]	; (8003dcc <__swsetup_r+0xcc>)
 8003d02:	b570      	push	{r4, r5, r6, lr}
 8003d04:	681d      	ldr	r5, [r3, #0]
 8003d06:	4606      	mov	r6, r0
 8003d08:	460c      	mov	r4, r1
 8003d0a:	b125      	cbz	r5, 8003d16 <__swsetup_r+0x16>
 8003d0c:	69ab      	ldr	r3, [r5, #24]
 8003d0e:	b913      	cbnz	r3, 8003d16 <__swsetup_r+0x16>
 8003d10:	4628      	mov	r0, r5
 8003d12:	f7ff fb91 	bl	8003438 <__sinit>
 8003d16:	4b2e      	ldr	r3, [pc, #184]	; (8003dd0 <__swsetup_r+0xd0>)
 8003d18:	429c      	cmp	r4, r3
 8003d1a:	d10f      	bne.n	8003d3c <__swsetup_r+0x3c>
 8003d1c:	686c      	ldr	r4, [r5, #4]
 8003d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	0715      	lsls	r5, r2, #28
 8003d26:	d42c      	bmi.n	8003d82 <__swsetup_r+0x82>
 8003d28:	06d0      	lsls	r0, r2, #27
 8003d2a:	d411      	bmi.n	8003d50 <__swsetup_r+0x50>
 8003d2c:	2209      	movs	r2, #9
 8003d2e:	6032      	str	r2, [r6, #0]
 8003d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d34:	81a3      	strh	r3, [r4, #12]
 8003d36:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3a:	e03e      	b.n	8003dba <__swsetup_r+0xba>
 8003d3c:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <__swsetup_r+0xd4>)
 8003d3e:	429c      	cmp	r4, r3
 8003d40:	d101      	bne.n	8003d46 <__swsetup_r+0x46>
 8003d42:	68ac      	ldr	r4, [r5, #8]
 8003d44:	e7eb      	b.n	8003d1e <__swsetup_r+0x1e>
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <__swsetup_r+0xd8>)
 8003d48:	429c      	cmp	r4, r3
 8003d4a:	bf08      	it	eq
 8003d4c:	68ec      	ldreq	r4, [r5, #12]
 8003d4e:	e7e6      	b.n	8003d1e <__swsetup_r+0x1e>
 8003d50:	0751      	lsls	r1, r2, #29
 8003d52:	d512      	bpl.n	8003d7a <__swsetup_r+0x7a>
 8003d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d56:	b141      	cbz	r1, 8003d6a <__swsetup_r+0x6a>
 8003d58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d5c:	4299      	cmp	r1, r3
 8003d5e:	d002      	beq.n	8003d66 <__swsetup_r+0x66>
 8003d60:	4630      	mov	r0, r6
 8003d62:	f000 f973 	bl	800404c <_free_r>
 8003d66:	2300      	movs	r3, #0
 8003d68:	6363      	str	r3, [r4, #52]	; 0x34
 8003d6a:	89a3      	ldrh	r3, [r4, #12]
 8003d6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d70:	81a3      	strh	r3, [r4, #12]
 8003d72:	2300      	movs	r3, #0
 8003d74:	6063      	str	r3, [r4, #4]
 8003d76:	6923      	ldr	r3, [r4, #16]
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	89a3      	ldrh	r3, [r4, #12]
 8003d7c:	f043 0308 	orr.w	r3, r3, #8
 8003d80:	81a3      	strh	r3, [r4, #12]
 8003d82:	6923      	ldr	r3, [r4, #16]
 8003d84:	b94b      	cbnz	r3, 8003d9a <__swsetup_r+0x9a>
 8003d86:	89a3      	ldrh	r3, [r4, #12]
 8003d88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d90:	d003      	beq.n	8003d9a <__swsetup_r+0x9a>
 8003d92:	4621      	mov	r1, r4
 8003d94:	4630      	mov	r0, r6
 8003d96:	f000 f917 	bl	8003fc8 <__smakebuf_r>
 8003d9a:	89a2      	ldrh	r2, [r4, #12]
 8003d9c:	f012 0301 	ands.w	r3, r2, #1
 8003da0:	d00c      	beq.n	8003dbc <__swsetup_r+0xbc>
 8003da2:	2300      	movs	r3, #0
 8003da4:	60a3      	str	r3, [r4, #8]
 8003da6:	6963      	ldr	r3, [r4, #20]
 8003da8:	425b      	negs	r3, r3
 8003daa:	61a3      	str	r3, [r4, #24]
 8003dac:	6923      	ldr	r3, [r4, #16]
 8003dae:	b953      	cbnz	r3, 8003dc6 <__swsetup_r+0xc6>
 8003db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003db4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003db8:	d1ba      	bne.n	8003d30 <__swsetup_r+0x30>
 8003dba:	bd70      	pop	{r4, r5, r6, pc}
 8003dbc:	0792      	lsls	r2, r2, #30
 8003dbe:	bf58      	it	pl
 8003dc0:	6963      	ldrpl	r3, [r4, #20]
 8003dc2:	60a3      	str	r3, [r4, #8]
 8003dc4:	e7f2      	b.n	8003dac <__swsetup_r+0xac>
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	e7f7      	b.n	8003dba <__swsetup_r+0xba>
 8003dca:	bf00      	nop
 8003dcc:	2000000c 	.word	0x2000000c
 8003dd0:	080041c0 	.word	0x080041c0
 8003dd4:	080041e0 	.word	0x080041e0
 8003dd8:	080041a0 	.word	0x080041a0

08003ddc <_close_r>:
 8003ddc:	b538      	push	{r3, r4, r5, lr}
 8003dde:	4c06      	ldr	r4, [pc, #24]	; (8003df8 <_close_r+0x1c>)
 8003de0:	2300      	movs	r3, #0
 8003de2:	4605      	mov	r5, r0
 8003de4:	4608      	mov	r0, r1
 8003de6:	6023      	str	r3, [r4, #0]
 8003de8:	f7fc ff49 	bl	8000c7e <_close>
 8003dec:	1c43      	adds	r3, r0, #1
 8003dee:	d102      	bne.n	8003df6 <_close_r+0x1a>
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	b103      	cbz	r3, 8003df6 <_close_r+0x1a>
 8003df4:	602b      	str	r3, [r5, #0]
 8003df6:	bd38      	pop	{r3, r4, r5, pc}
 8003df8:	20000194 	.word	0x20000194

08003dfc <__sflush_r>:
 8003dfc:	898a      	ldrh	r2, [r1, #12]
 8003dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e02:	4605      	mov	r5, r0
 8003e04:	0710      	lsls	r0, r2, #28
 8003e06:	460c      	mov	r4, r1
 8003e08:	d458      	bmi.n	8003ebc <__sflush_r+0xc0>
 8003e0a:	684b      	ldr	r3, [r1, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	dc05      	bgt.n	8003e1c <__sflush_r+0x20>
 8003e10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	dc02      	bgt.n	8003e1c <__sflush_r+0x20>
 8003e16:	2000      	movs	r0, #0
 8003e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e1e:	2e00      	cmp	r6, #0
 8003e20:	d0f9      	beq.n	8003e16 <__sflush_r+0x1a>
 8003e22:	2300      	movs	r3, #0
 8003e24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e28:	682f      	ldr	r7, [r5, #0]
 8003e2a:	6a21      	ldr	r1, [r4, #32]
 8003e2c:	602b      	str	r3, [r5, #0]
 8003e2e:	d032      	beq.n	8003e96 <__sflush_r+0x9a>
 8003e30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	075a      	lsls	r2, r3, #29
 8003e36:	d505      	bpl.n	8003e44 <__sflush_r+0x48>
 8003e38:	6863      	ldr	r3, [r4, #4]
 8003e3a:	1ac0      	subs	r0, r0, r3
 8003e3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e3e:	b10b      	cbz	r3, 8003e44 <__sflush_r+0x48>
 8003e40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e42:	1ac0      	subs	r0, r0, r3
 8003e44:	2300      	movs	r3, #0
 8003e46:	4602      	mov	r2, r0
 8003e48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e4a:	6a21      	ldr	r1, [r4, #32]
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	47b0      	blx	r6
 8003e50:	1c43      	adds	r3, r0, #1
 8003e52:	89a3      	ldrh	r3, [r4, #12]
 8003e54:	d106      	bne.n	8003e64 <__sflush_r+0x68>
 8003e56:	6829      	ldr	r1, [r5, #0]
 8003e58:	291d      	cmp	r1, #29
 8003e5a:	d848      	bhi.n	8003eee <__sflush_r+0xf2>
 8003e5c:	4a29      	ldr	r2, [pc, #164]	; (8003f04 <__sflush_r+0x108>)
 8003e5e:	40ca      	lsrs	r2, r1
 8003e60:	07d6      	lsls	r6, r2, #31
 8003e62:	d544      	bpl.n	8003eee <__sflush_r+0xf2>
 8003e64:	2200      	movs	r2, #0
 8003e66:	6062      	str	r2, [r4, #4]
 8003e68:	04d9      	lsls	r1, r3, #19
 8003e6a:	6922      	ldr	r2, [r4, #16]
 8003e6c:	6022      	str	r2, [r4, #0]
 8003e6e:	d504      	bpl.n	8003e7a <__sflush_r+0x7e>
 8003e70:	1c42      	adds	r2, r0, #1
 8003e72:	d101      	bne.n	8003e78 <__sflush_r+0x7c>
 8003e74:	682b      	ldr	r3, [r5, #0]
 8003e76:	b903      	cbnz	r3, 8003e7a <__sflush_r+0x7e>
 8003e78:	6560      	str	r0, [r4, #84]	; 0x54
 8003e7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e7c:	602f      	str	r7, [r5, #0]
 8003e7e:	2900      	cmp	r1, #0
 8003e80:	d0c9      	beq.n	8003e16 <__sflush_r+0x1a>
 8003e82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e86:	4299      	cmp	r1, r3
 8003e88:	d002      	beq.n	8003e90 <__sflush_r+0x94>
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	f000 f8de 	bl	800404c <_free_r>
 8003e90:	2000      	movs	r0, #0
 8003e92:	6360      	str	r0, [r4, #52]	; 0x34
 8003e94:	e7c0      	b.n	8003e18 <__sflush_r+0x1c>
 8003e96:	2301      	movs	r3, #1
 8003e98:	4628      	mov	r0, r5
 8003e9a:	47b0      	blx	r6
 8003e9c:	1c41      	adds	r1, r0, #1
 8003e9e:	d1c8      	bne.n	8003e32 <__sflush_r+0x36>
 8003ea0:	682b      	ldr	r3, [r5, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0c5      	beq.n	8003e32 <__sflush_r+0x36>
 8003ea6:	2b1d      	cmp	r3, #29
 8003ea8:	d001      	beq.n	8003eae <__sflush_r+0xb2>
 8003eaa:	2b16      	cmp	r3, #22
 8003eac:	d101      	bne.n	8003eb2 <__sflush_r+0xb6>
 8003eae:	602f      	str	r7, [r5, #0]
 8003eb0:	e7b1      	b.n	8003e16 <__sflush_r+0x1a>
 8003eb2:	89a3      	ldrh	r3, [r4, #12]
 8003eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eb8:	81a3      	strh	r3, [r4, #12]
 8003eba:	e7ad      	b.n	8003e18 <__sflush_r+0x1c>
 8003ebc:	690f      	ldr	r7, [r1, #16]
 8003ebe:	2f00      	cmp	r7, #0
 8003ec0:	d0a9      	beq.n	8003e16 <__sflush_r+0x1a>
 8003ec2:	0793      	lsls	r3, r2, #30
 8003ec4:	680e      	ldr	r6, [r1, #0]
 8003ec6:	bf08      	it	eq
 8003ec8:	694b      	ldreq	r3, [r1, #20]
 8003eca:	600f      	str	r7, [r1, #0]
 8003ecc:	bf18      	it	ne
 8003ece:	2300      	movne	r3, #0
 8003ed0:	eba6 0807 	sub.w	r8, r6, r7
 8003ed4:	608b      	str	r3, [r1, #8]
 8003ed6:	f1b8 0f00 	cmp.w	r8, #0
 8003eda:	dd9c      	ble.n	8003e16 <__sflush_r+0x1a>
 8003edc:	4643      	mov	r3, r8
 8003ede:	463a      	mov	r2, r7
 8003ee0:	6a21      	ldr	r1, [r4, #32]
 8003ee2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	47b0      	blx	r6
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	dc06      	bgt.n	8003efa <__sflush_r+0xfe>
 8003eec:	89a3      	ldrh	r3, [r4, #12]
 8003eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ef2:	81a3      	strh	r3, [r4, #12]
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	e78e      	b.n	8003e18 <__sflush_r+0x1c>
 8003efa:	4407      	add	r7, r0
 8003efc:	eba8 0800 	sub.w	r8, r8, r0
 8003f00:	e7e9      	b.n	8003ed6 <__sflush_r+0xda>
 8003f02:	bf00      	nop
 8003f04:	20400001 	.word	0x20400001

08003f08 <_fflush_r>:
 8003f08:	b538      	push	{r3, r4, r5, lr}
 8003f0a:	690b      	ldr	r3, [r1, #16]
 8003f0c:	4605      	mov	r5, r0
 8003f0e:	460c      	mov	r4, r1
 8003f10:	b1db      	cbz	r3, 8003f4a <_fflush_r+0x42>
 8003f12:	b118      	cbz	r0, 8003f1c <_fflush_r+0x14>
 8003f14:	6983      	ldr	r3, [r0, #24]
 8003f16:	b90b      	cbnz	r3, 8003f1c <_fflush_r+0x14>
 8003f18:	f7ff fa8e 	bl	8003438 <__sinit>
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <_fflush_r+0x48>)
 8003f1e:	429c      	cmp	r4, r3
 8003f20:	d109      	bne.n	8003f36 <_fflush_r+0x2e>
 8003f22:	686c      	ldr	r4, [r5, #4]
 8003f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f28:	b17b      	cbz	r3, 8003f4a <_fflush_r+0x42>
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f32:	f7ff bf63 	b.w	8003dfc <__sflush_r>
 8003f36:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <_fflush_r+0x4c>)
 8003f38:	429c      	cmp	r4, r3
 8003f3a:	d101      	bne.n	8003f40 <_fflush_r+0x38>
 8003f3c:	68ac      	ldr	r4, [r5, #8]
 8003f3e:	e7f1      	b.n	8003f24 <_fflush_r+0x1c>
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <_fflush_r+0x50>)
 8003f42:	429c      	cmp	r4, r3
 8003f44:	bf08      	it	eq
 8003f46:	68ec      	ldreq	r4, [r5, #12]
 8003f48:	e7ec      	b.n	8003f24 <_fflush_r+0x1c>
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	bd38      	pop	{r3, r4, r5, pc}
 8003f4e:	bf00      	nop
 8003f50:	080041c0 	.word	0x080041c0
 8003f54:	080041e0 	.word	0x080041e0
 8003f58:	080041a0 	.word	0x080041a0

08003f5c <_lseek_r>:
 8003f5c:	b538      	push	{r3, r4, r5, lr}
 8003f5e:	4c07      	ldr	r4, [pc, #28]	; (8003f7c <_lseek_r+0x20>)
 8003f60:	4605      	mov	r5, r0
 8003f62:	4608      	mov	r0, r1
 8003f64:	4611      	mov	r1, r2
 8003f66:	2200      	movs	r2, #0
 8003f68:	6022      	str	r2, [r4, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f7fc feae 	bl	8000ccc <_lseek>
 8003f70:	1c43      	adds	r3, r0, #1
 8003f72:	d102      	bne.n	8003f7a <_lseek_r+0x1e>
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	b103      	cbz	r3, 8003f7a <_lseek_r+0x1e>
 8003f78:	602b      	str	r3, [r5, #0]
 8003f7a:	bd38      	pop	{r3, r4, r5, pc}
 8003f7c:	20000194 	.word	0x20000194

08003f80 <__swhatbuf_r>:
 8003f80:	b570      	push	{r4, r5, r6, lr}
 8003f82:	460e      	mov	r6, r1
 8003f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f88:	2900      	cmp	r1, #0
 8003f8a:	b096      	sub	sp, #88	; 0x58
 8003f8c:	4614      	mov	r4, r2
 8003f8e:	461d      	mov	r5, r3
 8003f90:	da07      	bge.n	8003fa2 <__swhatbuf_r+0x22>
 8003f92:	2300      	movs	r3, #0
 8003f94:	602b      	str	r3, [r5, #0]
 8003f96:	89b3      	ldrh	r3, [r6, #12]
 8003f98:	061a      	lsls	r2, r3, #24
 8003f9a:	d410      	bmi.n	8003fbe <__swhatbuf_r+0x3e>
 8003f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fa0:	e00e      	b.n	8003fc0 <__swhatbuf_r+0x40>
 8003fa2:	466a      	mov	r2, sp
 8003fa4:	f000 f8b2 	bl	800410c <_fstat_r>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	dbf2      	blt.n	8003f92 <__swhatbuf_r+0x12>
 8003fac:	9a01      	ldr	r2, [sp, #4]
 8003fae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003fb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003fb6:	425a      	negs	r2, r3
 8003fb8:	415a      	adcs	r2, r3
 8003fba:	602a      	str	r2, [r5, #0]
 8003fbc:	e7ee      	b.n	8003f9c <__swhatbuf_r+0x1c>
 8003fbe:	2340      	movs	r3, #64	; 0x40
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	6023      	str	r3, [r4, #0]
 8003fc4:	b016      	add	sp, #88	; 0x58
 8003fc6:	bd70      	pop	{r4, r5, r6, pc}

08003fc8 <__smakebuf_r>:
 8003fc8:	898b      	ldrh	r3, [r1, #12]
 8003fca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fcc:	079d      	lsls	r5, r3, #30
 8003fce:	4606      	mov	r6, r0
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	d507      	bpl.n	8003fe4 <__smakebuf_r+0x1c>
 8003fd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	6123      	str	r3, [r4, #16]
 8003fdc:	2301      	movs	r3, #1
 8003fde:	6163      	str	r3, [r4, #20]
 8003fe0:	b002      	add	sp, #8
 8003fe2:	bd70      	pop	{r4, r5, r6, pc}
 8003fe4:	ab01      	add	r3, sp, #4
 8003fe6:	466a      	mov	r2, sp
 8003fe8:	f7ff ffca 	bl	8003f80 <__swhatbuf_r>
 8003fec:	9900      	ldr	r1, [sp, #0]
 8003fee:	4605      	mov	r5, r0
 8003ff0:	4630      	mov	r0, r6
 8003ff2:	f7ff faab 	bl	800354c <_malloc_r>
 8003ff6:	b948      	cbnz	r0, 800400c <__smakebuf_r+0x44>
 8003ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ffc:	059a      	lsls	r2, r3, #22
 8003ffe:	d4ef      	bmi.n	8003fe0 <__smakebuf_r+0x18>
 8004000:	f023 0303 	bic.w	r3, r3, #3
 8004004:	f043 0302 	orr.w	r3, r3, #2
 8004008:	81a3      	strh	r3, [r4, #12]
 800400a:	e7e3      	b.n	8003fd4 <__smakebuf_r+0xc>
 800400c:	4b0d      	ldr	r3, [pc, #52]	; (8004044 <__smakebuf_r+0x7c>)
 800400e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	6020      	str	r0, [r4, #0]
 8004014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004018:	81a3      	strh	r3, [r4, #12]
 800401a:	9b00      	ldr	r3, [sp, #0]
 800401c:	6163      	str	r3, [r4, #20]
 800401e:	9b01      	ldr	r3, [sp, #4]
 8004020:	6120      	str	r0, [r4, #16]
 8004022:	b15b      	cbz	r3, 800403c <__smakebuf_r+0x74>
 8004024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004028:	4630      	mov	r0, r6
 800402a:	f000 f881 	bl	8004130 <_isatty_r>
 800402e:	b128      	cbz	r0, 800403c <__smakebuf_r+0x74>
 8004030:	89a3      	ldrh	r3, [r4, #12]
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	81a3      	strh	r3, [r4, #12]
 800403c:	89a3      	ldrh	r3, [r4, #12]
 800403e:	431d      	orrs	r5, r3
 8004040:	81a5      	strh	r5, [r4, #12]
 8004042:	e7cd      	b.n	8003fe0 <__smakebuf_r+0x18>
 8004044:	08003401 	.word	0x08003401

08004048 <__malloc_lock>:
 8004048:	4770      	bx	lr

0800404a <__malloc_unlock>:
 800404a:	4770      	bx	lr

0800404c <_free_r>:
 800404c:	b538      	push	{r3, r4, r5, lr}
 800404e:	4605      	mov	r5, r0
 8004050:	2900      	cmp	r1, #0
 8004052:	d045      	beq.n	80040e0 <_free_r+0x94>
 8004054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004058:	1f0c      	subs	r4, r1, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	bfb8      	it	lt
 800405e:	18e4      	addlt	r4, r4, r3
 8004060:	f7ff fff2 	bl	8004048 <__malloc_lock>
 8004064:	4a1f      	ldr	r2, [pc, #124]	; (80040e4 <_free_r+0x98>)
 8004066:	6813      	ldr	r3, [r2, #0]
 8004068:	4610      	mov	r0, r2
 800406a:	b933      	cbnz	r3, 800407a <_free_r+0x2e>
 800406c:	6063      	str	r3, [r4, #4]
 800406e:	6014      	str	r4, [r2, #0]
 8004070:	4628      	mov	r0, r5
 8004072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004076:	f7ff bfe8 	b.w	800404a <__malloc_unlock>
 800407a:	42a3      	cmp	r3, r4
 800407c:	d90c      	bls.n	8004098 <_free_r+0x4c>
 800407e:	6821      	ldr	r1, [r4, #0]
 8004080:	1862      	adds	r2, r4, r1
 8004082:	4293      	cmp	r3, r2
 8004084:	bf04      	itt	eq
 8004086:	681a      	ldreq	r2, [r3, #0]
 8004088:	685b      	ldreq	r3, [r3, #4]
 800408a:	6063      	str	r3, [r4, #4]
 800408c:	bf04      	itt	eq
 800408e:	1852      	addeq	r2, r2, r1
 8004090:	6022      	streq	r2, [r4, #0]
 8004092:	6004      	str	r4, [r0, #0]
 8004094:	e7ec      	b.n	8004070 <_free_r+0x24>
 8004096:	4613      	mov	r3, r2
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	b10a      	cbz	r2, 80040a0 <_free_r+0x54>
 800409c:	42a2      	cmp	r2, r4
 800409e:	d9fa      	bls.n	8004096 <_free_r+0x4a>
 80040a0:	6819      	ldr	r1, [r3, #0]
 80040a2:	1858      	adds	r0, r3, r1
 80040a4:	42a0      	cmp	r0, r4
 80040a6:	d10b      	bne.n	80040c0 <_free_r+0x74>
 80040a8:	6820      	ldr	r0, [r4, #0]
 80040aa:	4401      	add	r1, r0
 80040ac:	1858      	adds	r0, r3, r1
 80040ae:	4282      	cmp	r2, r0
 80040b0:	6019      	str	r1, [r3, #0]
 80040b2:	d1dd      	bne.n	8004070 <_free_r+0x24>
 80040b4:	6810      	ldr	r0, [r2, #0]
 80040b6:	6852      	ldr	r2, [r2, #4]
 80040b8:	605a      	str	r2, [r3, #4]
 80040ba:	4401      	add	r1, r0
 80040bc:	6019      	str	r1, [r3, #0]
 80040be:	e7d7      	b.n	8004070 <_free_r+0x24>
 80040c0:	d902      	bls.n	80040c8 <_free_r+0x7c>
 80040c2:	230c      	movs	r3, #12
 80040c4:	602b      	str	r3, [r5, #0]
 80040c6:	e7d3      	b.n	8004070 <_free_r+0x24>
 80040c8:	6820      	ldr	r0, [r4, #0]
 80040ca:	1821      	adds	r1, r4, r0
 80040cc:	428a      	cmp	r2, r1
 80040ce:	bf04      	itt	eq
 80040d0:	6811      	ldreq	r1, [r2, #0]
 80040d2:	6852      	ldreq	r2, [r2, #4]
 80040d4:	6062      	str	r2, [r4, #4]
 80040d6:	bf04      	itt	eq
 80040d8:	1809      	addeq	r1, r1, r0
 80040da:	6021      	streq	r1, [r4, #0]
 80040dc:	605c      	str	r4, [r3, #4]
 80040de:	e7c7      	b.n	8004070 <_free_r+0x24>
 80040e0:	bd38      	pop	{r3, r4, r5, pc}
 80040e2:	bf00      	nop
 80040e4:	20000090 	.word	0x20000090

080040e8 <_read_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	4c07      	ldr	r4, [pc, #28]	; (8004108 <_read_r+0x20>)
 80040ec:	4605      	mov	r5, r0
 80040ee:	4608      	mov	r0, r1
 80040f0:	4611      	mov	r1, r2
 80040f2:	2200      	movs	r2, #0
 80040f4:	6022      	str	r2, [r4, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f7fc fd88 	bl	8000c0c <_read>
 80040fc:	1c43      	adds	r3, r0, #1
 80040fe:	d102      	bne.n	8004106 <_read_r+0x1e>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	b103      	cbz	r3, 8004106 <_read_r+0x1e>
 8004104:	602b      	str	r3, [r5, #0]
 8004106:	bd38      	pop	{r3, r4, r5, pc}
 8004108:	20000194 	.word	0x20000194

0800410c <_fstat_r>:
 800410c:	b538      	push	{r3, r4, r5, lr}
 800410e:	4c07      	ldr	r4, [pc, #28]	; (800412c <_fstat_r+0x20>)
 8004110:	2300      	movs	r3, #0
 8004112:	4605      	mov	r5, r0
 8004114:	4608      	mov	r0, r1
 8004116:	4611      	mov	r1, r2
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	f7fc fdbc 	bl	8000c96 <_fstat>
 800411e:	1c43      	adds	r3, r0, #1
 8004120:	d102      	bne.n	8004128 <_fstat_r+0x1c>
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	b103      	cbz	r3, 8004128 <_fstat_r+0x1c>
 8004126:	602b      	str	r3, [r5, #0]
 8004128:	bd38      	pop	{r3, r4, r5, pc}
 800412a:	bf00      	nop
 800412c:	20000194 	.word	0x20000194

08004130 <_isatty_r>:
 8004130:	b538      	push	{r3, r4, r5, lr}
 8004132:	4c06      	ldr	r4, [pc, #24]	; (800414c <_isatty_r+0x1c>)
 8004134:	2300      	movs	r3, #0
 8004136:	4605      	mov	r5, r0
 8004138:	4608      	mov	r0, r1
 800413a:	6023      	str	r3, [r4, #0]
 800413c:	f7fc fdbb 	bl	8000cb6 <_isatty>
 8004140:	1c43      	adds	r3, r0, #1
 8004142:	d102      	bne.n	800414a <_isatty_r+0x1a>
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	b103      	cbz	r3, 800414a <_isatty_r+0x1a>
 8004148:	602b      	str	r3, [r5, #0]
 800414a:	bd38      	pop	{r3, r4, r5, pc}
 800414c:	20000194 	.word	0x20000194

08004150 <_init>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	bf00      	nop
 8004154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004156:	bc08      	pop	{r3}
 8004158:	469e      	mov	lr, r3
 800415a:	4770      	bx	lr

0800415c <_fini>:
 800415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415e:	bf00      	nop
 8004160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004162:	bc08      	pop	{r3}
 8004164:	469e      	mov	lr, r3
 8004166:	4770      	bx	lr
